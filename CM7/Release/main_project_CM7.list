
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800b010  0800b010  0001b010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b3e8  0800b3e8  0001b3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b3f0  0800b3f0  0001b3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b3f4  0800b3f4  0001b3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800b3f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000136e4  240001e0  0800b5d8  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240138c4  0800b5d8  000238c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024727  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000038dc  00000000  00000000  00044935  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012f0  00000000  00000000  00048218  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001170  00000000  00000000  00049508  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b2dd  00000000  00000000  0004a678  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00013468  00000000  00000000  00085955  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00184285  00000000  00000000  00098dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  0021d042  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000059ec  00000000  00000000  0021d12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000008d6  00000000  00000000  00222b18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aff8 	.word	0x0800aff8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800aff8 	.word	0x0800aff8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <inst_absolute>:
#include <main.h>
#include "math.h"

// Preprocessing

void inst_absolute(float32_t in[], float32_t out[]){
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	int j = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	e031      	b.n	80007e8 <inst_absolute+0x78>
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	ed93 7a00 	vldr	s14, [r3]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3301      	adds	r3, #1
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	edd3 6a00 	vldr	s13, [r3]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3301      	adds	r3, #1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	edd3 7a00 	vldr	s15, [r3]
 80007bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	18d4      	adds	r4, r2, r3
 80007cc:	eeb0 0a67 	vmov.f32	s0, s15
 80007d0:	f006 fd8a 	bl	80072e8 <sqrtf>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
 80007d8:	edc4 7a00 	vstr	s15, [r4]
		j++;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3302      	adds	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <inst_absolute+0x8c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbc7      	blt.n	8000784 <inst_absolute+0x14>
	}
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	0800b0e8 	.word	0x0800b0e8

08000800 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	int j = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	e020      	b.n	8000856 <inst_phase+0x56>
		out[j] = atan2f(in[i+1], in[i]);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3301      	adds	r3, #1
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	ed93 7a00 	vldr	s14, [r3]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	18d4      	adds	r4, r2, r3
 8000836:	eef0 0a47 	vmov.f32	s1, s14
 800083a:	eeb0 0a67 	vmov.f32	s0, s15
 800083e:	f006 fd51 	bl	80072e4 <atan2f>
 8000842:	eef0 7a40 	vmov.f32	s15, s0
 8000846:	edc4 7a00 	vstr	s15, [r4]
		j++;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3302      	adds	r3, #2
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <inst_phase+0x6c>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	429a      	cmp	r2, r3
 8000860:	dbd8      	blt.n	8000814 <inst_phase+0x14>
	}
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	bf00      	nop
 800086c:	0800b0e8 	.word	0x0800b0e8

08000870 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	        end
	    end
	end
	yout((i+1),:)=u(i+1)+(2*pi*k); % add 2*pi*k to the last element of the input
	*/
	uint16_t k = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	82fb      	strh	r3, [r7, #22]
	float32_t alpha = M_PI;
 800087e:	4b48      	ldr	r3, [pc, #288]	; (80009a0 <unwrap+0x130>)
 8000880:	60fb      	str	r3, [r7, #12]
	float32_t diff = 0.0f;
 8000882:	f04f 0300 	mov.w	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < (frameSize - 1); i++){
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	e052      	b.n	8000934 <unwrap+0xc4>
		out[i] = in[i] + 2*M_PI*k;
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800089e:	8afb      	ldrh	r3, [r7, #22]
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008a8:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8000998 <unwrap+0x128>
 80008ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80008b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008c0:	edc3 7a00 	vstr	s15, [r3]
		diff = fabsf(in[i+1] - in[i]);
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	3301      	adds	r3, #1
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	ed93 7a00 	vldr	s14, [r3]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	edd3 7a00 	vldr	s15, [r3]
 80008de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e2:	eef0 7ae7 	vabs.f32	s15, s15
 80008e6:	edc7 7a02 	vstr	s15, [r7, #8]
		if(diff > alpha){
 80008ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80008ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80008f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fa:	dd18      	ble.n	800092e <unwrap+0xbe>
			if(in[i+1] < in[i]){
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	3301      	adds	r3, #1
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	ed93 7a00 	vldr	s14, [r3]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	edd3 7a00 	vldr	s15, [r3]
 8000916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800091a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091e:	d503      	bpl.n	8000928 <unwrap+0xb8>
				k++;
 8000920:	8afb      	ldrh	r3, [r7, #22]
 8000922:	3301      	adds	r3, #1
 8000924:	82fb      	strh	r3, [r7, #22]
 8000926:	e002      	b.n	800092e <unwrap+0xbe>
			} else {
				k--;
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	3b01      	subs	r3, #1
 800092c:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (frameSize - 1); i++){
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	3301      	adds	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <unwrap+0x134>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	3b01      	subs	r3, #1
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	dba6      	blt.n	800088e <unwrap+0x1e>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <unwrap+0x134>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800094a:	4413      	add	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800095a:	8afb      	ldrh	r3, [r7, #22]
 800095c:	ee07 3a90 	vmov	s15, r3
 8000960:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000964:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000998 <unwrap+0x128>
 8000968:	ee27 7b05 	vmul.f64	d7, d7, d5
 800096c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <unwrap+0x134>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800097a:	4413      	add	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	4413      	add	r3, r2
 8000982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000986:	edc3 7a00 	vstr	s15, [r3]
}
 800098a:	bf00      	nop
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	54442d18 	.word	0x54442d18
 800099c:	401921fb 	.word	0x401921fb
 80009a0:	40490fdb 	.word	0x40490fdb
 80009a4:	0800b0e8 	.word	0x0800b0e8

080009a8 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <inst_frequency+0x158>)
 80009b4:	f242 0210 	movw	r2, #8208	; 0x2010
 80009b8:	443a      	add	r2, r7
 80009ba:	4413      	add	r3, r2
 80009bc:	6018      	str	r0, [r3, #0]
 80009be:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <inst_frequency+0x15c>)
 80009c0:	f242 0210 	movw	r2, #8208	; 0x2010
 80009c4:	443a      	add	r2, r7
 80009c6:	4413      	add	r3, r2
 80009c8:	6019      	str	r1, [r3, #0]
	float32_t phase[1024] = {0};
 80009ca:	4b4f      	ldr	r3, [pc, #316]	; (8000b08 <inst_frequency+0x160>)
 80009cc:	f242 0210 	movw	r2, #8208	; 0x2010
 80009d0:	443a      	add	r2, r7
 80009d2:	4413      	add	r3, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	461a      	mov	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f006 fea2 	bl	8007726 <memset>
	float32_t unwrapped_phase[1024] = {0};
 80009e2:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <inst_frequency+0x164>)
 80009e4:	f242 0210 	movw	r2, #8208	; 0x2010
 80009e8:	443a      	add	r2, r7
 80009ea:	4413      	add	r3, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	461a      	mov	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f006 fe96 	bl	8007726 <memset>
	float32_t C = 1 / M_TWOPI;
 80009fa:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <inst_frequency+0x168>)
 80009fc:	f242 0208 	movw	r2, #8200	; 0x2008
 8000a00:	443a      	add	r2, r7
 8000a02:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 8000a04:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <inst_frequency+0x160>)
 8000a06:	f242 0310 	movw	r3, #8208	; 0x2010
 8000a0a:	443b      	add	r3, r7
 8000a0c:	441a      	add	r2, r3
 8000a0e:	4b3c      	ldr	r3, [pc, #240]	; (8000b00 <inst_frequency+0x158>)
 8000a10:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a14:	4439      	add	r1, r7
 8000a16:	440b      	add	r3, r1
 8000a18:	4611      	mov	r1, r2
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	f7ff fef0 	bl	8000800 <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8000a20:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <inst_frequency+0x164>)
 8000a22:	f242 0310 	movw	r3, #8208	; 0x2010
 8000a26:	443b      	add	r3, r7
 8000a28:	441a      	add	r2, r3
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <inst_frequency+0x160>)
 8000a2c:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a30:	4439      	add	r1, r7
 8000a32:	440b      	add	r3, r1
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff1a 	bl	8000870 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000a42:	443a      	add	r2, r7
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	e03a      	b.n	8000abe <inst_frequency+0x116>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 8000a48:	f242 030c 	movw	r3, #8204	; 0x200c
 8000a4c:	443b      	add	r3, r7
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <inst_frequency+0x164>)
 8000a54:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a58:	4439      	add	r1, r7
 8000a5a:	440b      	add	r3, r1
 8000a5c:	0092      	lsls	r2, r2, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	ed93 7a00 	vldr	s14, [r3]
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <inst_frequency+0x164>)
 8000a66:	f242 0210 	movw	r2, #8208	; 0x2010
 8000a6a:	443a      	add	r2, r7
 8000a6c:	4413      	add	r3, r2
 8000a6e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000a72:	443a      	add	r2, r7
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	edd3 7a00 	vldr	s15, [r3]
 8000a7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a82:	f242 030c 	movw	r3, #8204	; 0x200c
 8000a86:	443b      	add	r3, r7
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	009a      	lsls	r2, r3, #2
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <inst_frequency+0x15c>)
 8000a8e:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a92:	4439      	add	r1, r7
 8000a94:	440b      	add	r3, r1
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	f242 0208 	movw	r2, #8200	; 0x2008
 8000a9e:	443a      	add	r2, r7
 8000aa0:	edd2 7a00 	vldr	s15, [r2]
 8000aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 8000aac:	f242 030c 	movw	r3, #8204	; 0x200c
 8000ab0:	443b      	add	r3, r7
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f242 020c 	movw	r2, #8204	; 0x200c
 8000aba:	443a      	add	r2, r7
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <inst_frequency+0x16c>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f242 020c 	movw	r2, #8204	; 0x200c
 8000ac8:	443a      	add	r2, r7
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbbb      	blt.n	8000a48 <inst_frequency+0xa0>
	}
	out[frameSize - 1] = 0;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <inst_frequency+0x16c>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000ada:	4413      	add	r3, r2
 8000adc:	009a      	lsls	r2, r3, #2
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <inst_frequency+0x15c>)
 8000ae0:	f242 0110 	movw	r1, #8208	; 0x2010
 8000ae4:	4439      	add	r1, r7
 8000ae6:	440b      	add	r3, r1
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	ffffdff4 	.word	0xffffdff4
 8000b04:	ffffdff0 	.word	0xffffdff0
 8000b08:	ffffeff8 	.word	0xffffeff8
 8000b0c:	ffffdff8 	.word	0xffffdff8
 8000b10:	3e22f983 	.word	0x3e22f983
 8000b14:	0800b0e8 	.word	0x0800b0e8

08000b18 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 fdd9 	bl	80076f0 <malloc>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b42:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f006 fdd1 	bl	80076f0 <malloc>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	61bb      	str	r3, [r7, #24]
	inst_absolute(in, &absolute[0]);
 8000b52:	69f9      	ldr	r1, [r7, #28]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fe0b 	bl	8000770 <inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	f107 0210 	add.w	r2, r7, #16
 8000b68:	69f8      	ldr	r0, [r7, #28]
 8000b6a:	f006 fb55 	bl	8007218 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
 8000b72:	e012      	b.n	8000b9a <inst_centralized_normalized_absolute+0x82>
		normalized[a] = absolute[a] / max;
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	edd3 6a00 	vldr	s13, [r3]
 8000b80:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b90:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	3301      	adds	r3, #1
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	dbe6      	blt.n	8000b74 <inst_centralized_normalized_absolute+0x5c>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	69b8      	ldr	r0, [r7, #24]
 8000bb4:	f006 fafa 	bl	80071ac <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
 8000bbc:	e016      	b.n	8000bec <inst_centralized_normalized_absolute+0xd4>
		out[i] = normalized[i] / mean - 1;
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	edd3 6a00 	vldr	s13, [r3]
 8000bca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	4413      	add	r3, r2
 8000bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000be2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	3301      	adds	r3, #1
 8000bea:	623b      	str	r3, [r7, #32]
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	dbe2      	blt.n	8000bbe <inst_centralized_normalized_absolute+0xa6>
	}
	free(absolute);
 8000bf8:	69f8      	ldr	r0, [r7, #28]
 8000bfa:	f006 fd81 	bl	8007700 <free>
	free(normalized);
 8000bfe:	69b8      	ldr	r0, [r7, #24]
 8000c00:	f006 fd7e 	bl	8007700 <free>
}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	0800b0e8 	.word	0x0800b0e8

08000c10 <mean_of_squared>:

void mean(float32_t in[], float32_t *out) {
	arm_mean_f32(&in[0], frameSize, out);
}

void mean_of_squared(float32_t in[], float32_t *out) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	float32_t result;
	arm_power_f32(&in[0], frameSize, &result);
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <mean_of_squared+0x40>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	461a      	mov	r2, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f006 fa86 	bl	8007138 <arm_power_f32>
	*out = result / (float32_t) frameSize;
 8000c2c:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <mean_of_squared+0x40>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	ee07 3a90 	vmov	s15, r3
 8000c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	edc3 7a00 	vstr	s15, [r3]
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	0800b0e8 	.word	0x0800b0e8

08000c54 <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	arm_std_f32(&in[0], frameSize, out);
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <std_dev+0x20>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f006 f9ee 	bl	8007048 <arm_std_f32>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	0800b0e8 	.word	0x0800b0e8

08000c78 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a49      	ldr	r2, [pc, #292]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cac:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a42      	ldr	r2, [pc, #264]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	4a3a      	ldr	r2, [pc, #232]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	4a24      	ldr	r2, [pc, #144]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d48:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <MX_GPIO_Init+0x148>)
 8000d4a:	f001 fc87 	bl	800265c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2102      	movs	r1, #2
 8000d52:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <MX_GPIO_Init+0x14c>)
 8000d54:	f001 fc82 	bl	800265c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d58:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <MX_GPIO_Init+0x148>)
 8000d72:	f001 fac3 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d76:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_GPIO_Init+0x150>)
 8000d94:	f001 fab2 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_GPIO_Init+0x14c>)
 8000db0:	f001 faa4 	bl	80022fc <HAL_GPIO_Init>

}
 8000db4:	bf00      	nop
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58020400 	.word	0x58020400
 8000dc4:	58021000 	.word	0x58021000
 8000dc8:	58020000 	.word	0x58020000

08000dcc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd4:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <SCB_EnableICache+0x3c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000de0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000de4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <SCB_EnableICache+0x3c>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <SCB_EnableICache+0x3c>)
 8000dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000df8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <SCB_EnableDCache+0x7c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <SCB_EnableDCache+0x7c>)
 8000e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e24:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	0b5b      	lsrs	r3, r3, #13
 8000e2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e2e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	08db      	lsrs	r3, r3, #3
 8000e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e38:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	015a      	lsls	r2, r3, #5
 8000e3e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e42:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e48:	490f      	ldr	r1, [pc, #60]	; (8000e88 <SCB_EnableDCache+0x7c>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1ef      	bne.n	8000e3a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	60fa      	str	r2, [r7, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1e5      	bne.n	8000e30 <SCB_EnableDCache+0x24>
 8000e64:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <SCB_EnableDCache+0x7c>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <SCB_EnableDCache+0x7c>)
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6153      	str	r3, [r2, #20]
 8000e74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e78:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000e92:	f7ff ff9b 	bl	8000dcc <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000e96:	f7ff ffb9 	bl	8000e0c <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000e9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ea0:	bf00      	nop
 8000ea2:	4bad      	ldr	r3, [pc, #692]	; (8001158 <main+0x2cc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d004      	beq.n	8000eb8 <main+0x2c>
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	627a      	str	r2, [r7, #36]	; 0x24
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	dcf4      	bgt.n	8000ea2 <main+0x16>
	if ( timeout < 0 )
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	da01      	bge.n	8000ec2 <main+0x36>
	{
		Error_Handler();
 8000ebe:	f000 fc4d 	bl	800175c <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ec2:	f000 fe07 	bl	8001ad4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ec6:	f000 fa5f 	bl	8001388 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000eca:	4ba3      	ldr	r3, [pc, #652]	; (8001158 <main+0x2cc>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	4aa1      	ldr	r2, [pc, #644]	; (8001158 <main+0x2cc>)
 8000ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eda:	4b9f      	ldr	r3, [pc, #636]	; (8001158 <main+0x2cc>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f001 fbd1 	bl	8002690 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f001 fbe7 	bl	80026c4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efc:	bf00      	nop
 8000efe:	4b96      	ldr	r3, [pc, #600]	; (8001158 <main+0x2cc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d104      	bne.n	8000f14 <main+0x88>
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dcf4      	bgt.n	8000efe <main+0x72>
	if ( timeout < 0 )
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da01      	bge.n	8000f1e <main+0x92>
	{
		Error_Handler();
 8000f1a:	f000 fc1f 	bl	800175c <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f1e:	f7ff feab 	bl	8000c78 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000f22:	f000 fd0f 	bl	8001944 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000f26:	f000 fc9f 	bl	8001868 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], bufferSize) != HAL_OK)
 8000f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2e:	461a      	mov	r2, r3
 8000f30:	498a      	ldr	r1, [pc, #552]	; (800115c <main+0x2d0>)
 8000f32:	488b      	ldr	r0, [pc, #556]	; (8001160 <main+0x2d4>)
 8000f34:	f004 fab2 	bl	800549c <HAL_UART_Receive_IT>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d00a      	beq.n	8000f54 <main+0xc8>
	{
		Error_Handler();
 8000f3e:	f000 fc0d 	bl	800175c <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 8000f42:	e007      	b.n	8000f54 <main+0xc8>
	{
		HAL_Delay(500);
 8000f44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f48:	f000 fe56 	bl	8001bf8 <HAL_Delay>
		blink_green();
 8000f4c:	f000 fb16 	bl	800157c <blink_green>
		blink_green();
 8000f50:	f000 fb14 	bl	800157c <blink_green>
	while (UartReady != SET)
 8000f54:	4b83      	ldr	r3, [pc, #524]	; (8001164 <main+0x2d8>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d1f2      	bne.n	8000f44 <main+0xb8>
	}
	UartReady = RESET;
 8000f5e:	4b81      	ldr	r3, [pc, #516]	; (8001164 <main+0x2d8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	487f      	ldr	r0, [pc, #508]	; (8001168 <main+0x2dc>)
 8000f6a:	f001 fb77 	bl	800265c <HAL_GPIO_WritePin>

	if(rxBuffer.bytes[8191] != 0 && (processed == 0)){
 8000f6e:	4a7b      	ldr	r2, [pc, #492]	; (800115c <main+0x2d0>)
 8000f70:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d008      	beq.n	8000f8e <main+0x102>
 8000f7c:	4b7b      	ldr	r3, [pc, #492]	; (800116c <main+0x2e0>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <main+0x102>
		HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2102      	movs	r1, #2
 8000f88:	4879      	ldr	r0, [pc, #484]	; (8001170 <main+0x2e4>)
 8000f8a:	f001 fb67 	bl	800265c <HAL_GPIO_WritePin>
	}

	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 8000f8e:	4b79      	ldr	r3, [pc, #484]	; (8001174 <main+0x2e8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b77      	ldr	r3, [pc, #476]	; (8001174 <main+0x2e8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 0201 	orr.w	r2, r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000f9e:	4b75      	ldr	r3, [pc, #468]	; (8001174 <main+0x2e8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b73      	ldr	r3, [pc, #460]	; (8001174 <main+0x2e8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fac:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8000fae:	4871      	ldr	r0, [pc, #452]	; (8001174 <main+0x2e8>)
 8000fb0:	f003 fee2 	bl	8004d78 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fb4:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <main+0x2e8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24

	/*****************************************************************************************************/
	// Instantaneous absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fbc:	4b6d      	ldr	r3, [pc, #436]	; (8001174 <main+0x2e8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8000fc4:	496c      	ldr	r1, [pc, #432]	; (8001178 <main+0x2ec>)
 8000fc6:	4865      	ldr	r0, [pc, #404]	; (800115c <main+0x2d0>)
 8000fc8:	f7ff fbd2 	bl	8000770 <inst_absolute>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8000fcc:	4b69      	ldr	r3, [pc, #420]	; (8001174 <main+0x2e8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	623b      	str	r3, [r7, #32]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8000fd4:	4869      	ldr	r0, [pc, #420]	; (800117c <main+0x2f0>)
 8000fd6:	f000 fae7 	bl	80015a8 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst abs counter = %ld\r\n&", counter.number);
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4968      	ldr	r1, [pc, #416]	; (8001180 <main+0x2f4>)
 8000fe0:	4866      	ldr	r0, [pc, #408]	; (800117c <main+0x2f0>)
 8000fe2:	f007 fa7b 	bl	80084dc <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000fe6:	485e      	ldr	r0, [pc, #376]	; (8001160 <main+0x2d4>)
 8000fe8:	f005 fb0c 	bl	8006604 <UART_CheckIdleState>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10f      	bne.n	8001012 <main+0x186>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8000ff2:	2232      	movs	r2, #50	; 0x32
 8000ff4:	4961      	ldr	r1, [pc, #388]	; (800117c <main+0x2f0>)
 8000ff6:	485a      	ldr	r0, [pc, #360]	; (8001160 <main+0x2d4>)
 8000ff8:	f004 f9cc 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8000ffc:	e001      	b.n	8001002 <main+0x176>
			blink_red_fast();
 8000ffe:	f000 fa8d 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 8001002:	4b58      	ldr	r3, [pc, #352]	; (8001164 <main+0x2d8>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b01      	cmp	r3, #1
 800100a:	d1f8      	bne.n	8000ffe <main+0x172>
		}
		UartReady = RESET;
 800100c:	4b55      	ldr	r3, [pc, #340]	; (8001164 <main+0x2d8>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8001012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001016:	f000 fdef 	bl	8001bf8 <HAL_Delay>
	transmit_array(&instAbs.bytes[0], 4096);
 800101a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101e:	4856      	ldr	r0, [pc, #344]	; (8001178 <main+0x2ec>)
 8001020:	f000 fb32 	bl	8001688 <transmit_array>

	blink_orange_slow();
 8001024:	f000 fa92 	bl	800154c <blink_orange_slow>
	blink_orange_slow();
 8001028:	f000 fa90 	bl	800154c <blink_orange_slow>

	// Instantaneous phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800102c:	4b51      	ldr	r3, [pc, #324]	; (8001174 <main+0x2e8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8001034:	4953      	ldr	r1, [pc, #332]	; (8001184 <main+0x2f8>)
 8001036:	4849      	ldr	r0, [pc, #292]	; (800115c <main+0x2d0>)
 8001038:	f7ff fbe2 	bl	8000800 <inst_phase>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800103c:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <main+0x2e8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	623b      	str	r3, [r7, #32]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001044:	484d      	ldr	r0, [pc, #308]	; (800117c <main+0x2f0>)
 8001046:	f000 faaf 	bl	80015a8 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst phase counter = %ld\r\n&", counter.number);
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	461a      	mov	r2, r3
 800104e:	494e      	ldr	r1, [pc, #312]	; (8001188 <main+0x2fc>)
 8001050:	484a      	ldr	r0, [pc, #296]	; (800117c <main+0x2f0>)
 8001052:	f007 fa43 	bl	80084dc <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001056:	4842      	ldr	r0, [pc, #264]	; (8001160 <main+0x2d4>)
 8001058:	f005 fad4 	bl	8006604 <UART_CheckIdleState>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10f      	bne.n	8001082 <main+0x1f6>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001062:	2232      	movs	r2, #50	; 0x32
 8001064:	4945      	ldr	r1, [pc, #276]	; (800117c <main+0x2f0>)
 8001066:	483e      	ldr	r0, [pc, #248]	; (8001160 <main+0x2d4>)
 8001068:	f004 f994 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800106c:	e001      	b.n	8001072 <main+0x1e6>
			blink_red_fast();
 800106e:	f000 fa55 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 8001072:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <main+0x2d8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d1f8      	bne.n	800106e <main+0x1e2>
		}
		UartReady = RESET;
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <main+0x2d8>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8001082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001086:	f000 fdb7 	bl	8001bf8 <HAL_Delay>
	transmit_array(&instPhase.bytes[0], 4096);
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	483d      	ldr	r0, [pc, #244]	; (8001184 <main+0x2f8>)
 8001090:	f000 fafa 	bl	8001688 <transmit_array>

	blink_orange_slow();
 8001094:	f000 fa5a 	bl	800154c <blink_orange_slow>
	blink_orange_slow();
 8001098:	f000 fa58 	bl	800154c <blink_orange_slow>

	// Instantaneous unwrapped phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800109c:	4b35      	ldr	r3, [pc, #212]	; (8001174 <main+0x2e8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 80010a4:	4937      	ldr	r1, [pc, #220]	; (8001184 <main+0x2f8>)
 80010a6:	482d      	ldr	r0, [pc, #180]	; (800115c <main+0x2d0>)
 80010a8:	f7ff fbaa 	bl	8000800 <inst_phase>
	unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 80010ac:	4937      	ldr	r1, [pc, #220]	; (800118c <main+0x300>)
 80010ae:	4835      	ldr	r0, [pc, #212]	; (8001184 <main+0x2f8>)
 80010b0:	f7ff fbde 	bl	8000870 <unwrap>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80010b4:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <main+0x2e8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	623b      	str	r3, [r7, #32]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80010bc:	482f      	ldr	r0, [pc, #188]	; (800117c <main+0x2f0>)
 80010be:	f000 fa73 	bl	80015a8 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst unwrapped phase counter = %ld\r\n&", counter.number);
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4932      	ldr	r1, [pc, #200]	; (8001190 <main+0x304>)
 80010c8:	482c      	ldr	r0, [pc, #176]	; (800117c <main+0x2f0>)
 80010ca:	f007 fa07 	bl	80084dc <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80010ce:	4824      	ldr	r0, [pc, #144]	; (8001160 <main+0x2d4>)
 80010d0:	f005 fa98 	bl	8006604 <UART_CheckIdleState>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10f      	bne.n	80010fa <main+0x26e>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80010da:	2232      	movs	r2, #50	; 0x32
 80010dc:	4927      	ldr	r1, [pc, #156]	; (800117c <main+0x2f0>)
 80010de:	4820      	ldr	r0, [pc, #128]	; (8001160 <main+0x2d4>)
 80010e0:	f004 f958 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80010e4:	e001      	b.n	80010ea <main+0x25e>
			blink_red_fast();
 80010e6:	f000 fa19 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <main+0x2d8>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d1f8      	bne.n	80010e6 <main+0x25a>
		}
		UartReady = RESET;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <main+0x2d8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 80010fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fe:	f000 fd7b 	bl	8001bf8 <HAL_Delay>
	transmit_array(&instUnwrappedPhase.bytes[0], 4096);
 8001102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001106:	4821      	ldr	r0, [pc, #132]	; (800118c <main+0x300>)
 8001108:	f000 fabe 	bl	8001688 <transmit_array>

	blink_orange_slow();
 800110c:	f000 fa1e 	bl	800154c <blink_orange_slow>
	blink_orange_slow();
 8001110:	f000 fa1c 	bl	800154c <blink_orange_slow>

	// Instantaneous frequency value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <main+0x2e8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
	inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 800111c:	491d      	ldr	r1, [pc, #116]	; (8001194 <main+0x308>)
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <main+0x2d0>)
 8001120:	f7ff fc42 	bl	80009a8 <inst_frequency>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <main+0x2e8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	623b      	str	r3, [r7, #32]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <main+0x2f0>)
 800112e:	f000 fa3b 	bl	80015a8 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst freq counter = %ld\r\n&", counter.number);
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	461a      	mov	r2, r3
 8001136:	4918      	ldr	r1, [pc, #96]	; (8001198 <main+0x30c>)
 8001138:	4810      	ldr	r0, [pc, #64]	; (800117c <main+0x2f0>)
 800113a:	f007 f9cf 	bl	80084dc <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800113e:	4808      	ldr	r0, [pc, #32]	; (8001160 <main+0x2d4>)
 8001140:	f005 fa60 	bl	8006604 <UART_CheckIdleState>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d132      	bne.n	80011b0 <main+0x324>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800114a:	2232      	movs	r2, #50	; 0x32
 800114c:	490b      	ldr	r1, [pc, #44]	; (800117c <main+0x2f0>)
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <main+0x2d4>)
 8001150:	f004 f920 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001154:	e024      	b.n	80011a0 <main+0x314>
 8001156:	bf00      	nop
 8001158:	58024400 	.word	0x58024400
 800115c:	2400c894 	.word	0x2400c894
 8001160:	24013830 	.word	0x24013830
 8001164:	24000264 	.word	0x24000264
 8001168:	58020400 	.word	0x58020400
 800116c:	240001fc 	.word	0x240001fc
 8001170:	58021000 	.word	0x58021000
 8001174:	240137e4 	.word	0x240137e4
 8001178:	24008274 	.word	0x24008274
 800117c:	24000200 	.word	0x24000200
 8001180:	0800b010 	.word	0x0800b010
 8001184:	24006274 	.word	0x24006274
 8001188:	0800b02c 	.word	0x0800b02c
 800118c:	24010ba4 	.word	0x24010ba4
 8001190:	0800b048 	.word	0x0800b048
 8001194:	24004274 	.word	0x24004274
 8001198:	0800b070 	.word	0x0800b070
			blink_red_fast();
 800119c:	f000 f9be 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 80011a0:	4b6e      	ldr	r3, [pc, #440]	; (800135c <main+0x4d0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d1f8      	bne.n	800119c <main+0x310>
		}
		UartReady = RESET;
 80011aa:	4b6c      	ldr	r3, [pc, #432]	; (800135c <main+0x4d0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 80011b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b4:	f000 fd20 	bl	8001bf8 <HAL_Delay>
	transmit_array(&instFreq.bytes[0], 4096);
 80011b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011bc:	4868      	ldr	r0, [pc, #416]	; (8001360 <main+0x4d4>)
 80011be:	f000 fa63 	bl	8001688 <transmit_array>

	blink_orange_slow();
 80011c2:	f000 f9c3 	bl	800154c <blink_orange_slow>
	blink_orange_slow();
 80011c6:	f000 f9c1 	bl	800154c <blink_orange_slow>

	// Instantaneous centered normalized absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80011ca:	4b66      	ldr	r3, [pc, #408]	; (8001364 <main+0x4d8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 80011d2:	4965      	ldr	r1, [pc, #404]	; (8001368 <main+0x4dc>)
 80011d4:	4865      	ldr	r0, [pc, #404]	; (800136c <main+0x4e0>)
 80011d6:	f7ff fc9f 	bl	8000b18 <inst_centralized_normalized_absolute>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80011da:	4b62      	ldr	r3, [pc, #392]	; (8001364 <main+0x4d8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	623b      	str	r3, [r7, #32]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80011e2:	4863      	ldr	r0, [pc, #396]	; (8001370 <main+0x4e4>)
 80011e4:	f000 f9e0 	bl	80015a8 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst CN abs counter = %ld\r\n&", counter.number);
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4961      	ldr	r1, [pc, #388]	; (8001374 <main+0x4e8>)
 80011ee:	4860      	ldr	r0, [pc, #384]	; (8001370 <main+0x4e4>)
 80011f0:	f007 f974 	bl	80084dc <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80011f4:	4860      	ldr	r0, [pc, #384]	; (8001378 <main+0x4ec>)
 80011f6:	f005 fa05 	bl	8006604 <UART_CheckIdleState>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10f      	bne.n	8001220 <main+0x394>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001200:	2232      	movs	r2, #50	; 0x32
 8001202:	495b      	ldr	r1, [pc, #364]	; (8001370 <main+0x4e4>)
 8001204:	485c      	ldr	r0, [pc, #368]	; (8001378 <main+0x4ec>)
 8001206:	f004 f8c5 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800120a:	e001      	b.n	8001210 <main+0x384>
			blink_red_fast();
 800120c:	f000 f986 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 8001210:	4b52      	ldr	r3, [pc, #328]	; (800135c <main+0x4d0>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d1f8      	bne.n	800120c <main+0x380>
		}
		UartReady = RESET;
 800121a:	4b50      	ldr	r3, [pc, #320]	; (800135c <main+0x4d0>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8001220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001224:	f000 fce8 	bl	8001bf8 <HAL_Delay>
	transmit_array(&instCNAbs.bytes[0], 4096);
 8001228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122c:	484e      	ldr	r0, [pc, #312]	; (8001368 <main+0x4dc>)
 800122e:	f000 fa2b 	bl	8001688 <transmit_array>

	blink_orange_slow();
 8001232:	f000 f98b 	bl	800154c <blink_orange_slow>
	blink_orange_slow();
 8001236:	f000 f989 	bl	800154c <blink_orange_slow>

	/*****************************************************************************************************/
	// Mean of squared
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800123a:	4b4a      	ldr	r3, [pc, #296]	; (8001364 <main+0x4d8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
	mean_of_squared(&rxBuffer.number[0], &ft1.number);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4848      	ldr	r0, [pc, #288]	; (800136c <main+0x4e0>)
 800124a:	f7ff fce1 	bl	8000c10 <mean_of_squared>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800124e:	4b45      	ldr	r3, [pc, #276]	; (8001364 <main+0x4d8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	623b      	str	r3, [r7, #32]
	transmit_features(&ft1.bytes[0], &counter.bytes[0]);
 8001256:	f107 0220 	add.w	r2, r7, #32
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f9b9 	bl	80015d8 <transmit_features>

	// Standard deviation of the absolute instantaneous phase
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <main+0x4d8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 800126e:	4943      	ldr	r1, [pc, #268]	; (800137c <main+0x4f0>)
 8001270:	4843      	ldr	r0, [pc, #268]	; (8001380 <main+0x4f4>)
 8001272:	f7ff fa7d 	bl	8000770 <inst_absolute>
	std_dev(&instAbsPhase.number[0], &ft2.number);
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	4619      	mov	r1, r3
 800127c:	483f      	ldr	r0, [pc, #252]	; (800137c <main+0x4f0>)
 800127e:	f7ff fce9 	bl	8000c54 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001282:	4b38      	ldr	r3, [pc, #224]	; (8001364 <main+0x4d8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	623b      	str	r3, [r7, #32]
	transmit_features(&ft2.bytes[0], &counter.bytes[0]);
 800128a:	f107 0220 	add.w	r2, r7, #32
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f99f 	bl	80015d8 <transmit_features>

	// Standard deviation of the instantaneous phase
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <main+0x4d8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instPhase.number[0], &ft3.number);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4835      	ldr	r0, [pc, #212]	; (8001380 <main+0x4f4>)
 80012aa:	f7ff fcd3 	bl	8000c54 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <main+0x4d8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	623b      	str	r3, [r7, #32]
	transmit_features(&ft3.bytes[0], &counter.bytes[0]);
 80012b6:	f107 0220 	add.w	r2, r7, #32
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f989 	bl	80015d8 <transmit_features>

	// Standard deviation of the absolute instantaneous frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <main+0x4d8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 80012ce:	492d      	ldr	r1, [pc, #180]	; (8001384 <main+0x4f8>)
 80012d0:	4823      	ldr	r0, [pc, #140]	; (8001360 <main+0x4d4>)
 80012d2:	f7ff fa4d 	bl	8000770 <inst_absolute>
	std_dev(&instAbsFreq.number[0], &ft4.number);
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	4619      	mov	r1, r3
 80012dc:	4829      	ldr	r0, [pc, #164]	; (8001384 <main+0x4f8>)
 80012de:	f7ff fcb9 	bl	8000c54 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <main+0x4d8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	623b      	str	r3, [r7, #32]
	transmit_features(&ft4.bytes[0], &counter.bytes[0]);
 80012ea:	f107 0220 	add.w	r2, r7, #32
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f96f 	bl	80015d8 <transmit_features>

	// Standard deviation of the instantaneous frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <main+0x4d8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instFreq.number[0], &ft5.number);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	4815      	ldr	r0, [pc, #84]	; (8001360 <main+0x4d4>)
 800130a:	f7ff fca3 	bl	8000c54 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <main+0x4d8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	623b      	str	r3, [r7, #32]
	transmit_features(&ft5.bytes[0], &counter.bytes[0]);
 8001316:	f107 0220 	add.w	r2, r7, #32
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f959 	bl	80015d8 <transmit_features>

	// Standard deviation of the centralized normalized absolute amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <main+0x4d8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instCNAbs.number[0], &ft6.number);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <main+0x4dc>)
 8001336:	f7ff fc8d 	bl	8000c54 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <main+0x4d8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	623b      	str	r3, [r7, #32]
	transmit_features(&ft6.bytes[0], &counter.bytes[0]);
 8001342:	f107 0220 	add.w	r2, r7, #32
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f943 	bl	80015d8 <transmit_features>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	clear_leds();
 8001352:	f000 f8cb 	bl	80014ec <clear_leds>
	while (1)
	{
		blink_orange_slow();
 8001356:	f000 f8f9 	bl	800154c <blink_orange_slow>
 800135a:	e7fc      	b.n	8001356 <main+0x4ca>
 800135c:	24000264 	.word	0x24000264
 8001360:	24004274 	.word	0x24004274
 8001364:	240137e4 	.word	0x240137e4
 8001368:	2400a274 	.word	0x2400a274
 800136c:	2400c894 	.word	0x2400c894
 8001370:	24000200 	.word	0x24000200
 8001374:	0800b08c 	.word	0x0800b08c
 8001378:	24013830 	.word	0x24013830
 800137c:	24000274 	.word	0x24000274
 8001380:	24006274 	.word	0x24006274
 8001384:	24002274 	.word	0x24002274

08001388 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0cc      	sub	sp, #304	; 0x130
 800138c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001392:	224c      	movs	r2, #76	; 0x4c
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f006 f9c5 	bl	8007726 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013a0:	2220      	movs	r2, #32
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 f9be 	bl	8007726 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4618      	mov	r0, r3
 80013b0:	23bc      	movs	r3, #188	; 0xbc
 80013b2:	461a      	mov	r2, r3
 80013b4:	2100      	movs	r1, #0
 80013b6:	f006 f9b6 	bl	8007726 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80013ba:	2004      	movs	r0, #4
 80013bc:	f001 f996 	bl	80026ec <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <SystemClock_Config+0x15c>)
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	4a46      	ldr	r2, [pc, #280]	; (80014e4 <SystemClock_Config+0x15c>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <SystemClock_Config+0x15c>)
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	f003 0201 	and.w	r2, r3, #1
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <SystemClock_Config+0x160>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4a41      	ldr	r2, [pc, #260]	; (80014e8 <SystemClock_Config+0x160>)
 80013e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e8:	6193      	str	r3, [r2, #24]
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <SystemClock_Config+0x160>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013fa:	bf00      	nop
 80013fc:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <SystemClock_Config+0x160>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001408:	d1f8      	bne.n	80013fc <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001410:	2301      	movs	r3, #1
 8001412:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001416:	2340      	movs	r3, #64	; 0x40
 8001418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 800142e:	2332      	movs	r3, #50	; 0x32
 8001430:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001446:	230c      	movs	r3, #12
 8001448:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800145c:	4618      	mov	r0, r3
 800145e:	f001 f99f 	bl	80027a0 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8001468:	f000 f978 	bl	800175c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	233f      	movs	r3, #63	; 0x3f
 800146e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001472:	2303      	movs	r3, #3
 8001474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800147e:	2308      	movs	r3, #8
 8001480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001484:	2340      	movs	r3, #64	; 0x40
 8001486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001494:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001498:	2340      	movs	r3, #64	; 0x40
 800149a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800149e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014a2:	2102      	movs	r1, #2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fd8b 	bl	8002fc0 <HAL_RCC_ClockConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x12c>
	{
		Error_Handler();
 80014b0:	f000 f954 	bl	800175c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2202      	movs	r2, #2
 80014ba:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2203      	movs	r2, #3
 80014c2:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 f8fd 	bl	80036c8 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x150>
	{
		Error_Handler();
 80014d4:	f000 f942 	bl	800175c <Error_Handler>
	}
}
 80014d8:	bf00      	nop
 80014da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	58000400 	.word	0x58000400
 80014e8:	58024800 	.word	0x58024800

080014ec <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	4807      	ldr	r0, [pc, #28]	; (8001514 <clear_leds+0x28>)
 80014f6:	f001 f8b1 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2102      	movs	r1, #2
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <clear_leds+0x2c>)
 8001500:	f001 f8ac 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800150a:	4802      	ldr	r0, [pc, #8]	; (8001514 <clear_leds+0x28>)
 800150c:	f001 f8a6 	bl	800265c <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	58020400 	.word	0x58020400
 8001518:	58021000 	.word	0x58021000

0800151c <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001526:	4808      	ldr	r0, [pc, #32]	; (8001548 <blink_red_fast+0x2c>)
 8001528:	f001 f898 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800152c:	2032      	movs	r0, #50	; 0x32
 800152e:	f000 fb63 	bl	8001bf8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <blink_red_fast+0x2c>)
 800153a:	f001 f88f 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800153e:	2032      	movs	r0, #50	; 0x32
 8001540:	f000 fb5a 	bl	8001bf8 <HAL_Delay>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	58020400 	.word	0x58020400

0800154c <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2102      	movs	r1, #2
 8001554:	4808      	ldr	r0, [pc, #32]	; (8001578 <blink_orange_slow+0x2c>)
 8001556:	f001 f881 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800155a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800155e:	f000 fb4b 	bl	8001bf8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2102      	movs	r1, #2
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <blink_orange_slow+0x2c>)
 8001568:	f001 f878 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800156c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001570:	f000 fb42 	bl	8001bf8 <HAL_Delay>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	58021000 	.word	0x58021000

0800157c <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2101      	movs	r1, #1
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <blink_green+0x28>)
 8001586:	f001 f869 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800158a:	20c8      	movs	r0, #200	; 0xc8
 800158c:	f000 fb34 	bl	8001bf8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	2101      	movs	r1, #1
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <blink_green+0x28>)
 8001596:	f001 f861 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800159a:	20c8      	movs	r0, #200	; 0xc8
 800159c:	f000 fb2c 	bl	8001bf8 <HAL_Delay>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	58020400 	.word	0x58020400

080015a8 <reset_buffer>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void reset_buffer(char *stringBuffer){
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 1; i < 50; i++){
 80015b0:	2301      	movs	r3, #1
 80015b2:	81fb      	strh	r3, [r7, #14]
 80015b4:	e007      	b.n	80015c6 <reset_buffer+0x1e>
		stringBuffer[i] = '\0';
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1; i < 50; i++){
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	3301      	adds	r3, #1
 80015c4:	81fb      	strh	r3, [r7, #14]
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	2b31      	cmp	r3, #49	; 0x31
 80015ca:	d9f4      	bls.n	80015b6 <reset_buffer+0xe>
	}
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <transmit_features>:
void resetDataBuffer(uint8_t *dataBuffer){
	for(uint16_t i = 1; i < 8192; i++){
		dataBuffer[i] = 0;
	}
}
void transmit_features(uint8_t *value, uint8_t *counter){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80015e2:	4825      	ldr	r0, [pc, #148]	; (8001678 <transmit_features+0xa0>)
 80015e4:	f005 f80e 	bl	8006604 <UART_CheckIdleState>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d13f      	bne.n	800166e <transmit_features+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80015ee:	2204      	movs	r2, #4
 80015f0:	4922      	ldr	r1, [pc, #136]	; (800167c <transmit_features+0xa4>)
 80015f2:	4821      	ldr	r0, [pc, #132]	; (8001678 <transmit_features+0xa0>)
 80015f4:	f003 fece 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80015f8:	e001      	b.n	80015fe <transmit_features+0x26>
			blink_red_fast();
 80015fa:	f7ff ff8f 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <transmit_features+0xa8>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d1f8      	bne.n	80015fa <transmit_features+0x22>
		}
		UartReady = RESET;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <transmit_features+0xa8>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4);
 800160e:	2204      	movs	r2, #4
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4819      	ldr	r0, [pc, #100]	; (8001678 <transmit_features+0xa0>)
 8001614:	f003 febe 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001618:	e001      	b.n	800161e <transmit_features+0x46>
			blink_red_fast();
 800161a:	f7ff ff7f 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <transmit_features+0xa8>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d1f8      	bne.n	800161a <transmit_features+0x42>
		}
		UartReady = RESET;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <transmit_features+0xa8>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 800162e:	2204      	movs	r2, #4
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	4811      	ldr	r0, [pc, #68]	; (8001678 <transmit_features+0xa0>)
 8001634:	f003 feae 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001638:	e001      	b.n	800163e <transmit_features+0x66>
			blink_red_fast();
 800163a:	f7ff ff6f 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <transmit_features+0xa8>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d1f8      	bne.n	800163a <transmit_features+0x62>
		}
		UartReady = RESET;
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <transmit_features+0xa8>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 800164e:	2204      	movs	r2, #4
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <transmit_features+0xac>)
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <transmit_features+0xa0>)
 8001654:	f003 fe9e 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001658:	e001      	b.n	800165e <transmit_features+0x86>
			blink_red_fast();
 800165a:	f7ff ff5f 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <transmit_features+0xa8>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d1f8      	bne.n	800165a <transmit_features+0x82>
		}
		UartReady = RESET;
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <transmit_features+0xa8>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
	}
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	24013830 	.word	0x24013830
 800167c:	0800b0ec 	.word	0x0800b0ec
 8001680:	24000264 	.word	0x24000264
 8001684:	0800b0f0 	.word	0x0800b0f0

08001688 <transmit_array>:
void transmit_array(uint8_t *array, uint16_t size){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001694:	481d      	ldr	r0, [pc, #116]	; (800170c <transmit_array+0x84>)
 8001696:	f004 ffb5 	bl	8006604 <UART_CheckIdleState>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d130      	bne.n	8001702 <transmit_array+0x7a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80016a0:	2204      	movs	r2, #4
 80016a2:	491b      	ldr	r1, [pc, #108]	; (8001710 <transmit_array+0x88>)
 80016a4:	4819      	ldr	r0, [pc, #100]	; (800170c <transmit_array+0x84>)
 80016a6:	f003 fe75 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80016aa:	e001      	b.n	80016b0 <transmit_array+0x28>
			blink_red_fast();
 80016ac:	f7ff ff36 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <transmit_array+0x8c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d1f8      	bne.n	80016ac <transmit_array+0x24>
		}
		UartReady = RESET;
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <transmit_array+0x8c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	461a      	mov	r2, r3
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4811      	ldr	r0, [pc, #68]	; (800170c <transmit_array+0x84>)
 80016c8:	f003 fe64 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80016cc:	e001      	b.n	80016d2 <transmit_array+0x4a>
			blink_red_fast();
 80016ce:	f7ff ff25 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <transmit_array+0x8c>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d1f8      	bne.n	80016ce <transmit_array+0x46>
		}
		UartReady = RESET;
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <transmit_array+0x8c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 80016e2:	2204      	movs	r2, #4
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <transmit_array+0x90>)
 80016e6:	4809      	ldr	r0, [pc, #36]	; (800170c <transmit_array+0x84>)
 80016e8:	f003 fe54 	bl	8005394 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80016ec:	e001      	b.n	80016f2 <transmit_array+0x6a>
			blink_red_fast();
 80016ee:	f7ff ff15 	bl	800151c <blink_red_fast>
		while(UartReady != SET){
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <transmit_array+0x8c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d1f8      	bne.n	80016ee <transmit_array+0x66>
		}
		UartReady = RESET;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <transmit_array+0x8c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
	}
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	24013830 	.word	0x24013830
 8001710:	0800b0ec 	.word	0x0800b0ec
 8001714:	24000264 	.word	0x24000264
 8001718:	0800b0f0 	.word	0x0800b0f0

0800171c <HAL_UART_TxCpltCallback>:
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100);
	}
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <HAL_UART_TxCpltCallback+0x1c>)
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	24000264 	.word	0x24000264

0800173c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_UART_RxCpltCallback+0x1c>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	24000264 	.word	0x24000264

0800175c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_MspInit+0x30>)
 8001774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001778:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_MspInit+0x30>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_MspInit+0x30>)
 8001784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	58024400 	.word	0x58024400

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 f9e0 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <USART3_IRQHandler+0x10>)
 8001802:	f003 ff23 	bl	800564c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24013830 	.word	0x24013830

08001810 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x50>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x16>
		heap_end = &end;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <_sbrk+0x50>)
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <_sbrk+0x54>)
 8001824:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <_sbrk+0x50>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <_sbrk+0x50>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	466a      	mov	r2, sp
 8001836:	4293      	cmp	r3, r2
 8001838:	d907      	bls.n	800184a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800183a:	f005 ff2f 	bl	800769c <__errno>
 800183e:	4602      	mov	r2, r0
 8001840:	230c      	movs	r3, #12
 8001842:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001844:	f04f 33ff 	mov.w	r3, #4294967295
 8001848:	e006      	b.n	8001858 <_sbrk+0x48>
	}

	heap_end += incr;
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <_sbrk+0x50>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a03      	ldr	r2, [pc, #12]	; (8001860 <_sbrk+0x50>)
 8001854:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000268 	.word	0x24000268
 8001864:	240138c8 	.word	0x240138c8

08001868 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <MX_TIM2_Init+0x98>)
 8001888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800188c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <MX_TIM2_Init+0x98>)
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <MX_TIM2_Init+0x98>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <MX_TIM2_Init+0x98>)
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <MX_TIM2_Init+0x98>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_TIM2_Init+0x98>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ae:	4814      	ldr	r0, [pc, #80]	; (8001900 <MX_TIM2_Init+0x98>)
 80018b0:	f003 fa0a 	bl	8004cc8 <HAL_TIM_Base_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018ba:	f7ff ff4f 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4619      	mov	r1, r3
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <MX_TIM2_Init+0x98>)
 80018cc:	f003 fa82 	bl	8004dd4 <HAL_TIM_ConfigClockSource>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018d6:	f7ff ff41 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_TIM2_Init+0x98>)
 80018e8:	f003 fc7c 	bl	80051e4 <HAL_TIMEx_MasterConfigSynchronization>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018f2:	f7ff ff33 	bl	800175c <Error_Handler>
  }

}
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	240137e4 	.word	0x240137e4

08001904 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001914:	d10e      	bne.n	8001934 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_TIM_Base_MspInit+0x3c>)
 8001918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800191c:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_TIM_Base_MspInit+0x3c>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_TIM_Base_MspInit+0x3c>)
 8001928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	58024400 	.word	0x58024400

08001944 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 800194a:	4a23      	ldr	r2, [pc, #140]	; (80019d8 <MX_USART3_UART_Init+0x94>)
 800194c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 8001950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 8001988:	2200      	movs	r2, #0
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800198c:	4811      	ldr	r0, [pc, #68]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 800198e:	f003 fcb1 	bl	80052f4 <HAL_UART_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001998:	f7ff fee0 	bl	800175c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800199c:	2100      	movs	r1, #0
 800199e:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 80019a0:	f005 fa6d 	bl	8006e7e <HAL_UARTEx_SetTxFifoThreshold>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019aa:	f7ff fed7 	bl	800175c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ae:	2100      	movs	r1, #0
 80019b0:	4808      	ldr	r0, [pc, #32]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 80019b2:	f005 faa2 	bl	8006efa <HAL_UARTEx_SetRxFifoThreshold>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019bc:	f7ff fece 	bl	800175c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_USART3_UART_Init+0x90>)
 80019c2:	f005 fa23 	bl	8006e0c <HAL_UARTEx_DisableFifoMode>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019cc:	f7ff fec6 	bl	800175c <Error_Handler>
  }

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	24013830 	.word	0x24013830
 80019d8:	40004800 	.word	0x40004800

080019dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <HAL_UART_MspInit+0x98>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d136      	bne.n	8001a6c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a04:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4809      	ldr	r0, [pc, #36]	; (8001a7c <HAL_UART_MspInit+0xa0>)
 8001a58:	f000 fc50 	bl	80022fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2027      	movs	r0, #39	; 0x27
 8001a62:	f000 f9d2 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a66:	2027      	movs	r0, #39	; 0x27
 8001a68:	f000 f9e9 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40004800 	.word	0x40004800
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	58020c00 	.word	0x58020c00

08001a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a86:	e003      	b.n	8001a90 <LoopCopyDataInit>

08001a88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a8e:	3104      	adds	r1, #4

08001a90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a90:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a98:	d3f6      	bcc.n	8001a88 <CopyDataInit>
  ldr  r2, =_sbss
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a9c:	e002      	b.n	8001aa4 <LoopFillZerobss>

08001a9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aa0:	f842 3b04 	str.w	r3, [r2], #4

08001aa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001aa8:	d3f9      	bcc.n	8001a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aaa:	f7fe fdf1 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aae:	f005 fdfb 	bl	80076a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab2:	f7ff f9eb 	bl	8000e8c <main>
  bx  lr    
 8001ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001abc:	0800b3f8 	.word	0x0800b3f8
  ldr  r0, =_sdata
 8001ac0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001ac4:	240001e0 	.word	0x240001e0
  ldr  r2, =_sbss
 8001ac8:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 8001acc:	240138c4 	.word	0x240138c4

08001ad0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC3_IRQHandler>
	...

08001ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ada:	2003      	movs	r0, #3
 8001adc:	f000 f98a 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ae0:	f001 fc24 	bl	800332c <HAL_RCC_GetSysClockFreq>
 8001ae4:	4601      	mov	r1, r0
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_Init+0x68>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <HAL_Init+0x6c>)
 8001af2:	5cd3      	ldrb	r3, [r2, r3]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa21 f303 	lsr.w	r3, r1, r3
 8001afc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_Init+0x68>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_Init+0x6c>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_Init+0x70>)
 8001b16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_Init+0x74>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f000 f814 	bl	8001b4c <HAL_InitTick>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e002      	b.n	8001b34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2e:	f7ff fe1d 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	0800b0d8 	.word	0x0800b0d8
 8001b44:	24000004 	.word	0x24000004
 8001b48:	24000000 	.word	0x24000000

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_InitTick+0x60>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e021      	b.n	8001ba4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_InitTick+0x64>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_InitTick+0x60>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f96f 	bl	8001e5a <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f939 	bl	8001e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x68>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2400000c 	.word	0x2400000c
 8001bb0:	24000000 	.word	0x24000000
 8001bb4:	24000008 	.word	0x24000008

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2400000c 	.word	0x2400000c
 8001bdc:	240138bc 	.word	0x240138bc

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	240138bc 	.word	0x240138bc

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_Delay+0x40>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2400000c 	.word	0x2400000c

08001c3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetREVID+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0c1b      	lsrs	r3, r3, #16
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	5c001000 	.word	0x5c001000

08001c54 <__NVIC_SetPriorityGrouping>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <__NVIC_SetPriorityGrouping+0x40>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x40>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00
 8001c98:	05fa0000 	.word	0x05fa0000

08001c9c <__NVIC_GetPriorityGrouping>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <__NVIC_EnableIRQ+0x38>)
 8001cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff8e 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff29 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff40 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff90 	bl	8001d48 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5f 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff33 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa4 	bl	8001db0 <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e205      	b.n	8002292 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d004      	beq.n	8001e9c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e1fa      	b.n	8002292 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a8c      	ldr	r2, [pc, #560]	; (80020d4 <HAL_DMA_Abort_IT+0x260>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d04a      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a8b      	ldr	r2, [pc, #556]	; (80020d8 <HAL_DMA_Abort_IT+0x264>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d045      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a89      	ldr	r2, [pc, #548]	; (80020dc <HAL_DMA_Abort_IT+0x268>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d040      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a88      	ldr	r2, [pc, #544]	; (80020e0 <HAL_DMA_Abort_IT+0x26c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d03b      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a86      	ldr	r2, [pc, #536]	; (80020e4 <HAL_DMA_Abort_IT+0x270>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d036      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a85      	ldr	r2, [pc, #532]	; (80020e8 <HAL_DMA_Abort_IT+0x274>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d031      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a83      	ldr	r2, [pc, #524]	; (80020ec <HAL_DMA_Abort_IT+0x278>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d02c      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a82      	ldr	r2, [pc, #520]	; (80020f0 <HAL_DMA_Abort_IT+0x27c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d027      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a80      	ldr	r2, [pc, #512]	; (80020f4 <HAL_DMA_Abort_IT+0x280>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d022      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7f      	ldr	r2, [pc, #508]	; (80020f8 <HAL_DMA_Abort_IT+0x284>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d01d      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a7d      	ldr	r2, [pc, #500]	; (80020fc <HAL_DMA_Abort_IT+0x288>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d018      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a7c      	ldr	r2, [pc, #496]	; (8002100 <HAL_DMA_Abort_IT+0x28c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d013      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a7a      	ldr	r2, [pc, #488]	; (8002104 <HAL_DMA_Abort_IT+0x290>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00e      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a79      	ldr	r2, [pc, #484]	; (8002108 <HAL_DMA_Abort_IT+0x294>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a77      	ldr	r2, [pc, #476]	; (800210c <HAL_DMA_Abort_IT+0x298>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d004      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a76      	ldr	r2, [pc, #472]	; (8002110 <HAL_DMA_Abort_IT+0x29c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_DMA_Abort_IT+0xcc>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_DMA_Abort_IT+0xce>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d065      	beq.n	8002012 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a60      	ldr	r2, [pc, #384]	; (80020d4 <HAL_DMA_Abort_IT+0x260>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d04a      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a5e      	ldr	r2, [pc, #376]	; (80020d8 <HAL_DMA_Abort_IT+0x264>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d045      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a5d      	ldr	r2, [pc, #372]	; (80020dc <HAL_DMA_Abort_IT+0x268>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d040      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a5b      	ldr	r2, [pc, #364]	; (80020e0 <HAL_DMA_Abort_IT+0x26c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d03b      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a5a      	ldr	r2, [pc, #360]	; (80020e4 <HAL_DMA_Abort_IT+0x270>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d036      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <HAL_DMA_Abort_IT+0x274>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d031      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a57      	ldr	r2, [pc, #348]	; (80020ec <HAL_DMA_Abort_IT+0x278>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d02c      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a55      	ldr	r2, [pc, #340]	; (80020f0 <HAL_DMA_Abort_IT+0x27c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d027      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_DMA_Abort_IT+0x280>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a52      	ldr	r2, [pc, #328]	; (80020f8 <HAL_DMA_Abort_IT+0x284>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01d      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a51      	ldr	r2, [pc, #324]	; (80020fc <HAL_DMA_Abort_IT+0x288>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d018      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_DMA_Abort_IT+0x28c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_DMA_Abort_IT+0x290>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a4c      	ldr	r2, [pc, #304]	; (8002108 <HAL_DMA_Abort_IT+0x294>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a4b      	ldr	r2, [pc, #300]	; (800210c <HAL_DMA_Abort_IT+0x298>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Abort_IT+0x17a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a49      	ldr	r2, [pc, #292]	; (8002110 <HAL_DMA_Abort_IT+0x29c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <HAL_DMA_Abort_IT+0x18c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e147      	b.n	8002290 <HAL_DMA_Abort_IT+0x41c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e13e      	b.n	8002290 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 020e 	bic.w	r2, r2, #14
 8002020:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <HAL_DMA_Abort_IT+0x260>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d04a      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <HAL_DMA_Abort_IT+0x264>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d045      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a28      	ldr	r2, [pc, #160]	; (80020dc <HAL_DMA_Abort_IT+0x268>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d040      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a26      	ldr	r2, [pc, #152]	; (80020e0 <HAL_DMA_Abort_IT+0x26c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d03b      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a25      	ldr	r2, [pc, #148]	; (80020e4 <HAL_DMA_Abort_IT+0x270>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d036      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <HAL_DMA_Abort_IT+0x274>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d031      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a22      	ldr	r2, [pc, #136]	; (80020ec <HAL_DMA_Abort_IT+0x278>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d02c      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <HAL_DMA_Abort_IT+0x27c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d027      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <HAL_DMA_Abort_IT+0x280>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d022      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <HAL_DMA_Abort_IT+0x284>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01d      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1c      	ldr	r2, [pc, #112]	; (80020fc <HAL_DMA_Abort_IT+0x288>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d018      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <HAL_DMA_Abort_IT+0x28c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_DMA_Abort_IT+0x290>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00e      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_DMA_Abort_IT+0x294>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_DMA_Abort_IT+0x298>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d004      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x24e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <HAL_DMA_Abort_IT+0x29c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d128      	bne.n	8002114 <HAL_DMA_Abort_IT+0x2a0>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e027      	b.n	8002124 <HAL_DMA_Abort_IT+0x2b0>
 80020d4:	40020010 	.word	0x40020010
 80020d8:	40020028 	.word	0x40020028
 80020dc:	40020040 	.word	0x40020040
 80020e0:	40020058 	.word	0x40020058
 80020e4:	40020070 	.word	0x40020070
 80020e8:	40020088 	.word	0x40020088
 80020ec:	400200a0 	.word	0x400200a0
 80020f0:	400200b8 	.word	0x400200b8
 80020f4:	40020410 	.word	0x40020410
 80020f8:	40020428 	.word	0x40020428
 80020fc:	40020440 	.word	0x40020440
 8002100:	40020458 	.word	0x40020458
 8002104:	40020470 	.word	0x40020470
 8002108:	40020488 	.word	0x40020488
 800210c:	400204a0 	.word	0x400204a0
 8002110:	400204b8 	.word	0x400204b8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a5c      	ldr	r2, [pc, #368]	; (800229c <HAL_DMA_Abort_IT+0x428>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d072      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a5b      	ldr	r2, [pc, #364]	; (80022a0 <HAL_DMA_Abort_IT+0x42c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d06d      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a59      	ldr	r2, [pc, #356]	; (80022a4 <HAL_DMA_Abort_IT+0x430>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d068      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_DMA_Abort_IT+0x434>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d063      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a56      	ldr	r2, [pc, #344]	; (80022ac <HAL_DMA_Abort_IT+0x438>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d05e      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a55      	ldr	r2, [pc, #340]	; (80022b0 <HAL_DMA_Abort_IT+0x43c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d059      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a53      	ldr	r2, [pc, #332]	; (80022b4 <HAL_DMA_Abort_IT+0x440>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d054      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <HAL_DMA_Abort_IT+0x444>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d04f      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a50      	ldr	r2, [pc, #320]	; (80022bc <HAL_DMA_Abort_IT+0x448>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d04a      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a4f      	ldr	r2, [pc, #316]	; (80022c0 <HAL_DMA_Abort_IT+0x44c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d045      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4d      	ldr	r2, [pc, #308]	; (80022c4 <HAL_DMA_Abort_IT+0x450>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d040      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_DMA_Abort_IT+0x454>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d03b      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_DMA_Abort_IT+0x458>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d036      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a49      	ldr	r2, [pc, #292]	; (80022d0 <HAL_DMA_Abort_IT+0x45c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d031      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a47      	ldr	r2, [pc, #284]	; (80022d4 <HAL_DMA_Abort_IT+0x460>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d02c      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a46      	ldr	r2, [pc, #280]	; (80022d8 <HAL_DMA_Abort_IT+0x464>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d027      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a44      	ldr	r2, [pc, #272]	; (80022dc <HAL_DMA_Abort_IT+0x468>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d022      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a43      	ldr	r2, [pc, #268]	; (80022e0 <HAL_DMA_Abort_IT+0x46c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d01d      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a41      	ldr	r2, [pc, #260]	; (80022e4 <HAL_DMA_Abort_IT+0x470>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d018      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a40      	ldr	r2, [pc, #256]	; (80022e8 <HAL_DMA_Abort_IT+0x474>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d013      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a3e      	ldr	r2, [pc, #248]	; (80022ec <HAL_DMA_Abort_IT+0x478>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00e      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a3d      	ldr	r2, [pc, #244]	; (80022f0 <HAL_DMA_Abort_IT+0x47c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <HAL_DMA_Abort_IT+0x480>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d004      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3a0>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a3a      	ldr	r2, [pc, #232]	; (80022f8 <HAL_DMA_Abort_IT+0x484>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_DMA_Abort_IT+0x3a4>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_DMA_Abort_IT+0x3a6>
 8002218:	2300      	movs	r3, #0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d028      	beq.n	8002270 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800222c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2201      	movs	r2, #1
 800223e:	409a      	lsls	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800224c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00c      	beq.n	8002270 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002264:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800226e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40020010 	.word	0x40020010
 80022a0:	40020028 	.word	0x40020028
 80022a4:	40020040 	.word	0x40020040
 80022a8:	40020058 	.word	0x40020058
 80022ac:	40020070 	.word	0x40020070
 80022b0:	40020088 	.word	0x40020088
 80022b4:	400200a0 	.word	0x400200a0
 80022b8:	400200b8 	.word	0x400200b8
 80022bc:	40020410 	.word	0x40020410
 80022c0:	40020428 	.word	0x40020428
 80022c4:	40020440 	.word	0x40020440
 80022c8:	40020458 	.word	0x40020458
 80022cc:	40020470 	.word	0x40020470
 80022d0:	40020488 	.word	0x40020488
 80022d4:	400204a0 	.word	0x400204a0
 80022d8:	400204b8 	.word	0x400204b8
 80022dc:	58025408 	.word	0x58025408
 80022e0:	5802541c 	.word	0x5802541c
 80022e4:	58025430 	.word	0x58025430
 80022e8:	58025444 	.word	0x58025444
 80022ec:	58025458 	.word	0x58025458
 80022f0:	5802546c 	.word	0x5802546c
 80022f4:	58025480 	.word	0x58025480
 80022f8:	58025494 	.word	0x58025494

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800230a:	4b89      	ldr	r3, [pc, #548]	; (8002530 <HAL_GPIO_Init+0x234>)
 800230c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800230e:	e194      	b.n	800263a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8186 	beq.w	8002634 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d00b      	beq.n	8002348 <HAL_GPIO_Init+0x4c>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d007      	beq.n	8002348 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233c:	2b11      	cmp	r3, #17
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b12      	cmp	r3, #18
 8002346:	d130      	bne.n	80023aa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800237e:	2201      	movs	r2, #1
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 0201 	and.w	r2, r3, #1
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0xee>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b12      	cmp	r3, #18
 80023e8:	d123      	bne.n	8002432 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	220f      	movs	r2, #15
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	08da      	lsrs	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3208      	adds	r2, #8
 800242c:	69b9      	ldr	r1, [r7, #24]
 800242e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0203 	and.w	r2, r3, #3
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80e0 	beq.w	8002634 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <HAL_GPIO_Init+0x238>)
 8002476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800247a:	4a2e      	ldr	r2, [pc, #184]	; (8002534 <HAL_GPIO_Init+0x238>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_GPIO_Init+0x238>)
 8002486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002492:	4a29      	ldr	r2, [pc, #164]	; (8002538 <HAL_GPIO_Init+0x23c>)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a20      	ldr	r2, [pc, #128]	; (800253c <HAL_GPIO_Init+0x240>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d052      	beq.n	8002564 <HAL_GPIO_Init+0x268>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1f      	ldr	r2, [pc, #124]	; (8002540 <HAL_GPIO_Init+0x244>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d031      	beq.n	800252a <HAL_GPIO_Init+0x22e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1e      	ldr	r2, [pc, #120]	; (8002544 <HAL_GPIO_Init+0x248>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d02b      	beq.n	8002526 <HAL_GPIO_Init+0x22a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_GPIO_Init+0x24c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d025      	beq.n	8002522 <HAL_GPIO_Init+0x226>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_GPIO_Init+0x250>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01f      	beq.n	800251e <HAL_GPIO_Init+0x222>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a1b      	ldr	r2, [pc, #108]	; (8002550 <HAL_GPIO_Init+0x254>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d019      	beq.n	800251a <HAL_GPIO_Init+0x21e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1a      	ldr	r2, [pc, #104]	; (8002554 <HAL_GPIO_Init+0x258>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_GPIO_Init+0x21a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a19      	ldr	r2, [pc, #100]	; (8002558 <HAL_GPIO_Init+0x25c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00d      	beq.n	8002512 <HAL_GPIO_Init+0x216>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a18      	ldr	r2, [pc, #96]	; (800255c <HAL_GPIO_Init+0x260>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <HAL_GPIO_Init+0x212>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a17      	ldr	r2, [pc, #92]	; (8002560 <HAL_GPIO_Init+0x264>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_GPIO_Init+0x20e>
 8002506:	2309      	movs	r3, #9
 8002508:	e02d      	b.n	8002566 <HAL_GPIO_Init+0x26a>
 800250a:	230a      	movs	r3, #10
 800250c:	e02b      	b.n	8002566 <HAL_GPIO_Init+0x26a>
 800250e:	2308      	movs	r3, #8
 8002510:	e029      	b.n	8002566 <HAL_GPIO_Init+0x26a>
 8002512:	2307      	movs	r3, #7
 8002514:	e027      	b.n	8002566 <HAL_GPIO_Init+0x26a>
 8002516:	2306      	movs	r3, #6
 8002518:	e025      	b.n	8002566 <HAL_GPIO_Init+0x26a>
 800251a:	2305      	movs	r3, #5
 800251c:	e023      	b.n	8002566 <HAL_GPIO_Init+0x26a>
 800251e:	2304      	movs	r3, #4
 8002520:	e021      	b.n	8002566 <HAL_GPIO_Init+0x26a>
 8002522:	2303      	movs	r3, #3
 8002524:	e01f      	b.n	8002566 <HAL_GPIO_Init+0x26a>
 8002526:	2302      	movs	r3, #2
 8002528:	e01d      	b.n	8002566 <HAL_GPIO_Init+0x26a>
 800252a:	2301      	movs	r3, #1
 800252c:	e01b      	b.n	8002566 <HAL_GPIO_Init+0x26a>
 800252e:	bf00      	nop
 8002530:	58000080 	.word	0x58000080
 8002534:	58024400 	.word	0x58024400
 8002538:	58000400 	.word	0x58000400
 800253c:	58020000 	.word	0x58020000
 8002540:	58020400 	.word	0x58020400
 8002544:	58020800 	.word	0x58020800
 8002548:	58020c00 	.word	0x58020c00
 800254c:	58021000 	.word	0x58021000
 8002550:	58021400 	.word	0x58021400
 8002554:	58021800 	.word	0x58021800
 8002558:	58021c00 	.word	0x58021c00
 800255c:	58022000 	.word	0x58022000
 8002560:	58022400 	.word	0x58022400
 8002564:	2300      	movs	r3, #0
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	f002 0203 	and.w	r2, r2, #3
 800256c:	0092      	lsls	r2, r2, #2
 800256e:	4093      	lsls	r3, r2
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002576:	4938      	ldr	r1, [pc, #224]	; (8002658 <HAL_GPIO_Init+0x35c>)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800262c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	3301      	adds	r3, #1
 8002638:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f ae63 	bne.w	8002310 <HAL_GPIO_Init+0x14>
  }
}
 800264a:	bf00      	nop
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	58000400 	.word	0x58000400

0800265c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	807b      	strh	r3, [r7, #2]
 8002668:	4613      	mov	r3, r2
 800266a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800266c:	787b      	ldrb	r3, [r7, #1]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002678:	e003      	b.n	8002682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800267a:	887b      	ldrh	r3, [r7, #2]
 800267c:	041a      	lsls	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	619a      	str	r2, [r3, #24]
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002698:	4a08      	ldr	r2, [pc, #32]	; (80026bc <HAL_HSEM_FastTake+0x2c>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3320      	adds	r3, #32
 800269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <HAL_HSEM_FastTake+0x30>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	58026400 	.word	0x58026400
 80026c0:	80000300 	.word	0x80000300

080026c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80026ce:	4906      	ldr	r1, [pc, #24]	; (80026e8 <HAL_HSEM_Release+0x24>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	58026400 	.word	0x58026400

080026ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80026f4:	4b29      	ldr	r3, [pc, #164]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d00a      	beq.n	8002716 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e040      	b.n	8002794 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e03e      	b.n	8002794 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800271e:	491f      	ldr	r1, [pc, #124]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4313      	orrs	r3, r2
 8002724:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002726:	f7ff fa5b 	bl	8001be0 <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800272c:	e009      	b.n	8002742 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800272e:	f7ff fa57 	bl	8001be0 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800273c:	d901      	bls.n	8002742 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e028      	b.n	8002794 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800274e:	d1ee      	bne.n	800272e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b1e      	cmp	r3, #30
 8002754:	d008      	beq.n	8002768 <HAL_PWREx_ConfigSupply+0x7c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b2e      	cmp	r3, #46	; 0x2e
 800275a:	d005      	beq.n	8002768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b1d      	cmp	r3, #29
 8002760:	d002      	beq.n	8002768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b2d      	cmp	r3, #45	; 0x2d
 8002766:	d114      	bne.n	8002792 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002768:	f7ff fa3a 	bl	8001be0 <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800276e:	e009      	b.n	8002784 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002770:	f7ff fa36 	bl	8001be0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800277e:	d901      	bls.n	8002784 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e007      	b.n	8002794 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d1ee      	bne.n	8002770 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	58024800 	.word	0x58024800

080027a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	; 0x30
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e3ff      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8087 	beq.w	80028ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c0:	4b99      	ldr	r3, [pc, #612]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ca:	4b97      	ldr	r3, [pc, #604]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d007      	beq.n	80027e6 <HAL_RCC_OscConfig+0x46>
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	2b18      	cmp	r3, #24
 80027da:	d110      	bne.n	80027fe <HAL_RCC_OscConfig+0x5e>
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d10b      	bne.n	80027fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e6:	4b90      	ldr	r3, [pc, #576]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d06c      	beq.n	80028cc <HAL_RCC_OscConfig+0x12c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d168      	bne.n	80028cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e3d9      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x76>
 8002808:	4b87      	ldr	r3, [pc, #540]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a86      	ldr	r2, [pc, #536]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 800280e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	e02e      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x98>
 800281e:	4b82      	ldr	r3, [pc, #520]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a81      	ldr	r2, [pc, #516]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7e      	ldr	r2, [pc, #504]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e01d      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0xbc>
 8002842:	4b79      	ldr	r3, [pc, #484]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a78      	ldr	r2, [pc, #480]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b76      	ldr	r3, [pc, #472]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a75      	ldr	r2, [pc, #468]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 800285c:	4b72      	ldr	r3, [pc, #456]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a71      	ldr	r2, [pc, #452]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6e      	ldr	r2, [pc, #440]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 800286e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7ff f9b0 	bl	8001be0 <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff f9ac 	bl	8001be0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e38d      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002896:	4b64      	ldr	r3, [pc, #400]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0xe4>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7ff f99c 	bl	8001be0 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff f998 	bl	8001be0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e379      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028be:	4b5a      	ldr	r3, [pc, #360]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x10c>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80ae 	beq.w	8002a38 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028dc:	4b52      	ldr	r3, [pc, #328]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028e6:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <HAL_RCC_OscConfig+0x162>
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	2b18      	cmp	r3, #24
 80028f6:	d13a      	bne.n	800296e <HAL_RCC_OscConfig+0x1ce>
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d135      	bne.n	800296e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002902:	4b49      	ldr	r3, [pc, #292]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_RCC_OscConfig+0x17a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e34b      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	f7ff f98f 	bl	8001c3c <HAL_GetREVID>
 800291e:	4602      	mov	r2, r0
 8002920:	f241 0303 	movw	r3, #4099	; 0x1003
 8002924:	429a      	cmp	r2, r3
 8002926:	d817      	bhi.n	8002958 <HAL_RCC_OscConfig+0x1b8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d108      	bne.n	8002942 <HAL_RCC_OscConfig+0x1a2>
 8002930:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002938:	4a3b      	ldr	r2, [pc, #236]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 800293a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002940:	e07a      	b.n	8002a38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002942:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	031b      	lsls	r3, r3, #12
 8002950:	4935      	ldr	r1, [pc, #212]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002956:	e06f      	b.n	8002a38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	4930      	ldr	r1, [pc, #192]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800296c:	e064      	b.n	8002a38 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d045      	beq.n	8002a02 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 0219 	bic.w	r2, r3, #25
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4929      	ldr	r1, [pc, #164]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7ff f92a 	bl	8001be0 <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002990:	f7ff f926 	bl	8001be0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e307      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	f7ff f945 	bl	8001c3c <HAL_GetREVID>
 80029b2:	4602      	mov	r2, r0
 80029b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d817      	bhi.n	80029ec <HAL_RCC_OscConfig+0x24c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d108      	bne.n	80029d6 <HAL_RCC_OscConfig+0x236>
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029cc:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80029ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d2:	6053      	str	r3, [r2, #4]
 80029d4:	e030      	b.n	8002a38 <HAL_RCC_OscConfig+0x298>
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	031b      	lsls	r3, r3, #12
 80029e4:	4910      	ldr	r1, [pc, #64]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
 80029ea:	e025      	b.n	8002a38 <HAL_RCC_OscConfig+0x298>
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	490b      	ldr	r1, [pc, #44]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
 8002a00:	e01a      	b.n	8002a38 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <HAL_RCC_OscConfig+0x288>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7ff f8e7 	bl	8001be0 <HAL_GetTick>
 8002a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a16:	f7ff f8e3 	bl	8001be0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d903      	bls.n	8002a2c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e2c4      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
 8002a28:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a2c:	4ba4      	ldr	r3, [pc, #656]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ee      	bne.n	8002a16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80a9 	beq.w	8002b98 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a46:	4b9e      	ldr	r3, [pc, #632]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a50:	4b9b      	ldr	r3, [pc, #620]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d007      	beq.n	8002a6c <HAL_RCC_OscConfig+0x2cc>
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b18      	cmp	r3, #24
 8002a60:	d13a      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x338>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d135      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a6c:	4b94      	ldr	r3, [pc, #592]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_OscConfig+0x2e4>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b80      	cmp	r3, #128	; 0x80
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e296      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a84:	f7ff f8da 	bl	8001c3c <HAL_GetREVID>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d817      	bhi.n	8002ac2 <HAL_RCC_OscConfig+0x322>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d108      	bne.n	8002aac <HAL_RCC_OscConfig+0x30c>
 8002a9a:	4b89      	ldr	r3, [pc, #548]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002aa2:	4a87      	ldr	r2, [pc, #540]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002aa8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aaa:	e075      	b.n	8002b98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aac:	4b84      	ldr	r3, [pc, #528]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	069b      	lsls	r3, r3, #26
 8002aba:	4981      	ldr	r1, [pc, #516]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ac0:	e06a      	b.n	8002b98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	061b      	lsls	r3, r3, #24
 8002ad0:	497b      	ldr	r1, [pc, #492]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ad6:	e05f      	b.n	8002b98 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d042      	beq.n	8002b66 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ae0:	4b77      	ldr	r3, [pc, #476]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a76      	ldr	r2, [pc, #472]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7ff f878 	bl	8001be0 <HAL_GetTick>
 8002af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002af4:	f7ff f874 	bl	8001be0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e255      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b06:	4b6e      	ldr	r3, [pc, #440]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b12:	f7ff f893 	bl	8001c3c <HAL_GetREVID>
 8002b16:	4602      	mov	r2, r0
 8002b18:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d817      	bhi.n	8002b50 <HAL_RCC_OscConfig+0x3b0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d108      	bne.n	8002b3a <HAL_RCC_OscConfig+0x39a>
 8002b28:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b30:	4a63      	ldr	r2, [pc, #396]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002b32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b36:	6053      	str	r3, [r2, #4]
 8002b38:	e02e      	b.n	8002b98 <HAL_RCC_OscConfig+0x3f8>
 8002b3a:	4b61      	ldr	r3, [pc, #388]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	495d      	ldr	r1, [pc, #372]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
 8002b4e:	e023      	b.n	8002b98 <HAL_RCC_OscConfig+0x3f8>
 8002b50:	4b5b      	ldr	r3, [pc, #364]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	4958      	ldr	r1, [pc, #352]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60cb      	str	r3, [r1, #12]
 8002b64:	e018      	b.n	8002b98 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b66:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a55      	ldr	r2, [pc, #340]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7ff f835 	bl	8001be0 <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b7a:	f7ff f831 	bl	8001be0 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e212      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b8c:	4b4c      	ldr	r3, [pc, #304]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d036      	beq.n	8002c12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d019      	beq.n	8002be0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb0:	4a43      	ldr	r2, [pc, #268]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7ff f812 	bl	8001be0 <HAL_GetTick>
 8002bbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7ff f80e 	bl	8001be0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1ef      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x420>
 8002bde:	e018      	b.n	8002c12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be0:	4b37      	ldr	r3, [pc, #220]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be4:	4a36      	ldr	r2, [pc, #216]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fe fff8 	bl	8001be0 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7fe fff4 	bl	8001be0 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1d5      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c06:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d036      	beq.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d019      	beq.n	8002c5a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c26:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a25      	ldr	r2, [pc, #148]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c32:	f7fe ffd5 	bl	8001be0 <HAL_GetTick>
 8002c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c3a:	f7fe ffd1 	bl	8001be0 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e1b2      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x49a>
 8002c58:	e018      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c66:	f7fe ffbb 	bl	8001be0 <HAL_GetTick>
 8002c6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c6e:	f7fe ffb7 	bl	8001be0 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e198      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <HAL_RCC_OscConfig+0x520>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8085 	beq.w	8002da4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_RCC_OscConfig+0x524>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_OscConfig+0x524>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ca6:	f7fe ff9b 	bl	8001be0 <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cac:	e00c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fe ff97 	bl	8001be0 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d905      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e178      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
 8002cc0:	58024400 	.word	0x58024400
 8002cc4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cc8:	4b96      	ldr	r3, [pc, #600]	; (8002f24 <HAL_RCC_OscConfig+0x784>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ec      	beq.n	8002cae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x54a>
 8002cdc:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4a91      	ldr	r2, [pc, #580]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_OscConfig+0x5a6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x56c>
 8002cf2:	4b8d      	ldr	r3, [pc, #564]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a8c      	ldr	r2, [pc, #560]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	4b8a      	ldr	r3, [pc, #552]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a89      	ldr	r2, [pc, #548]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x5a6>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x58e>
 8002d14:	4b84      	ldr	r3, [pc, #528]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a83      	ldr	r2, [pc, #524]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	4b81      	ldr	r3, [pc, #516]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a80      	ldr	r2, [pc, #512]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x5a6>
 8002d2e:	4b7e      	ldr	r3, [pc, #504]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a7d      	ldr	r2, [pc, #500]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	4b7b      	ldr	r3, [pc, #492]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a7a      	ldr	r2, [pc, #488]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe ff47 	bl	8001be0 <HAL_GetTick>
 8002d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe ff43 	bl	8001be0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e122      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d6c:	4b6e      	ldr	r3, [pc, #440]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x5b6>
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7fe ff31 	bl	8001be0 <HAL_GetTick>
 8002d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe ff2d 	bl	8001be0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e10c      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d98:	4b63      	ldr	r3, [pc, #396]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8101 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002dae:	4b5e      	ldr	r3, [pc, #376]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002db6:	2b18      	cmp	r3, #24
 8002db8:	f000 80bc 	beq.w	8002f34 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	f040 8095 	bne.w	8002ef0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a57      	ldr	r2, [pc, #348]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fe ff05 	bl	8001be0 <HAL_GetTick>
 8002dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fe ff01 	bl	8001be0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0e2      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dec:	4b4e      	ldr	r3, [pc, #312]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dfc:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <HAL_RCC_OscConfig+0x78c>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	4946      	ldr	r1, [pc, #280]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	628b      	str	r3, [r1, #40]	; 0x28
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	3b01      	subs	r3, #1
 8002e18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	3b01      	subs	r3, #1
 8002e22:	025b      	lsls	r3, r3, #9
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e42:	4939      	ldr	r1, [pc, #228]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e48:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	4a36      	ldr	r2, [pc, #216]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e54:	4b34      	ldr	r3, [pc, #208]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e58:	4b35      	ldr	r3, [pc, #212]	; (8002f30 <HAL_RCC_OscConfig+0x790>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e60:	00d2      	lsls	r2, r2, #3
 8002e62:	4931      	ldr	r1, [pc, #196]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e68:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	f023 020c 	bic.w	r2, r3, #12
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	492c      	ldr	r1, [pc, #176]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	f023 0202 	bic.w	r2, r3, #2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	4928      	ldr	r1, [pc, #160]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	4a22      	ldr	r2, [pc, #136]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ea4:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fe8a 	bl	8001be0 <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe fe86 	bl	8001be0 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e067      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x730>
 8002eee:	e05f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fe70 	bl	8001be0 <HAL_GetTick>
 8002f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe fe6c 	bl	8001be0 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e04d      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <HAL_RCC_OscConfig+0x788>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x764>
 8002f22:	e045      	b.n	8002fb0 <HAL_RCC_OscConfig+0x810>
 8002f24:	58024800 	.word	0x58024800
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	fffffc0c 	.word	0xfffffc0c
 8002f30:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_RCC_OscConfig+0x81c>)
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCC_OscConfig+0x81c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d031      	beq.n	8002fac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f003 0203 	and.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d12a      	bne.n	8002fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d122      	bne.n	8002fac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d11a      	bne.n	8002fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	0a5b      	lsrs	r3, r3, #9
 8002f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f82:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d111      	bne.n	8002fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	0c1b      	lsrs	r3, r3, #16
 8002f8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d108      	bne.n	8002fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	0e1b      	lsrs	r3, r3, #24
 8002f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3730      	adds	r7, #48	; 0x30
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	58024400 	.word	0x58024400

08002fc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e19c      	b.n	800330e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b8a      	ldr	r3, [pc, #552]	; (8003200 <HAL_RCC_ClockConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d910      	bls.n	8003004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b87      	ldr	r3, [pc, #540]	; (8003200 <HAL_RCC_ClockConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 020f 	bic.w	r2, r3, #15
 8002fea:	4985      	ldr	r1, [pc, #532]	; (8003200 <HAL_RCC_ClockConfig+0x240>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b83      	ldr	r3, [pc, #524]	; (8003200 <HAL_RCC_ClockConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e184      	b.n	800330e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d010      	beq.n	8003032 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	4b7b      	ldr	r3, [pc, #492]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800301c:	429a      	cmp	r2, r3
 800301e:	d908      	bls.n	8003032 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003020:	4b78      	ldr	r3, [pc, #480]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	4975      	ldr	r1, [pc, #468]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 800302e:	4313      	orrs	r3, r2
 8003030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	4b70      	ldr	r3, [pc, #448]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800304a:	429a      	cmp	r2, r3
 800304c:	d908      	bls.n	8003060 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800304e:	4b6d      	ldr	r3, [pc, #436]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	496a      	ldr	r1, [pc, #424]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 800305c:	4313      	orrs	r3, r2
 800305e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	d010      	beq.n	800308e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	4b64      	ldr	r3, [pc, #400]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003078:	429a      	cmp	r2, r3
 800307a:	d908      	bls.n	800308e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800307c:	4b61      	ldr	r3, [pc, #388]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	495e      	ldr	r1, [pc, #376]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 800308a:	4313      	orrs	r3, r2
 800308c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d010      	beq.n	80030bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	4b59      	ldr	r3, [pc, #356]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d908      	bls.n	80030bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030aa:	4b56      	ldr	r3, [pc, #344]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4953      	ldr	r1, [pc, #332]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4b4d      	ldr	r3, [pc, #308]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d908      	bls.n	80030ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d8:	4b4a      	ldr	r3, [pc, #296]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f023 020f 	bic.w	r2, r3, #15
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4947      	ldr	r1, [pc, #284]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d055      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030f6:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4940      	ldr	r1, [pc, #256]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003104:	4313      	orrs	r3, r2
 8003106:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d107      	bne.n	8003120 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003110:	4b3c      	ldr	r3, [pc, #240]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d121      	bne.n	8003160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0f6      	b.n	800330e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d107      	bne.n	8003138 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003128:	4b36      	ldr	r3, [pc, #216]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d115      	bne.n	8003160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0ea      	b.n	800330e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d107      	bne.n	8003150 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003140:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0de      	b.n	800330e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003150:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0d6      	b.n	800330e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003160:	4b28      	ldr	r3, [pc, #160]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f023 0207 	bic.w	r2, r3, #7
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4925      	ldr	r1, [pc, #148]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 800316e:	4313      	orrs	r3, r2
 8003170:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003172:	f7fe fd35 	bl	8001be0 <HAL_GetTick>
 8003176:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003178:	e00a      	b.n	8003190 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317a:	f7fe fd31 	bl	8001be0 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e0be      	b.n	800330e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003190:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	429a      	cmp	r2, r3
 80031a0:	d1eb      	bne.n	800317a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d010      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d208      	bcs.n	80031d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f023 020f 	bic.w	r2, r3, #15
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	490e      	ldr	r1, [pc, #56]	; (8003204 <HAL_RCC_ClockConfig+0x244>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_ClockConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d214      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_RCC_ClockConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 020f 	bic.w	r2, r3, #15
 80031e6:	4906      	ldr	r1, [pc, #24]	; (8003200 <HAL_RCC_ClockConfig+0x240>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <HAL_RCC_ClockConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e086      	b.n	800330e <HAL_RCC_ClockConfig+0x34e>
 8003200:	52002000 	.word	0x52002000
 8003204:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d010      	beq.n	8003236 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003220:	429a      	cmp	r2, r3
 8003222:	d208      	bcs.n	8003236 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003224:	4b3c      	ldr	r3, [pc, #240]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	4939      	ldr	r1, [pc, #228]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 8003232:	4313      	orrs	r3, r2
 8003234:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d010      	beq.n	8003264 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800324e:	429a      	cmp	r2, r3
 8003250:	d208      	bcs.n	8003264 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	492e      	ldr	r1, [pc, #184]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 8003260:	4313      	orrs	r3, r2
 8003262:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699a      	ldr	r2, [r3, #24]
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800327c:	429a      	cmp	r2, r3
 800327e:	d208      	bcs.n	8003292 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	4922      	ldr	r1, [pc, #136]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 800328e:	4313      	orrs	r3, r2
 8003290:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	d010      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d208      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032ae:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4917      	ldr	r1, [pc, #92]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032c0:	f000 f834 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80032c4:	4601      	mov	r1, r0
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	4a12      	ldr	r2, [pc, #72]	; (800331c <HAL_RCC_ClockConfig+0x35c>)
 80032d2:	5cd3      	ldrb	r3, [r2, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa21 f303 	lsr.w	r3, r1, r3
 80032dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HAL_RCC_ClockConfig+0x358>)
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	4a0d      	ldr	r2, [pc, #52]	; (800331c <HAL_RCC_ClockConfig+0x35c>)
 80032e8:	5cd3      	ldrb	r3, [r2, r3]
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <HAL_RCC_ClockConfig+0x360>)
 80032f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032f8:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x364>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_RCC_ClockConfig+0x368>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fc22 	bl	8001b4c <HAL_InitTick>
 8003308:	4603      	mov	r3, r0
 800330a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	58024400 	.word	0x58024400
 800331c:	0800b0d8 	.word	0x0800b0d8
 8003320:	24000004 	.word	0x24000004
 8003324:	24000000 	.word	0x24000000
 8003328:	24000008 	.word	0x24000008

0800332c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003332:	4baf      	ldr	r3, [pc, #700]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800333a:	2b18      	cmp	r3, #24
 800333c:	f200 814e 	bhi.w	80035dc <HAL_RCC_GetSysClockFreq+0x2b0>
 8003340:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003346:	bf00      	nop
 8003348:	080033ad 	.word	0x080033ad
 800334c:	080035dd 	.word	0x080035dd
 8003350:	080035dd 	.word	0x080035dd
 8003354:	080035dd 	.word	0x080035dd
 8003358:	080035dd 	.word	0x080035dd
 800335c:	080035dd 	.word	0x080035dd
 8003360:	080035dd 	.word	0x080035dd
 8003364:	080035dd 	.word	0x080035dd
 8003368:	080033d3 	.word	0x080033d3
 800336c:	080035dd 	.word	0x080035dd
 8003370:	080035dd 	.word	0x080035dd
 8003374:	080035dd 	.word	0x080035dd
 8003378:	080035dd 	.word	0x080035dd
 800337c:	080035dd 	.word	0x080035dd
 8003380:	080035dd 	.word	0x080035dd
 8003384:	080035dd 	.word	0x080035dd
 8003388:	080033d9 	.word	0x080033d9
 800338c:	080035dd 	.word	0x080035dd
 8003390:	080035dd 	.word	0x080035dd
 8003394:	080035dd 	.word	0x080035dd
 8003398:	080035dd 	.word	0x080035dd
 800339c:	080035dd 	.word	0x080035dd
 80033a0:	080035dd 	.word	0x080035dd
 80033a4:	080035dd 	.word	0x080035dd
 80033a8:	080033df 	.word	0x080033df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033ac:	4b90      	ldr	r3, [pc, #576]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d009      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033b8:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	08db      	lsrs	r3, r3, #3
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	4a8c      	ldr	r2, [pc, #560]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
 80033c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80033ca:	e10a      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033cc:	4b89      	ldr	r3, [pc, #548]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80033ce:	61bb      	str	r3, [r7, #24]
    break;
 80033d0:	e107      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80033d2:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80033d4:	61bb      	str	r3, [r7, #24]
    break;
 80033d6:	e104      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80033d8:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80033da:	61bb      	str	r3, [r7, #24]
    break;
 80033dc:	e101      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033de:	4b84      	ldr	r3, [pc, #528]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80033e8:	4b81      	ldr	r3, [pc, #516]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033f4:	4b7e      	ldr	r3, [pc, #504]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80033fe:	4b7c      	ldr	r3, [pc, #496]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	08db      	lsrs	r3, r3, #3
 8003404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003416:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80da 	beq.w	80035d6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d05a      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x1b2>
 8003428:	2b01      	cmp	r3, #1
 800342a:	d302      	bcc.n	8003432 <HAL_RCC_GetSysClockFreq+0x106>
 800342c:	2b02      	cmp	r3, #2
 800342e:	d078      	beq.n	8003522 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003430:	e099      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003432:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d02d      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800343e:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	08db      	lsrs	r3, r3, #3
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	4a6a      	ldr	r2, [pc, #424]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003468:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003478:	ed97 6a02 	vldr	s12, [r7, #8]
 800347c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003600 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800348c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003494:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003498:	e087      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	ee07 3a90 	vmov	s15, r3
 80034a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003604 <HAL_RCC_GetSysClockFreq+0x2d8>
 80034a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ac:	4b50      	ldr	r3, [pc, #320]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b4:	ee07 3a90 	vmov	s15, r3
 80034b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80034c0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003600 <HAL_RCC_GetSysClockFreq+0x2d4>
 80034c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034dc:	e065      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003608 <HAL_RCC_GetSysClockFreq+0x2dc>
 80034ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f0:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f8:	ee07 3a90 	vmov	s15, r3
 80034fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003500:	ed97 6a02 	vldr	s12, [r7, #8]
 8003504:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003600 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003520:	e043      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800360c <HAL_RCC_GetSysClockFreq+0x2e0>
 8003530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003534:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003544:	ed97 6a02 	vldr	s12, [r7, #8]
 8003548:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003600 <HAL_RCC_GetSysClockFreq+0x2d4>
 800354c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003560:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003564:	e021      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003570:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003608 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003588:	ed97 6a02 	vldr	s12, [r7, #8]
 800358c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003600 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800359c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035a8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	0a5b      	lsrs	r3, r3, #9
 80035b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035b4:	3301      	adds	r3, #1
 80035b6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80035c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ce:	ee17 3a90 	vmov	r3, s15
 80035d2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80035d4:	e005      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
    break;
 80035da:	e002      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80035de:	61bb      	str	r3, [r7, #24]
    break;
 80035e0:	bf00      	nop
  }

  return sysclockfreq;
 80035e2:	69bb      	ldr	r3, [r7, #24]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3724      	adds	r7, #36	; 0x24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	58024400 	.word	0x58024400
 80035f4:	03d09000 	.word	0x03d09000
 80035f8:	003d0900 	.word	0x003d0900
 80035fc:	02625a00 	.word	0x02625a00
 8003600:	46000000 	.word	0x46000000
 8003604:	4c742400 	.word	0x4c742400
 8003608:	4a742400 	.word	0x4a742400
 800360c:	4c189680 	.word	0x4c189680

08003610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003616:	f7ff fe89 	bl	800332c <HAL_RCC_GetSysClockFreq>
 800361a:	4601      	mov	r1, r0
 800361c:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_RCC_GetHCLKFreq+0x50>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <HAL_RCC_GetHCLKFreq+0x54>)
 8003628:	5cd3      	ldrb	r3, [r2, r3]
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	fa21 f303 	lsr.w	r3, r1, r3
 8003632:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <HAL_RCC_GetHCLKFreq+0x50>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_RCC_GetHCLKFreq+0x54>)
 800363e:	5cd3      	ldrb	r3, [r2, r3]
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a07      	ldr	r2, [pc, #28]	; (8003668 <HAL_RCC_GetHCLKFreq+0x58>)
 800364c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800364e:	4a07      	ldr	r2, [pc, #28]	; (800366c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_RCC_GetHCLKFreq+0x58>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	58024400 	.word	0x58024400
 8003664:	0800b0d8 	.word	0x0800b0d8
 8003668:	24000004 	.word	0x24000004
 800366c:	24000000 	.word	0x24000000

08003670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003674:	f7ff ffcc 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003678:	4601      	mov	r1, r0
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4a04      	ldr	r2, [pc, #16]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003686:	5cd3      	ldrb	r3, [r2, r3]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	58024400 	.word	0x58024400
 8003698:	0800b0d8 	.word	0x0800b0d8

0800369c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036a0:	f7ff ffb6 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 80036a4:	4601      	mov	r1, r0
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	58024400 	.word	0x58024400
 80036c4:	0800b0d8 	.word	0x0800b0d8

080036c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d0:	2300      	movs	r3, #0
 80036d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d4:	2300      	movs	r3, #0
 80036d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d03d      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ec:	d013      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80036ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f2:	d802      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80036f8:	e01f      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80036fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036fe:	d013      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003704:	d01c      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003706:	e018      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003708:	4baf      	ldr	r3, [pc, #700]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4aae      	ldr	r2, [pc, #696]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003714:	e015      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f001 f96f 	bl	8004a00 <RCCEx_PLL2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003726:	e00c      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3324      	adds	r3, #36	; 0x24
 800372c:	2102      	movs	r1, #2
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fa18 	bl	8004b64 <RCCEx_PLL3_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
      break;
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003748:	4b9f      	ldr	r3, [pc, #636]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800374a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003754:	499c      	ldr	r1, [pc, #624]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003756:	4313      	orrs	r3, r2
 8003758:	650b      	str	r3, [r1, #80]	; 0x50
 800375a:	e001      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03d      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	2b04      	cmp	r3, #4
 8003772:	d826      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	08003791 	.word	0x08003791
 8003780:	0800379f 	.word	0x0800379f
 8003784:	080037b1 	.word	0x080037b1
 8003788:	080037c9 	.word	0x080037c9
 800378c:	080037c9 	.word	0x080037c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003790:	4b8d      	ldr	r3, [pc, #564]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a8c      	ldr	r2, [pc, #560]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800379c:	e015      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f001 f92b 	bl	8004a00 <RCCEx_PLL2_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037ae:	e00c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3324      	adds	r3, #36	; 0x24
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 f9d4 	bl	8004b64 <RCCEx_PLL3_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
      break;
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80037c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037d0:	4b7d      	ldr	r3, [pc, #500]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	f023 0207 	bic.w	r2, r3, #7
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	497a      	ldr	r1, [pc, #488]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	650b      	str	r3, [r1, #80]	; 0x50
 80037e2:	e001      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d03e      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d01c      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d804      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d00d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003808:	e01e      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800380a:	2bc0      	cmp	r3, #192	; 0xc0
 800380c:	d01f      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800380e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003812:	d01e      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003814:	e018      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003816:	4b6c      	ldr	r3, [pc, #432]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	4a6b      	ldr	r2, [pc, #428]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800381c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003822:	e017      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f8e8 	bl	8004a00 <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003834:	e00e      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3324      	adds	r3, #36	; 0x24
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f001 f991 	bl	8004b64 <RCCEx_PLL3_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003846:	e005      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
      break;
 800384c:	e002      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800385a:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	4958      	ldr	r1, [pc, #352]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003868:	4313      	orrs	r3, r2
 800386a:	650b      	str	r3, [r1, #80]	; 0x50
 800386c:	e001      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387a:	2b00      	cmp	r3, #0
 800387c:	d044      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003888:	d01f      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x202>
 800388a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388e:	d805      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003898:	d00e      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800389a:	e01f      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x214>
 800389c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038a0:	d01f      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80038a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038a6:	d01e      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80038a8:	e018      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	4a46      	ldr	r2, [pc, #280]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038b6:	e017      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 f89e 	bl	8004a00 <RCCEx_PLL2_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038c8:	e00e      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3324      	adds	r3, #36	; 0x24
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 f947 	bl	8004b64 <RCCEx_PLL3_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038da:	e005      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	75fb      	strb	r3, [r7, #23]
      break;
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80038e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038ee:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038fc:	4932      	ldr	r1, [pc, #200]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	658b      	str	r3, [r1, #88]	; 0x58
 8003902:	e001      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003910:	2b00      	cmp	r3, #0
 8003912:	d044      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800391a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800391e:	d01f      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003924:	d805      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800392a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800392e:	d00e      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003930:	e01f      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003932:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003936:	d01f      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800393c:	d01e      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800393e:	e018      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	4a20      	ldr	r2, [pc, #128]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800394c:	e017      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f853 	bl	8004a00 <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800395e:	e00e      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3324      	adds	r3, #36	; 0x24
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f8fc 	bl	8004b64 <RCCEx_PLL3_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003970:	e005      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
      break;
 8003976:	e002      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800397c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003992:	490d      	ldr	r1, [pc, #52]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003994:	4313      	orrs	r3, r2
 8003996:	658b      	str	r3, [r1, #88]	; 0x58
 8003998:	e001      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
 800399c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d035      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d00c      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d802      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01b      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80039ba:	e017      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x324>
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d00c      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x312>
 80039c0:	2b30      	cmp	r3, #48	; 0x30
 80039c2:	d018      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80039c4:	e012      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x324>
 80039c6:	bf00      	nop
 80039c8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039cc:	4baf      	ldr	r3, [pc, #700]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	4aae      	ldr	r2, [pc, #696]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039d8:	e00e      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	2102      	movs	r1, #2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f80d 	bl	8004a00 <RCCEx_PLL2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039ea:	e005      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	75fb      	strb	r3, [r7, #23]
      break;
 80039f0:	e002      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80039f2:	bf00      	nop
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80039f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039fe:	4ba3      	ldr	r3, [pc, #652]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0a:	49a0      	ldr	r1, [pc, #640]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a10:	e001      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d042      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	d01f      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a30:	d805      	bhi.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3a:	d00e      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003a3c:	e01f      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003a3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a42:	d01f      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a48:	d01e      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003a4a:	e018      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4c:	4b8f      	ldr	r3, [pc, #572]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	4a8e      	ldr	r2, [pc, #568]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a58:	e017      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 ffcd 	bl	8004a00 <RCCEx_PLL2_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a6a:	e00e      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3324      	adds	r3, #36	; 0x24
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f876 	bl	8004b64 <RCCEx_PLL3_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a7c:	e005      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
      break;
 8003a82:	e002      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a90:	4b7e      	ldr	r3, [pc, #504]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	497b      	ldr	r1, [pc, #492]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	650b      	str	r3, [r1, #80]	; 0x50
 8003aa2:	e001      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d042      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003abc:	d01b      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ac2:	d805      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d022      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ace:	e01b      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ad4:	d01d      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ada:	d01c      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003adc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ae0:	d01b      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003ae2:	e011      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 ff88 	bl	8004a00 <RCCEx_PLL2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003af4:	e012      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3324      	adds	r3, #36	; 0x24
 8003afa:	2101      	movs	r1, #1
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 f831 	bl	8004b64 <RCCEx_PLL3_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b06:	e009      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e004      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b22:	4b5a      	ldr	r3, [pc, #360]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b26:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2e:	4957      	ldr	r1, [pc, #348]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	650b      	str	r3, [r1, #80]	; 0x50
 8003b34:	e001      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d044      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b50:	d01b      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b56:	d805      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d022      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b62:	e01b      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b68:	d01d      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b6e:	d01c      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003b70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b74:	d01b      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003b76:	e011      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 ff3e 	bl	8004a00 <RCCEx_PLL2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b88:	e012      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3324      	adds	r3, #36	; 0x24
 8003b8e:	2101      	movs	r1, #1
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 ffe7 	bl	8004b64 <RCCEx_PLL3_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b9a:	e009      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba0:	e006      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e004      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e002      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bb6:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bc4:	4931      	ldr	r1, [pc, #196]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	658b      	str	r3, [r1, #88]	; 0x58
 8003bca:	e001      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02d      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be4:	d005      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bea:	d009      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d013      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003bf0:	e00f      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf2:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	4a25      	ldr	r2, [pc, #148]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003bfe:	e00c      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fefa 	bl	8004a00 <RCCEx_PLL2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c10:	e003      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
      break;
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c20:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c2c:	4917      	ldr	r1, [pc, #92]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	650b      	str	r3, [r1, #80]	; 0x50
 8003c32:	e001      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d035      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d81b      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c91 	.word	0x08003c91
 8003c58:	08003c65 	.word	0x08003c65
 8003c5c:	08003c73 	.word	0x08003c73
 8003c60:	08003c91 	.word	0x08003c91
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c70:	e00f      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3304      	adds	r3, #4
 8003c76:	2102      	movs	r1, #2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fec1 	bl	8004a00 <RCCEx_PLL2_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c82:	e006      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
      break;
 8003c88:	e003      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003c8a:	bf00      	nop
 8003c8c:	58024400 	.word	0x58024400
      break;
 8003c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c98:	4bba      	ldr	r3, [pc, #744]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9c:	f023 0203 	bic.w	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	49b7      	ldr	r1, [pc, #732]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003caa:	e001      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
 8003cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8086 	beq.w	8003dca <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cbe:	4bb2      	ldr	r3, [pc, #712]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4ab1      	ldr	r2, [pc, #708]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cca:	f7fd ff89 	bl	8001be0 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd0:	e009      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd2:	f7fd ff85 	bl	8001be0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b64      	cmp	r3, #100	; 0x64
 8003cde:	d902      	bls.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	75fb      	strb	r3, [r7, #23]
        break;
 8003ce4:	e005      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce6:	4ba8      	ldr	r3, [pc, #672]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0ef      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d166      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cf8:	4ba2      	ldr	r3, [pc, #648]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d02:	4053      	eors	r3, r2
 8003d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d0c:	4b9d      	ldr	r3, [pc, #628]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d14:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d16:	4b9b      	ldr	r3, [pc, #620]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a9a      	ldr	r2, [pc, #616]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d22:	4b98      	ldr	r3, [pc, #608]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a97      	ldr	r2, [pc, #604]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d2e:	4a95      	ldr	r2, [pc, #596]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3e:	d115      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd ff4e 	bl	8001be0 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d46:	e00b      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d48:	f7fd ff4a 	bl	8001be0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d902      	bls.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	75fb      	strb	r3, [r7, #23]
            break;
 8003d5e:	e005      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d60:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ed      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d126      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d80:	d10d      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003d82:	4b80      	ldr	r3, [pc, #512]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d90:	0919      	lsrs	r1, r3, #4
 8003d92:	4b7e      	ldr	r3, [pc, #504]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003d94:	400b      	ands	r3, r1
 8003d96:	497b      	ldr	r1, [pc, #492]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	610b      	str	r3, [r1, #16]
 8003d9c:	e005      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003d9e:	4b79      	ldr	r3, [pc, #484]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	4a78      	ldr	r2, [pc, #480]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003da4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003da8:	6113      	str	r3, [r2, #16]
 8003daa:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	4972      	ldr	r1, [pc, #456]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	670b      	str	r3, [r1, #112]	; 0x70
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	75bb      	strb	r3, [r7, #22]
 8003dc4:	e001      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d07d      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dda:	2b28      	cmp	r3, #40	; 0x28
 8003ddc:	d866      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003dde:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003eb3 	.word	0x08003eb3
 8003de8:	08003ead 	.word	0x08003ead
 8003dec:	08003ead 	.word	0x08003ead
 8003df0:	08003ead 	.word	0x08003ead
 8003df4:	08003ead 	.word	0x08003ead
 8003df8:	08003ead 	.word	0x08003ead
 8003dfc:	08003ead 	.word	0x08003ead
 8003e00:	08003ead 	.word	0x08003ead
 8003e04:	08003e89 	.word	0x08003e89
 8003e08:	08003ead 	.word	0x08003ead
 8003e0c:	08003ead 	.word	0x08003ead
 8003e10:	08003ead 	.word	0x08003ead
 8003e14:	08003ead 	.word	0x08003ead
 8003e18:	08003ead 	.word	0x08003ead
 8003e1c:	08003ead 	.word	0x08003ead
 8003e20:	08003ead 	.word	0x08003ead
 8003e24:	08003e9b 	.word	0x08003e9b
 8003e28:	08003ead 	.word	0x08003ead
 8003e2c:	08003ead 	.word	0x08003ead
 8003e30:	08003ead 	.word	0x08003ead
 8003e34:	08003ead 	.word	0x08003ead
 8003e38:	08003ead 	.word	0x08003ead
 8003e3c:	08003ead 	.word	0x08003ead
 8003e40:	08003ead 	.word	0x08003ead
 8003e44:	08003eb3 	.word	0x08003eb3
 8003e48:	08003ead 	.word	0x08003ead
 8003e4c:	08003ead 	.word	0x08003ead
 8003e50:	08003ead 	.word	0x08003ead
 8003e54:	08003ead 	.word	0x08003ead
 8003e58:	08003ead 	.word	0x08003ead
 8003e5c:	08003ead 	.word	0x08003ead
 8003e60:	08003ead 	.word	0x08003ead
 8003e64:	08003eb3 	.word	0x08003eb3
 8003e68:	08003ead 	.word	0x08003ead
 8003e6c:	08003ead 	.word	0x08003ead
 8003e70:	08003ead 	.word	0x08003ead
 8003e74:	08003ead 	.word	0x08003ead
 8003e78:	08003ead 	.word	0x08003ead
 8003e7c:	08003ead 	.word	0x08003ead
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08003eb3 	.word	0x08003eb3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fdb6 	bl	8004a00 <RCCEx_PLL2_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e98:	e00c      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3324      	adds	r3, #36	; 0x24
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fe5f 	bl	8004b64 <RCCEx_PLL3_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003eaa:	e003      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003eba:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec6:	492f      	ldr	r1, [pc, #188]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	654b      	str	r3, [r1, #84]	; 0x54
 8003ecc:	e001      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d037      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d820      	bhi.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f2f 	.word	0x08003f2f
 8003ef0:	08003f05 	.word	0x08003f05
 8003ef4:	08003f17 	.word	0x08003f17
 8003ef8:	08003f2f 	.word	0x08003f2f
 8003efc:	08003f2f 	.word	0x08003f2f
 8003f00:	08003f2f 	.word	0x08003f2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fd78 	bl	8004a00 <RCCEx_PLL2_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f14:	e00c      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3324      	adds	r3, #36	; 0x24
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fe21 	bl	8004b64 <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f26:	e003      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f2c:	e000      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f36:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	f023 0207 	bic.w	r2, r3, #7
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f42:	4910      	ldr	r1, [pc, #64]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	654b      	str	r3, [r1, #84]	; 0x54
 8003f48:	e001      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d040      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d827      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003f64:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003fbb 	.word	0x08003fbb
 8003f70:	08003f91 	.word	0x08003f91
 8003f74:	08003fa3 	.word	0x08003fa3
 8003f78:	08003fbb 	.word	0x08003fbb
 8003f7c:	08003fbb 	.word	0x08003fbb
 8003f80:	08003fbb 	.word	0x08003fbb
 8003f84:	58024400 	.word	0x58024400
 8003f88:	58024800 	.word	0x58024800
 8003f8c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fd32 	bl	8004a00 <RCCEx_PLL2_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fa0:	e00c      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3324      	adds	r3, #36	; 0x24
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fddb 	bl	8004b64 <RCCEx_PLL3_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fb2:	e003      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb8:	e000      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc2:	4bb2      	ldr	r3, [pc, #712]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	f023 0207 	bic.w	r2, r3, #7
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	49ae      	ldr	r1, [pc, #696]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	658b      	str	r3, [r1, #88]	; 0x58
 8003fd6:	e001      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d044      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff2:	d01b      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff8:	d805      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d022      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004004:	e01b      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d01d      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800400c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004010:	d01c      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004012:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004016:	d01b      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004018:	e011      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fced 	bl	8004a00 <RCCEx_PLL2_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800402a:	e012      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3324      	adds	r3, #36	; 0x24
 8004030:	2102      	movs	r1, #2
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fd96 	bl	8004b64 <RCCEx_PLL3_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800403c:	e009      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
      break;
 8004042:	e006      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004044:	bf00      	nop
 8004046:	e004      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004048:	bf00      	nop
 800404a:	e002      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800404c:	bf00      	nop
 800404e:	e000      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004058:	4b8c      	ldr	r3, [pc, #560]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004066:	4989      	ldr	r1, [pc, #548]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004068:	4313      	orrs	r3, r2
 800406a:	654b      	str	r3, [r1, #84]	; 0x54
 800406c:	e001      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406e:	7dfb      	ldrb	r3, [r7, #23]
 8004070:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d044      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004088:	d01b      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800408a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408e:	d805      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d022      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800409a:	e01b      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800409c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a0:	d01d      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80040a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040a6:	d01c      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80040a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ac:	d01b      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80040ae:	e011      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3304      	adds	r3, #4
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fca2 	bl	8004a00 <RCCEx_PLL2_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040c0:	e012      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3324      	adds	r3, #36	; 0x24
 80040c6:	2102      	movs	r1, #2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fd4b 	bl	8004b64 <RCCEx_PLL3_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040d2:	e009      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
      break;
 80040d8:	e006      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80040da:	bf00      	nop
 80040dc:	e004      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80040de:	bf00      	nop
 80040e0:	e002      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80040e2:	bf00      	nop
 80040e4:	e000      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80040e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040ee:	4b67      	ldr	r3, [pc, #412]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040fc:	4963      	ldr	r1, [pc, #396]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	658b      	str	r3, [r1, #88]	; 0x58
 8004102:	e001      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d044      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800411a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800411e:	d01b      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004124:	d805      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d022      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800412a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004130:	e01b      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004136:	d01d      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004138:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800413c:	d01c      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800413e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004142:	d01b      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004144:	e011      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fc57 	bl	8004a00 <RCCEx_PLL2_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004156:	e012      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3324      	adds	r3, #36	; 0x24
 800415c:	2102      	movs	r1, #2
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fd00 	bl	8004b64 <RCCEx_PLL3_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004168:	e009      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
      break;
 800416e:	e006      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004170:	bf00      	nop
 8004172:	e004      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004174:	bf00      	nop
 8004176:	e002      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800417c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004184:	4b41      	ldr	r3, [pc, #260]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004192:	493e      	ldr	r1, [pc, #248]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004194:	4313      	orrs	r3, r2
 8004196:	658b      	str	r3, [r1, #88]	; 0x58
 8004198:	e001      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b4:	d10a      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3324      	adds	r3, #36	; 0x24
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fcd1 	bl	8004b64 <RCCEx_PLL3_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041cc:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041da:	492c      	ldr	r1, [pc, #176]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	d10a      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3324      	adds	r3, #36	; 0x24
 80041fc:	2102      	movs	r1, #2
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fcb0 	bl	8004b64 <RCCEx_PLL3_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421c:	491b      	ldr	r1, [pc, #108]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d032      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d00d      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800423a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800423e:	d016      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d111      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fbd8 	bl	8004a00 <RCCEx_PLL2_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004254:	e00c      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3324      	adds	r3, #36	; 0x24
 800425a:	2102      	movs	r1, #2
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fc81 	bl	8004b64 <RCCEx_PLL3_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004266:	e003      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75fb      	strb	r3, [r7, #23]
      break;
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800426e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10c      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004284:	4901      	ldr	r1, [pc, #4]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	658b      	str	r3, [r1, #88]	; 0x58
 800428a:	e003      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800428c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02f      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042aa:	d00c      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80042ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042b0:	d015      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80042b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b6:	d10f      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b8:	4b79      	ldr	r3, [pc, #484]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4a78      	ldr	r2, [pc, #480]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80042c4:	e00c      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3324      	adds	r3, #36	; 0x24
 80042ca:	2101      	movs	r1, #1
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fc49 	bl	8004b64 <RCCEx_PLL3_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80042d6:	e003      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	75fb      	strb	r3, [r7, #23]
      break;
 80042dc:	e000      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80042de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10a      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e6:	4b6e      	ldr	r3, [pc, #440]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f4:	496a      	ldr	r1, [pc, #424]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	654b      	str	r3, [r1, #84]	; 0x54
 80042fa:	e001      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d029      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004318:	d007      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800431a:	e00f      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800431c:	4b60      	ldr	r3, [pc, #384]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	4a5f      	ldr	r2, [pc, #380]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004328:	e00b      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	2102      	movs	r1, #2
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fb65 	bl	8004a00 <RCCEx_PLL2_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800433a:	e002      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
      break;
 8004340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004348:	4b55      	ldr	r3, [pc, #340]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800434a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004354:	4952      	ldr	r1, [pc, #328]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004356:	4313      	orrs	r3, r2
 8004358:	64cb      	str	r3, [r1, #76]	; 0x4c
 800435a:	e001      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3324      	adds	r3, #36	; 0x24
 8004370:	2102      	movs	r1, #2
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fbf6 	bl	8004b64 <RCCEx_PLL3_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02f      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004396:	d00c      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439c:	d802      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80043a2:	e00d      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a8:	d00f      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80043aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ae:	d00e      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b2:	4b3b      	ldr	r3, [pc, #236]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	4a3a      	ldr	r2, [pc, #232]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80043be:	e007      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
      break;
 80043c4:	e004      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80043ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043d6:	4b32      	ldr	r3, [pc, #200]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e2:	492f      	ldr	r1, [pc, #188]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	654b      	str	r3, [r1, #84]	; 0x54
 80043e8:	e001      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
 80043ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043fa:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	4926      	ldr	r1, [pc, #152]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004408:	4313      	orrs	r3, r2
 800440a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004418:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004426:	491e      	ldr	r1, [pc, #120]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004428:	4313      	orrs	r3, r2
 800442a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800443a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004444:	4916      	ldr	r1, [pc, #88]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00d      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800445c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004460:	6113      	str	r3, [r2, #16]
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800446c:	490c      	ldr	r1, [pc, #48]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800446e:	4313      	orrs	r3, r2
 8004470:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	da08      	bge.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004486:	4906      	ldr	r1, [pc, #24]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004488:	4313      	orrs	r3, r2
 800448a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800448c:	7dbb      	ldrb	r3, [r7, #22]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	58024400 	.word	0x58024400

080044a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044a8:	f7ff f8b2 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 80044ac:	4601      	mov	r1, r0
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044ba:	5cd3      	ldrb	r3, [r2, r3]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	58024400 	.word	0x58024400
 80044cc:	0800b0d8 	.word	0x0800b0d8

080044d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	; 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044d8:	4b9d      	ldr	r3, [pc, #628]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80044e2:	4b9b      	ldr	r3, [pc, #620]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	0b1b      	lsrs	r3, r3, #12
 80044e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044ee:	4b98      	ldr	r3, [pc, #608]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80044fa:	4b95      	ldr	r3, [pc, #596]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	08db      	lsrs	r3, r3, #3
 8004500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 810a 	beq.w	8004732 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d05a      	beq.n	80045da <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004524:	2b01      	cmp	r3, #1
 8004526:	d302      	bcc.n	800452e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004528:	2b02      	cmp	r3, #2
 800452a:	d078      	beq.n	800461e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800452c:	e099      	b.n	8004662 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800452e:	4b88      	ldr	r3, [pc, #544]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d02d      	beq.n	8004596 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800453a:	4b85      	ldr	r3, [pc, #532]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	08db      	lsrs	r3, r3, #3
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	4a83      	ldr	r2, [pc, #524]	; (8004754 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	ee07 3a90 	vmov	s15, r3
 800455c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004564:	4b7a      	ldr	r3, [pc, #488]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456c:	ee07 3a90 	vmov	s15, r3
 8004570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004574:	ed97 6a03 	vldr	s12, [r7, #12]
 8004578:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004758 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800457c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800458c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004590:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004594:	e087      	b.n	80046a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800475c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80045a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a8:	4b69      	ldr	r3, [pc, #420]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80045bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004758 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80045c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045d8:	e065      	b.n	80046a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	ee07 3a90 	vmov	s15, r3
 80045e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80045e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ec:	4b58      	ldr	r3, [pc, #352]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004600:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004758 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004618:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800461c:	e043      	b.n	80046a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004628:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800462c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004630:	4b47      	ldr	r3, [pc, #284]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004640:	ed97 6a03 	vldr	s12, [r7, #12]
 8004644:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004758 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004660:	e021      	b.n	80046a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004674:	4b36      	ldr	r3, [pc, #216]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004684:	ed97 6a03 	vldr	s12, [r7, #12]
 8004688:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004758 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800468c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046a4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80046a6:	4b2a      	ldr	r3, [pc, #168]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	0a5b      	lsrs	r3, r3, #9
 80046ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046cc:	ee17 2a90 	vmov	r2, s15
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80046d4:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fa:	ee17 2a90 	vmov	r2, s15
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004702:	4b13      	ldr	r3, [pc, #76]	; (8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	0e1b      	lsrs	r3, r3, #24
 8004708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800471c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004728:	ee17 2a90 	vmov	r2, s15
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004730:	e008      	b.n	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	609a      	str	r2, [r3, #8]
}
 8004744:	bf00      	nop
 8004746:	3724      	adds	r7, #36	; 0x24
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	58024400 	.word	0x58024400
 8004754:	03d09000 	.word	0x03d09000
 8004758:	46000000 	.word	0x46000000
 800475c:	4c742400 	.word	0x4c742400
 8004760:	4a742400 	.word	0x4a742400
 8004764:	4c189680 	.word	0x4c189680

08004768 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004768:	b480      	push	{r7}
 800476a:	b089      	sub	sp, #36	; 0x24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004770:	4b9d      	ldr	r3, [pc, #628]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800477a:	4b9b      	ldr	r3, [pc, #620]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	0d1b      	lsrs	r3, r3, #20
 8004780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004784:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004786:	4b98      	ldr	r3, [pc, #608]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004792:	4b95      	ldr	r3, [pc, #596]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	08db      	lsrs	r3, r3, #3
 8004798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 810a 	beq.w	80049ca <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d05a      	beq.n	8004872 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d302      	bcc.n	80047c6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d078      	beq.n	80048b6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80047c4:	e099      	b.n	80048fa <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047c6:	4b88      	ldr	r3, [pc, #544]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02d      	beq.n	800482e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047d2:	4b85      	ldr	r3, [pc, #532]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	08db      	lsrs	r3, r3, #3
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	4a83      	ldr	r2, [pc, #524]	; (80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80047de:	fa22 f303 	lsr.w	r3, r2, r3
 80047e2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	ee07 3a90 	vmov	s15, r3
 80047f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fc:	4b7a      	ldr	r3, [pc, #488]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004810:	eddf 5a77 	vldr	s11, [pc, #476]	; 80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004828:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800482c:	e087      	b.n	800493e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004838:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800483c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004840:	4b69      	ldr	r3, [pc, #420]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004848:	ee07 3a90 	vmov	s15, r3
 800484c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004850:	ed97 6a03 	vldr	s12, [r7, #12]
 8004854:	eddf 5a66 	vldr	s11, [pc, #408]	; 80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004870:	e065      	b.n	800493e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80049f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004884:	4b58      	ldr	r3, [pc, #352]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488c:	ee07 3a90 	vmov	s15, r3
 8004890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004894:	ed97 6a03 	vldr	s12, [r7, #12]
 8004898:	eddf 5a55 	vldr	s11, [pc, #340]	; 80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800489c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048b4:	e043      	b.n	800493e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80049fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80048c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c8:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80048dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80048e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048f8:	e021      	b.n	800493e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004904:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80049f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490c:	4b36      	ldr	r3, [pc, #216]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004920:	eddf 5a33 	vldr	s11, [pc, #204]	; 80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004938:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800493c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800493e:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	0a5b      	lsrs	r3, r3, #9
 8004944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004958:	edd7 6a07 	vldr	s13, [r7, #28]
 800495c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004964:	ee17 2a90 	vmov	r2, s15
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800496c:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004986:	edd7 6a07 	vldr	s13, [r7, #28]
 800498a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004992:	ee17 2a90 	vmov	r2, s15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800499a:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	0e1b      	lsrs	r3, r3, #24
 80049a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a4:	ee07 3a90 	vmov	s15, r3
 80049a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c0:	ee17 2a90 	vmov	r2, s15
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049c8:	e008      	b.n	80049dc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	609a      	str	r2, [r3, #8]
}
 80049dc:	bf00      	nop
 80049de:	3724      	adds	r7, #36	; 0x24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	58024400 	.word	0x58024400
 80049ec:	03d09000 	.word	0x03d09000
 80049f0:	46000000 	.word	0x46000000
 80049f4:	4c742400 	.word	0x4c742400
 80049f8:	4a742400 	.word	0x4a742400
 80049fc:	4c189680 	.word	0x4c189680

08004a00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a0e:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d101      	bne.n	8004a1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e099      	b.n	8004b52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a1e:	4b4f      	ldr	r3, [pc, #316]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a4e      	ldr	r2, [pc, #312]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2a:	f7fd f8d9 	bl	8001be0 <HAL_GetTick>
 8004a2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a30:	e008      	b.n	8004a44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a32:	f7fd f8d5 	bl	8001be0 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e086      	b.n	8004b52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a44:	4b45      	ldr	r3, [pc, #276]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a50:	4b42      	ldr	r3, [pc, #264]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	031b      	lsls	r3, r3, #12
 8004a5e:	493f      	ldr	r1, [pc, #252]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	628b      	str	r3, [r1, #40]	; 0x28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	025b      	lsls	r3, r3, #9
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	061b      	lsls	r3, r3, #24
 8004a90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a94:	4931      	ldr	r1, [pc, #196]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a9a:	4b30      	ldr	r3, [pc, #192]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	492d      	ldr	r1, [pc, #180]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004aac:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	f023 0220 	bic.w	r2, r3, #32
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	4928      	ldr	r1, [pc, #160]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004abe:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004ac4:	f023 0310 	bic.w	r3, r3, #16
 8004ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004aca:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ace:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <RCCEx_PLL2_Config+0x160>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	69d2      	ldr	r2, [r2, #28]
 8004ad6:	00d2      	lsls	r2, r2, #3
 8004ad8:	4920      	ldr	r1, [pc, #128]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ade:	4b1f      	ldr	r3, [pc, #124]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004ae4:	f043 0310 	orr.w	r3, r3, #16
 8004ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	4a19      	ldr	r2, [pc, #100]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004af6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004afa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004afc:	e00f      	b.n	8004b1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d106      	bne.n	8004b12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b04:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b10:	e005      	b.n	8004b1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b12:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2a:	f7fd f859 	bl	8001be0 <HAL_GetTick>
 8004b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b30:	e008      	b.n	8004b44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b32:	f7fd f855 	bl	8001be0 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e006      	b.n	8004b52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	58024400 	.word	0x58024400
 8004b60:	ffff0007 	.word	0xffff0007

08004b64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b72:	4b53      	ldr	r3, [pc, #332]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d101      	bne.n	8004b82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e099      	b.n	8004cb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b82:	4b4f      	ldr	r3, [pc, #316]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a4e      	ldr	r2, [pc, #312]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8e:	f7fd f827 	bl	8001be0 <HAL_GetTick>
 8004b92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b96:	f7fd f823 	bl	8001be0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e086      	b.n	8004cb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ba8:	4b45      	ldr	r3, [pc, #276]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bb4:	4b42      	ldr	r3, [pc, #264]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	051b      	lsls	r3, r3, #20
 8004bc2:	493f      	ldr	r1, [pc, #252]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	628b      	str	r3, [r1, #40]	; 0x28
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	025b      	lsls	r3, r3, #9
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	061b      	lsls	r3, r3, #24
 8004bf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bf8:	4931      	ldr	r1, [pc, #196]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bfe:	4b30      	ldr	r3, [pc, #192]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	492d      	ldr	r1, [pc, #180]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c10:	4b2b      	ldr	r3, [pc, #172]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	4928      	ldr	r1, [pc, #160]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c22:	4b27      	ldr	r3, [pc, #156]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	4a26      	ldr	r2, [pc, #152]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c2e:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <RCCEx_PLL3_Config+0x160>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	69d2      	ldr	r2, [r2, #28]
 8004c3a:	00d2      	lsls	r2, r2, #3
 8004c3c:	4920      	ldr	r1, [pc, #128]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c42:	4b1f      	ldr	r3, [pc, #124]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	4a1e      	ldr	r2, [pc, #120]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c54:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	4a19      	ldr	r2, [pc, #100]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c60:	e00f      	b.n	8004c82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d106      	bne.n	8004c76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c68:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	4a14      	ldr	r2, [pc, #80]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c74:	e005      	b.n	8004c82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c76:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	4a11      	ldr	r2, [pc, #68]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c82:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8e:	f7fc ffa7 	bl	8001be0 <HAL_GetTick>
 8004c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c94:	e008      	b.n	8004ca8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c96:	f7fc ffa3 	bl	8001be0 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e006      	b.n	8004cb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	ffff0007 	.word	0xffff0007

08004cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e049      	b.n	8004d6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc fe08 	bl	8001904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f000 f934 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d001      	beq.n	8004d90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e019      	b.n	8004dc4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <HAL_TIM_Base_Start+0x58>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b06      	cmp	r3, #6
 8004da8:	d00b      	beq.n	8004dc2 <HAL_TIM_Base_Start+0x4a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db0:	d007      	beq.n	8004dc2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	00010007 	.word	0x00010007

08004dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_TIM_ConfigClockSource+0x18>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e0b7      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x188>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <HAL_TIM_ConfigClockSource+0x190>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b70      	cmp	r3, #112	; 0x70
 8004e22:	d02e      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xae>
 8004e24:	2b70      	cmp	r3, #112	; 0x70
 8004e26:	d812      	bhi.n	8004e4e <HAL_TIM_ConfigClockSource+0x7a>
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	f000 8084 	beq.w	8004f36 <HAL_TIM_ConfigClockSource+0x162>
 8004e2e:	2b30      	cmp	r3, #48	; 0x30
 8004e30:	d806      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x6c>
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d07f      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x162>
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d07d      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x162>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d07b      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e3e:	e084      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004e40:	2b50      	cmp	r3, #80	; 0x50
 8004e42:	d048      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x102>
 8004e44:	2b60      	cmp	r3, #96	; 0x60
 8004e46:	d056      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x122>
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d064      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8004e4c:	e07d      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004e4e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e52:	d070      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x162>
 8004e54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e58:	d809      	bhi.n	8004e6e <HAL_TIM_ConfigClockSource+0x9a>
 8004e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5e:	d027      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0xdc>
 8004e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e64:	d067      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x162>
 8004e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6a:	d06d      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e6c:	e06d      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004e6e:	4a3e      	ldr	r2, [pc, #248]	; (8004f68 <HAL_TIM_ConfigClockSource+0x194>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d060      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x162>
 8004e74:	4a3d      	ldr	r2, [pc, #244]	; (8004f6c <HAL_TIM_ConfigClockSource+0x198>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d05d      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x162>
 8004e7a:	4a3d      	ldr	r2, [pc, #244]	; (8004f70 <HAL_TIM_ConfigClockSource+0x19c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d05a      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8004e80:	e063      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6899      	ldr	r1, [r3, #8]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f000 f987 	bl	80051a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ea4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	609a      	str	r2, [r3, #8]
      break;
 8004eae:	e04c      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6899      	ldr	r1, [r3, #8]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f000 f970 	bl	80051a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ed2:	609a      	str	r2, [r3, #8]
      break;
 8004ed4:	e039      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f000 f8e0 	bl	80050a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2150      	movs	r1, #80	; 0x50
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f93a 	bl	8005168 <TIM_ITRx_SetConfig>
      break;
 8004ef4:	e029      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f000 f8ff 	bl	8005106 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2160      	movs	r1, #96	; 0x60
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f92a 	bl	8005168 <TIM_ITRx_SetConfig>
      break;
 8004f14:	e019      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f000 f8c0 	bl	80050a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2140      	movs	r1, #64	; 0x40
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f91a 	bl	8005168 <TIM_ITRx_SetConfig>
      break;
 8004f34:	e009      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f000 f911 	bl	8005168 <TIM_ITRx_SetConfig>
      break;
 8004f46:	e000      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004f48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	ffceff88 	.word	0xffceff88
 8004f68:	00100030 	.word	0x00100030
 8004f6c:	00100040 	.word	0x00100040
 8004f70:	00100020 	.word	0x00100020

08004f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a40      	ldr	r2, [pc, #256]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f92:	d00f      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a3d      	ldr	r2, [pc, #244]	; (800508c <TIM_Base_SetConfig+0x118>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <TIM_Base_SetConfig+0x11c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3b      	ldr	r2, [pc, #236]	; (8005094 <TIM_Base_SetConfig+0x120>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3a      	ldr	r2, [pc, #232]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d108      	bne.n	8004fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d01f      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d01b      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	; (800508c <TIM_Base_SetConfig+0x118>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d017      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	; (8005090 <TIM_Base_SetConfig+0x11c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d013      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <TIM_Base_SetConfig+0x120>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00f      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a29      	ldr	r2, [pc, #164]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00b      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a28      	ldr	r2, [pc, #160]	; (800509c <TIM_Base_SetConfig+0x128>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d007      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <TIM_Base_SetConfig+0x12c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a26      	ldr	r2, [pc, #152]	; (80050a4 <TIM_Base_SetConfig+0x130>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d108      	bne.n	8005020 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a10      	ldr	r2, [pc, #64]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00f      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a12      	ldr	r2, [pc, #72]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00b      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a11      	ldr	r2, [pc, #68]	; (800509c <TIM_Base_SetConfig+0x128>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <TIM_Base_SetConfig+0x12c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a0f      	ldr	r2, [pc, #60]	; (80050a4 <TIM_Base_SetConfig+0x130>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d103      	bne.n	8005074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	615a      	str	r2, [r3, #20]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40010400 	.word	0x40010400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800

080050a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0201 	bic.w	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f023 030a 	bic.w	r3, r3, #10
 80050e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005106:	b480      	push	{r7}
 8005108:	b087      	sub	sp, #28
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0210 	bic.w	r2, r3, #16
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	031b      	lsls	r3, r3, #12
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005142:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <TIM_ITRx_SetConfig+0x38>)
 800517c:	4013      	ands	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	f043 0307 	orr.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	609a      	str	r2, [r3, #8]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	ffcfff8f 	.word	0xffcfff8f

080051a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	021a      	lsls	r2, r3, #8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	609a      	str	r2, [r3, #8]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e068      	b.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a2e      	ldr	r2, [pc, #184]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2d      	ldr	r2, [pc, #180]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d108      	bne.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005236:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005248:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01d      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526e:	d018      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a18      	ldr	r2, [pc, #96]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10c      	bne.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40001800 	.word	0x40001800

080052f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e042      	b.n	800538c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7fc fb5f 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2224      	movs	r2, #36	; 0x24
 8005322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0201 	bic.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fb12 	bl	8005960 <UART_SetConfig>
 800533c:	4603      	mov	r3, r0
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e022      	b.n	800538c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f001 f8b6 	bl	80064c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 f93d 	bl	8006604 <UART_CheckIdleState>
 800538a:	4603      	mov	r3, r0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d168      	bne.n	800547e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_UART_Transmit_IT+0x24>
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e061      	b.n	8005480 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_UART_Transmit_IT+0x36>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e05a      	b.n	8005480 <HAL_UART_Transmit_IT+0xec>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	88fa      	ldrh	r2, [r7, #6]
 80053e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2221      	movs	r2, #33	; 0x21
 80053fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005406:	d11c      	bne.n	8005442 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005410:	d107      	bne.n	8005422 <HAL_UART_Transmit_IT+0x8e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a1b      	ldr	r2, [pc, #108]	; (800548c <HAL_UART_Transmit_IT+0xf8>)
 800541e:	671a      	str	r2, [r3, #112]	; 0x70
 8005420:	e002      	b.n	8005428 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <HAL_UART_Transmit_IT+0xfc>)
 8005426:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	e01b      	b.n	800547a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544a:	d107      	bne.n	800545c <HAL_UART_Transmit_IT+0xc8>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4a0f      	ldr	r2, [pc, #60]	; (8005494 <HAL_UART_Transmit_IT+0x100>)
 8005458:	671a      	str	r2, [r3, #112]	; 0x70
 800545a:	e002      	b.n	8005462 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4a0e      	ldr	r2, [pc, #56]	; (8005498 <HAL_UART_Transmit_IT+0x104>)
 8005460:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005478:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	08006995 	.word	0x08006995
 8005490:	080068fb 	.word	0x080068fb
 8005494:	0800687d 	.word	0x0800687d
 8005498:	08006809 	.word	0x08006809

0800549c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	f040 80bc 	bne.w	800562e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_UART_Receive_IT+0x26>
 80054bc:	88fb      	ldrh	r3, [r7, #6]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e0b4      	b.n	8005630 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_UART_Receive_IT+0x38>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e0ad      	b.n	8005630 <HAL_UART_Receive_IT+0x194>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	88fa      	ldrh	r2, [r7, #6]
 80054e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	88fa      	ldrh	r2, [r7, #6]
 80054ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005500:	d10e      	bne.n	8005520 <HAL_UART_Receive_IT+0x84>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d105      	bne.n	8005516 <HAL_UART_Receive_IT+0x7a>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005510:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005514:	e02d      	b.n	8005572 <HAL_UART_Receive_IT+0xd6>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	22ff      	movs	r2, #255	; 0xff
 800551a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800551e:	e028      	b.n	8005572 <HAL_UART_Receive_IT+0xd6>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10d      	bne.n	8005544 <HAL_UART_Receive_IT+0xa8>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_UART_Receive_IT+0x9e>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	22ff      	movs	r2, #255	; 0xff
 8005534:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005538:	e01b      	b.n	8005572 <HAL_UART_Receive_IT+0xd6>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	227f      	movs	r2, #127	; 0x7f
 800553e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005542:	e016      	b.n	8005572 <HAL_UART_Receive_IT+0xd6>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800554c:	d10d      	bne.n	800556a <HAL_UART_Receive_IT+0xce>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d104      	bne.n	8005560 <HAL_UART_Receive_IT+0xc4>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	227f      	movs	r2, #127	; 0x7f
 800555a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800555e:	e008      	b.n	8005572 <HAL_UART_Receive_IT+0xd6>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	223f      	movs	r2, #63	; 0x3f
 8005564:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005568:	e003      	b.n	8005572 <HAL_UART_Receive_IT+0xd6>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2222      	movs	r2, #34	; 0x22
 800557e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559a:	d12a      	bne.n	80055f2 <HAL_UART_Receive_IT+0x156>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d324      	bcc.n	80055f2 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b0:	d107      	bne.n	80055c2 <HAL_UART_Receive_IT+0x126>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a1f      	ldr	r2, [pc, #124]	; (800563c <HAL_UART_Receive_IT+0x1a0>)
 80055be:	66da      	str	r2, [r3, #108]	; 0x6c
 80055c0:	e002      	b.n	80055c8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a1e      	ldr	r2, [pc, #120]	; (8005640 <HAL_UART_Receive_IT+0x1a4>)
 80055c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055de:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055ee:	609a      	str	r2, [r3, #8]
 80055f0:	e01b      	b.n	800562a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fa:	d107      	bne.n	800560c <HAL_UART_Receive_IT+0x170>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d103      	bne.n	800560c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4a0f      	ldr	r2, [pc, #60]	; (8005644 <HAL_UART_Receive_IT+0x1a8>)
 8005608:	66da      	str	r2, [r3, #108]	; 0x6c
 800560a:	e002      	b.n	8005612 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4a0e      	ldr	r2, [pc, #56]	; (8005648 <HAL_UART_Receive_IT+0x1ac>)
 8005610:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005628:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	08006cc9 	.word	0x08006cc9
 8005640:	08006bc1 	.word	0x08006bc1
 8005644:	08006b17 	.word	0x08006b17
 8005648:	08006a6d 	.word	0x08006a6d

0800564c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d118      	bne.n	80056ae <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d013      	beq.n	80056ae <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d104      	bne.n	800569a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8145 	beq.w	800592e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	4798      	blx	r3
      }
      return;
 80056ac:	e13f      	b.n	800592e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80e8 	beq.w	8005886 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4ba1      	ldr	r3, [pc, #644]	; (8005940 <HAL_UART_IRQHandler+0x2f4>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4ba0      	ldr	r3, [pc, #640]	; (8005944 <HAL_UART_IRQHandler+0x2f8>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80dd 	beq.w	8005886 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d010      	beq.n	80056f8 <HAL_UART_IRQHandler+0xac>
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2201      	movs	r2, #1
 80056e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d010      	beq.n	8005724 <HAL_UART_IRQHandler+0xd8>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2202      	movs	r2, #2
 8005712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	f043 0204 	orr.w	r2, r3, #4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b00      	cmp	r3, #0
 800572c:	d010      	beq.n	8005750 <HAL_UART_IRQHandler+0x104>
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00b      	beq.n	8005750 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2204      	movs	r2, #4
 800573e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f043 0202 	orr.w	r2, r3, #2
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d015      	beq.n	8005786 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4b76      	ldr	r3, [pc, #472]	; (8005940 <HAL_UART_IRQHandler+0x2f4>)
 8005768:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2208      	movs	r2, #8
 8005774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	f043 0208 	orr.w	r2, r3, #8
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800578c:	2b00      	cmp	r3, #0
 800578e:	d011      	beq.n	80057b4 <HAL_UART_IRQHandler+0x168>
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00c      	beq.n	80057b4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	f043 0220 	orr.w	r2, r3, #32
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80b9 	beq.w	8005932 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d011      	beq.n	80057ee <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d004      	beq.n	800580e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800580a:	2b00      	cmp	r3, #0
 800580c:	d031      	beq.n	8005872 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 ffc0 	bl	8006794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	d123      	bne.n	800586a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005830:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005836:	2b00      	cmp	r3, #0
 8005838:	d013      	beq.n	8005862 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800583e:	4a42      	ldr	r2, [pc, #264]	; (8005948 <HAL_UART_IRQHandler+0x2fc>)
 8005840:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005846:	4618      	mov	r0, r3
 8005848:	f7fc fb14 	bl	8001e74 <HAL_DMA_Abort_IT>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d017      	beq.n	8005882 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800585c:	4610      	mov	r0, r2
 800585e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	e00f      	b.n	8005882 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f872 	bl	800594c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e00b      	b.n	8005882 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f86e 	bl	800594c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	e007      	b.n	8005882 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f86a 	bl	800594c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005880:	e057      	b.n	8005932 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005882:	bf00      	nop
    return;
 8005884:	e055      	b.n	8005932 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00d      	beq.n	80058ac <HAL_UART_IRQHandler+0x260>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fa93 	bl	8006dd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058aa:	e045      	b.n	8005938 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d012      	beq.n	80058dc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d031      	beq.n	8005936 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	4798      	blx	r3
    }
    return;
 80058da:	e02c      	b.n	8005936 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d008      	beq.n	80058f8 <HAL_UART_IRQHandler+0x2ac>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 f8a1 	bl	8006a38 <UART_EndTransmit_IT>
    return;
 80058f6:	e01f      	b.n	8005938 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_UART_IRQHandler+0x2c8>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 fa73 	bl	8006df8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005912:	e011      	b.n	8005938 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00c      	beq.n	8005938 <HAL_UART_IRQHandler+0x2ec>
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	da09      	bge.n	8005938 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 fa5d 	bl	8006de4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800592a:	bf00      	nop
 800592c:	e004      	b.n	8005938 <HAL_UART_IRQHandler+0x2ec>
      return;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005936:	bf00      	nop
  }
}
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	10000001 	.word	0x10000001
 8005944:	04000120 	.word	0x04000120
 8005948:	080067dd 	.word	0x080067dd

0800594c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005960:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005964:	b08e      	sub	sp, #56	; 0x38
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	4313      	orrs	r3, r2
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800598c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800598e:	4313      	orrs	r3, r2
 8005990:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4bc1      	ldr	r3, [pc, #772]	; (8005ca0 <UART_SetConfig+0x340>)
 800599a:	4013      	ands	r3, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059a2:	430b      	orrs	r3, r1
 80059a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4ab7      	ldr	r2, [pc, #732]	; (8005ca4 <UART_SetConfig+0x344>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d004      	beq.n	80059d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059d2:	4313      	orrs	r3, r2
 80059d4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	4bb2      	ldr	r3, [pc, #712]	; (8005ca8 <UART_SetConfig+0x348>)
 80059de:	4013      	ands	r3, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	f023 010f 	bic.w	r1, r3, #15
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4aa9      	ldr	r2, [pc, #676]	; (8005cac <UART_SetConfig+0x34c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d177      	bne.n	8005afa <UART_SetConfig+0x19a>
 8005a0a:	4ba9      	ldr	r3, [pc, #676]	; (8005cb0 <UART_SetConfig+0x350>)
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a12:	2b28      	cmp	r3, #40	; 0x28
 8005a14:	d86c      	bhi.n	8005af0 <UART_SetConfig+0x190>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <UART_SetConfig+0xbc>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005ac1 	.word	0x08005ac1
 8005a20:	08005af1 	.word	0x08005af1
 8005a24:	08005af1 	.word	0x08005af1
 8005a28:	08005af1 	.word	0x08005af1
 8005a2c:	08005af1 	.word	0x08005af1
 8005a30:	08005af1 	.word	0x08005af1
 8005a34:	08005af1 	.word	0x08005af1
 8005a38:	08005af1 	.word	0x08005af1
 8005a3c:	08005ac9 	.word	0x08005ac9
 8005a40:	08005af1 	.word	0x08005af1
 8005a44:	08005af1 	.word	0x08005af1
 8005a48:	08005af1 	.word	0x08005af1
 8005a4c:	08005af1 	.word	0x08005af1
 8005a50:	08005af1 	.word	0x08005af1
 8005a54:	08005af1 	.word	0x08005af1
 8005a58:	08005af1 	.word	0x08005af1
 8005a5c:	08005ad1 	.word	0x08005ad1
 8005a60:	08005af1 	.word	0x08005af1
 8005a64:	08005af1 	.word	0x08005af1
 8005a68:	08005af1 	.word	0x08005af1
 8005a6c:	08005af1 	.word	0x08005af1
 8005a70:	08005af1 	.word	0x08005af1
 8005a74:	08005af1 	.word	0x08005af1
 8005a78:	08005af1 	.word	0x08005af1
 8005a7c:	08005ad9 	.word	0x08005ad9
 8005a80:	08005af1 	.word	0x08005af1
 8005a84:	08005af1 	.word	0x08005af1
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005af1 	.word	0x08005af1
 8005a90:	08005af1 	.word	0x08005af1
 8005a94:	08005af1 	.word	0x08005af1
 8005a98:	08005af1 	.word	0x08005af1
 8005a9c:	08005ae1 	.word	0x08005ae1
 8005aa0:	08005af1 	.word	0x08005af1
 8005aa4:	08005af1 	.word	0x08005af1
 8005aa8:	08005af1 	.word	0x08005af1
 8005aac:	08005af1 	.word	0x08005af1
 8005ab0:	08005af1 	.word	0x08005af1
 8005ab4:	08005af1 	.word	0x08005af1
 8005ab8:	08005af1 	.word	0x08005af1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac6:	e233      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ace:	e22f      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad6:	e22b      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ade:	e227      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae6:	e223      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aee:	e21f      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af6:	bf00      	nop
 8005af8:	e21a      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a6d      	ldr	r2, [pc, #436]	; (8005cb4 <UART_SetConfig+0x354>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d132      	bne.n	8005b6a <UART_SetConfig+0x20a>
 8005b04:	4b6a      	ldr	r3, [pc, #424]	; (8005cb0 <UART_SetConfig+0x350>)
 8005b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	2b05      	cmp	r3, #5
 8005b0e:	d827      	bhi.n	8005b60 <UART_SetConfig+0x200>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <UART_SetConfig+0x1b8>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08005b31 	.word	0x08005b31
 8005b1c:	08005b39 	.word	0x08005b39
 8005b20:	08005b41 	.word	0x08005b41
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b51 	.word	0x08005b51
 8005b2c:	08005b59 	.word	0x08005b59
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b36:	e1fb      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3e:	e1f7      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005b40:	2308      	movs	r3, #8
 8005b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b46:	e1f3      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e1ef      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005b50:	2320      	movs	r3, #32
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e1eb      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005b58:	2340      	movs	r3, #64	; 0x40
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5e:	e1e7      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b66:	bf00      	nop
 8005b68:	e1e2      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a52      	ldr	r2, [pc, #328]	; (8005cb8 <UART_SetConfig+0x358>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d132      	bne.n	8005bda <UART_SetConfig+0x27a>
 8005b74:	4b4e      	ldr	r3, [pc, #312]	; (8005cb0 <UART_SetConfig+0x350>)
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	2b05      	cmp	r3, #5
 8005b7e:	d827      	bhi.n	8005bd0 <UART_SetConfig+0x270>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <UART_SetConfig+0x228>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005ba1 	.word	0x08005ba1
 8005b8c:	08005ba9 	.word	0x08005ba9
 8005b90:	08005bb1 	.word	0x08005bb1
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bc1 	.word	0x08005bc1
 8005b9c:	08005bc9 	.word	0x08005bc9
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba6:	e1c3      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bae:	e1bf      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb6:	e1bb      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e1b7      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e1b3      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005bc8:	2340      	movs	r3, #64	; 0x40
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e1af      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd6:	bf00      	nop
 8005bd8:	e1aa      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a37      	ldr	r2, [pc, #220]	; (8005cbc <UART_SetConfig+0x35c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d132      	bne.n	8005c4a <UART_SetConfig+0x2ea>
 8005be4:	4b32      	ldr	r3, [pc, #200]	; (8005cb0 <UART_SetConfig+0x350>)
 8005be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	2b05      	cmp	r3, #5
 8005bee:	d827      	bhi.n	8005c40 <UART_SetConfig+0x2e0>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0x298>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c11 	.word	0x08005c11
 8005bfc:	08005c19 	.word	0x08005c19
 8005c00:	08005c21 	.word	0x08005c21
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c39 	.word	0x08005c39
 8005c10:	2300      	movs	r3, #0
 8005c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c16:	e18b      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1e:	e187      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005c20:	2308      	movs	r3, #8
 8005c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c26:	e183      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2e:	e17f      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005c30:	2320      	movs	r3, #32
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e17b      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005c38:	2340      	movs	r3, #64	; 0x40
 8005c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3e:	e177      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005c40:	2380      	movs	r3, #128	; 0x80
 8005c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c46:	bf00      	nop
 8005c48:	e172      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <UART_SetConfig+0x360>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d144      	bne.n	8005cde <UART_SetConfig+0x37e>
 8005c54:	4b16      	ldr	r3, [pc, #88]	; (8005cb0 <UART_SetConfig+0x350>)
 8005c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	2b05      	cmp	r3, #5
 8005c5e:	d839      	bhi.n	8005cd4 <UART_SetConfig+0x374>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0x308>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c81 	.word	0x08005c81
 8005c6c:	08005c89 	.word	0x08005c89
 8005c70:	08005c91 	.word	0x08005c91
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005cc5 	.word	0x08005cc5
 8005c7c:	08005ccd 	.word	0x08005ccd
 8005c80:	2300      	movs	r3, #0
 8005c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c86:	e153      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c8e:	e14f      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005c90:	2308      	movs	r3, #8
 8005c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c96:	e14b      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005c98:	2310      	movs	r3, #16
 8005c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9e:	e147      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ca0:	cfff69f3 	.word	0xcfff69f3
 8005ca4:	58000c00 	.word	0x58000c00
 8005ca8:	11fff4ff 	.word	0x11fff4ff
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	58024400 	.word	0x58024400
 8005cb4:	40004400 	.word	0x40004400
 8005cb8:	40004800 	.word	0x40004800
 8005cbc:	40004c00 	.word	0x40004c00
 8005cc0:	40005000 	.word	0x40005000
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cca:	e131      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ccc:	2340      	movs	r3, #64	; 0x40
 8005cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cd2:	e12d      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cda:	bf00      	nop
 8005cdc:	e128      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4ab6      	ldr	r2, [pc, #728]	; (8005fbc <UART_SetConfig+0x65c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d178      	bne.n	8005dda <UART_SetConfig+0x47a>
 8005ce8:	4bb5      	ldr	r3, [pc, #724]	; (8005fc0 <UART_SetConfig+0x660>)
 8005cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cf0:	2b28      	cmp	r3, #40	; 0x28
 8005cf2:	d86d      	bhi.n	8005dd0 <UART_SetConfig+0x470>
 8005cf4:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0x39c>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005da1 	.word	0x08005da1
 8005d00:	08005dd1 	.word	0x08005dd1
 8005d04:	08005dd1 	.word	0x08005dd1
 8005d08:	08005dd1 	.word	0x08005dd1
 8005d0c:	08005dd1 	.word	0x08005dd1
 8005d10:	08005dd1 	.word	0x08005dd1
 8005d14:	08005dd1 	.word	0x08005dd1
 8005d18:	08005dd1 	.word	0x08005dd1
 8005d1c:	08005da9 	.word	0x08005da9
 8005d20:	08005dd1 	.word	0x08005dd1
 8005d24:	08005dd1 	.word	0x08005dd1
 8005d28:	08005dd1 	.word	0x08005dd1
 8005d2c:	08005dd1 	.word	0x08005dd1
 8005d30:	08005dd1 	.word	0x08005dd1
 8005d34:	08005dd1 	.word	0x08005dd1
 8005d38:	08005dd1 	.word	0x08005dd1
 8005d3c:	08005db1 	.word	0x08005db1
 8005d40:	08005dd1 	.word	0x08005dd1
 8005d44:	08005dd1 	.word	0x08005dd1
 8005d48:	08005dd1 	.word	0x08005dd1
 8005d4c:	08005dd1 	.word	0x08005dd1
 8005d50:	08005dd1 	.word	0x08005dd1
 8005d54:	08005dd1 	.word	0x08005dd1
 8005d58:	08005dd1 	.word	0x08005dd1
 8005d5c:	08005db9 	.word	0x08005db9
 8005d60:	08005dd1 	.word	0x08005dd1
 8005d64:	08005dd1 	.word	0x08005dd1
 8005d68:	08005dd1 	.word	0x08005dd1
 8005d6c:	08005dd1 	.word	0x08005dd1
 8005d70:	08005dd1 	.word	0x08005dd1
 8005d74:	08005dd1 	.word	0x08005dd1
 8005d78:	08005dd1 	.word	0x08005dd1
 8005d7c:	08005dc1 	.word	0x08005dc1
 8005d80:	08005dd1 	.word	0x08005dd1
 8005d84:	08005dd1 	.word	0x08005dd1
 8005d88:	08005dd1 	.word	0x08005dd1
 8005d8c:	08005dd1 	.word	0x08005dd1
 8005d90:	08005dd1 	.word	0x08005dd1
 8005d94:	08005dd1 	.word	0x08005dd1
 8005d98:	08005dd1 	.word	0x08005dd1
 8005d9c:	08005dc9 	.word	0x08005dc9
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da6:	e0c3      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005da8:	2304      	movs	r3, #4
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e0bf      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005db0:	2308      	movs	r3, #8
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db6:	e0bb      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005db8:	2310      	movs	r3, #16
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e0b7      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc6:	e0b3      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005dc8:	2340      	movs	r3, #64	; 0x40
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dce:	e0af      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005dd0:	2380      	movs	r3, #128	; 0x80
 8005dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd6:	bf00      	nop
 8005dd8:	e0aa      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a79      	ldr	r2, [pc, #484]	; (8005fc4 <UART_SetConfig+0x664>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d132      	bne.n	8005e4a <UART_SetConfig+0x4ea>
 8005de4:	4b76      	ldr	r3, [pc, #472]	; (8005fc0 <UART_SetConfig+0x660>)
 8005de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	2b05      	cmp	r3, #5
 8005dee:	d827      	bhi.n	8005e40 <UART_SetConfig+0x4e0>
 8005df0:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <UART_SetConfig+0x498>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005e11 	.word	0x08005e11
 8005dfc:	08005e19 	.word	0x08005e19
 8005e00:	08005e21 	.word	0x08005e21
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e16:	e08b      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1e:	e087      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005e20:	2308      	movs	r3, #8
 8005e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e26:	e083      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2e:	e07f      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005e30:	2320      	movs	r3, #32
 8005e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e36:	e07b      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005e38:	2340      	movs	r3, #64	; 0x40
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	e077      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	bf00      	nop
 8005e48:	e072      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a5e      	ldr	r2, [pc, #376]	; (8005fc8 <UART_SetConfig+0x668>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d132      	bne.n	8005eba <UART_SetConfig+0x55a>
 8005e54:	4b5a      	ldr	r3, [pc, #360]	; (8005fc0 <UART_SetConfig+0x660>)
 8005e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	2b05      	cmp	r3, #5
 8005e5e:	d827      	bhi.n	8005eb0 <UART_SetConfig+0x550>
 8005e60:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <UART_SetConfig+0x508>)
 8005e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e66:	bf00      	nop
 8005e68:	08005e81 	.word	0x08005e81
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005e91 	.word	0x08005e91
 8005e74:	08005e99 	.word	0x08005e99
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e053      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e04f      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e04b      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e047      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e043      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	e03f      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb6:	bf00      	nop
 8005eb8:	e03a      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a43      	ldr	r2, [pc, #268]	; (8005fcc <UART_SetConfig+0x66c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d132      	bne.n	8005f2a <UART_SetConfig+0x5ca>
 8005ec4:	4b3e      	ldr	r3, [pc, #248]	; (8005fc0 <UART_SetConfig+0x660>)
 8005ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	2b05      	cmp	r3, #5
 8005ece:	d827      	bhi.n	8005f20 <UART_SetConfig+0x5c0>
 8005ed0:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <UART_SetConfig+0x578>)
 8005ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed6:	bf00      	nop
 8005ed8:	08005ef1 	.word	0x08005ef1
 8005edc:	08005ef9 	.word	0x08005ef9
 8005ee0:	08005f01 	.word	0x08005f01
 8005ee4:	08005f09 	.word	0x08005f09
 8005ee8:	08005f11 	.word	0x08005f11
 8005eec:	08005f19 	.word	0x08005f19
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef6:	e01b      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efe:	e017      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005f00:	2308      	movs	r3, #8
 8005f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f06:	e013      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0e:	e00f      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005f10:	2320      	movs	r3, #32
 8005f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f16:	e00b      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005f18:	2340      	movs	r3, #64	; 0x40
 8005f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1e:	e007      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f26:	bf00      	nop
 8005f28:	e002      	b.n	8005f30 <UART_SetConfig+0x5d0>
 8005f2a:	2380      	movs	r3, #128	; 0x80
 8005f2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a25      	ldr	r2, [pc, #148]	; (8005fcc <UART_SetConfig+0x66c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	f040 80b8 	bne.w	80060ac <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d019      	beq.n	8005f78 <UART_SetConfig+0x618>
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	dc04      	bgt.n	8005f52 <UART_SetConfig+0x5f2>
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d009      	beq.n	8005f60 <UART_SetConfig+0x600>
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d00b      	beq.n	8005f68 <UART_SetConfig+0x608>
 8005f50:	e042      	b.n	8005fd8 <UART_SetConfig+0x678>
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d02b      	beq.n	8005fae <UART_SetConfig+0x64e>
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d02c      	beq.n	8005fb4 <UART_SetConfig+0x654>
 8005f5a:	2b10      	cmp	r3, #16
 8005f5c:	d014      	beq.n	8005f88 <UART_SetConfig+0x628>
 8005f5e:	e03b      	b.n	8005fd8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f60:	f7fe faa0 	bl	80044a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f64:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f66:	e03d      	b.n	8005fe4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f68:	f107 0314 	add.w	r3, r7, #20
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fe faaf 	bl	80044d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f76:	e035      	b.n	8005fe4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f78:	f107 0308 	add.w	r3, r7, #8
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fe fbf3 	bl	8004768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f86:	e02d      	b.n	8005fe4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f88:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <UART_SetConfig+0x660>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d009      	beq.n	8005fa8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f94:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <UART_SetConfig+0x660>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	08db      	lsrs	r3, r3, #3
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	4a0c      	ldr	r2, [pc, #48]	; (8005fd0 <UART_SetConfig+0x670>)
 8005fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fa6:	e01d      	b.n	8005fe4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005fa8:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <UART_SetConfig+0x670>)
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fac:	e01a      	b.n	8005fe4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fae:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <UART_SetConfig+0x674>)
 8005fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb2:	e017      	b.n	8005fe4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fba:	e013      	b.n	8005fe4 <UART_SetConfig+0x684>
 8005fbc:	40011400 	.word	0x40011400
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	40007800 	.word	0x40007800
 8005fc8:	40007c00 	.word	0x40007c00
 8005fcc:	58000c00 	.word	0x58000c00
 8005fd0:	03d09000 	.word	0x03d09000
 8005fd4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005fe2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 824d 	beq.w	8006486 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	4aad      	ldr	r2, [pc, #692]	; (80062a8 <UART_SetConfig+0x948>)
 8005ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ffe:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	4413      	add	r3, r2
 800600a:	6a3a      	ldr	r2, [r7, #32]
 800600c:	429a      	cmp	r2, r3
 800600e:	d305      	bcc.n	800601c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006016:	6a3a      	ldr	r2, [r7, #32]
 8006018:	429a      	cmp	r2, r3
 800601a:	d903      	bls.n	8006024 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006022:	e230      	b.n	8006486 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	4618      	mov	r0, r3
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	4a9d      	ldr	r2, [pc, #628]	; (80062a8 <UART_SetConfig+0x948>)
 8006032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f04f 0400 	mov.w	r4, #0
 800603c:	461a      	mov	r2, r3
 800603e:	4623      	mov	r3, r4
 8006040:	f7fa f9a6 	bl	8000390 <__aeabi_uldivmod>
 8006044:	4603      	mov	r3, r0
 8006046:	460c      	mov	r4, r1
 8006048:	4619      	mov	r1, r3
 800604a:	4622      	mov	r2, r4
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	f04f 0400 	mov.w	r4, #0
 8006054:	0214      	lsls	r4, r2, #8
 8006056:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800605a:	020b      	lsls	r3, r1, #8
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6852      	ldr	r2, [r2, #4]
 8006060:	0852      	lsrs	r2, r2, #1
 8006062:	4611      	mov	r1, r2
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	eb13 0b01 	adds.w	fp, r3, r1
 800606c:	eb44 0c02 	adc.w	ip, r4, r2
 8006070:	4658      	mov	r0, fp
 8006072:	4661      	mov	r1, ip
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f04f 0400 	mov.w	r4, #0
 800607c:	461a      	mov	r2, r3
 800607e:	4623      	mov	r3, r4
 8006080:	f7fa f986 	bl	8000390 <__aeabi_uldivmod>
 8006084:	4603      	mov	r3, r0
 8006086:	460c      	mov	r4, r1
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006090:	d308      	bcc.n	80060a4 <UART_SetConfig+0x744>
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006098:	d204      	bcs.n	80060a4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a0:	60da      	str	r2, [r3, #12]
 80060a2:	e1f0      	b.n	8006486 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80060aa:	e1ec      	b.n	8006486 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b4:	f040 8100 	bne.w	80062b8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80060b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	f200 80b7 	bhi.w	8006230 <UART_SetConfig+0x8d0>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0x768>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	080061cd 	.word	0x080061cd
 80060cc:	080061d5 	.word	0x080061d5
 80060d0:	08006231 	.word	0x08006231
 80060d4:	08006231 	.word	0x08006231
 80060d8:	080061dd 	.word	0x080061dd
 80060dc:	08006231 	.word	0x08006231
 80060e0:	08006231 	.word	0x08006231
 80060e4:	08006231 	.word	0x08006231
 80060e8:	080061ed 	.word	0x080061ed
 80060ec:	08006231 	.word	0x08006231
 80060f0:	08006231 	.word	0x08006231
 80060f4:	08006231 	.word	0x08006231
 80060f8:	08006231 	.word	0x08006231
 80060fc:	08006231 	.word	0x08006231
 8006100:	08006231 	.word	0x08006231
 8006104:	08006231 	.word	0x08006231
 8006108:	080061fd 	.word	0x080061fd
 800610c:	08006231 	.word	0x08006231
 8006110:	08006231 	.word	0x08006231
 8006114:	08006231 	.word	0x08006231
 8006118:	08006231 	.word	0x08006231
 800611c:	08006231 	.word	0x08006231
 8006120:	08006231 	.word	0x08006231
 8006124:	08006231 	.word	0x08006231
 8006128:	08006231 	.word	0x08006231
 800612c:	08006231 	.word	0x08006231
 8006130:	08006231 	.word	0x08006231
 8006134:	08006231 	.word	0x08006231
 8006138:	08006231 	.word	0x08006231
 800613c:	08006231 	.word	0x08006231
 8006140:	08006231 	.word	0x08006231
 8006144:	08006231 	.word	0x08006231
 8006148:	08006223 	.word	0x08006223
 800614c:	08006231 	.word	0x08006231
 8006150:	08006231 	.word	0x08006231
 8006154:	08006231 	.word	0x08006231
 8006158:	08006231 	.word	0x08006231
 800615c:	08006231 	.word	0x08006231
 8006160:	08006231 	.word	0x08006231
 8006164:	08006231 	.word	0x08006231
 8006168:	08006231 	.word	0x08006231
 800616c:	08006231 	.word	0x08006231
 8006170:	08006231 	.word	0x08006231
 8006174:	08006231 	.word	0x08006231
 8006178:	08006231 	.word	0x08006231
 800617c:	08006231 	.word	0x08006231
 8006180:	08006231 	.word	0x08006231
 8006184:	08006231 	.word	0x08006231
 8006188:	08006231 	.word	0x08006231
 800618c:	08006231 	.word	0x08006231
 8006190:	08006231 	.word	0x08006231
 8006194:	08006231 	.word	0x08006231
 8006198:	08006231 	.word	0x08006231
 800619c:	08006231 	.word	0x08006231
 80061a0:	08006231 	.word	0x08006231
 80061a4:	08006231 	.word	0x08006231
 80061a8:	08006231 	.word	0x08006231
 80061ac:	08006231 	.word	0x08006231
 80061b0:	08006231 	.word	0x08006231
 80061b4:	08006231 	.word	0x08006231
 80061b8:	08006231 	.word	0x08006231
 80061bc:	08006231 	.word	0x08006231
 80061c0:	08006231 	.word	0x08006231
 80061c4:	08006231 	.word	0x08006231
 80061c8:	08006229 	.word	0x08006229
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061cc:	f7fd fa50 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 80061d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80061d2:	e033      	b.n	800623c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061d4:	f7fd fa62 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 80061d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80061da:	e02f      	b.n	800623c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061dc:	f107 0314 	add.w	r3, r7, #20
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fe f975 	bl	80044d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061ea:	e027      	b.n	800623c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ec:	f107 0308 	add.w	r3, r7, #8
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe fab9 	bl	8004768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061fa:	e01f      	b.n	800623c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061fc:	4b2b      	ldr	r3, [pc, #172]	; (80062ac <UART_SetConfig+0x94c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d009      	beq.n	800621c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006208:	4b28      	ldr	r3, [pc, #160]	; (80062ac <UART_SetConfig+0x94c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	08db      	lsrs	r3, r3, #3
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	4a27      	ldr	r2, [pc, #156]	; (80062b0 <UART_SetConfig+0x950>)
 8006214:	fa22 f303 	lsr.w	r3, r2, r3
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800621a:	e00f      	b.n	800623c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800621c:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <UART_SetConfig+0x950>)
 800621e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006220:	e00c      	b.n	800623c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006222:	4b24      	ldr	r3, [pc, #144]	; (80062b4 <UART_SetConfig+0x954>)
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006226:	e009      	b.n	800623c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800622e:	e005      	b.n	800623c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800623a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8121 	beq.w	8006486 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <UART_SetConfig+0x948>)
 800624a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800624e:	461a      	mov	r2, r3
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	fbb3 f3f2 	udiv	r3, r3, r2
 8006256:	005a      	lsls	r2, r3, #1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	085b      	lsrs	r3, r3, #1
 800625e:	441a      	add	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	b29b      	uxth	r3, r3
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	2b0f      	cmp	r3, #15
 8006270:	d916      	bls.n	80062a0 <UART_SetConfig+0x940>
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006278:	d212      	bcs.n	80062a0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	b29b      	uxth	r3, r3
 800627e:	f023 030f 	bic.w	r3, r3, #15
 8006282:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	b29b      	uxth	r3, r3
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	b29a      	uxth	r2, r3
 8006290:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006292:	4313      	orrs	r3, r2
 8006294:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800629c:	60da      	str	r2, [r3, #12]
 800629e:	e0f2      	b.n	8006486 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80062a6:	e0ee      	b.n	8006486 <UART_SetConfig+0xb26>
 80062a8:	0800b0f4 	.word	0x0800b0f4
 80062ac:	58024400 	.word	0x58024400
 80062b0:	03d09000 	.word	0x03d09000
 80062b4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80062b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	f200 80b7 	bhi.w	8006430 <UART_SetConfig+0xad0>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <UART_SetConfig+0x968>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080063cd 	.word	0x080063cd
 80062cc:	080063d5 	.word	0x080063d5
 80062d0:	08006431 	.word	0x08006431
 80062d4:	08006431 	.word	0x08006431
 80062d8:	080063dd 	.word	0x080063dd
 80062dc:	08006431 	.word	0x08006431
 80062e0:	08006431 	.word	0x08006431
 80062e4:	08006431 	.word	0x08006431
 80062e8:	080063ed 	.word	0x080063ed
 80062ec:	08006431 	.word	0x08006431
 80062f0:	08006431 	.word	0x08006431
 80062f4:	08006431 	.word	0x08006431
 80062f8:	08006431 	.word	0x08006431
 80062fc:	08006431 	.word	0x08006431
 8006300:	08006431 	.word	0x08006431
 8006304:	08006431 	.word	0x08006431
 8006308:	080063fd 	.word	0x080063fd
 800630c:	08006431 	.word	0x08006431
 8006310:	08006431 	.word	0x08006431
 8006314:	08006431 	.word	0x08006431
 8006318:	08006431 	.word	0x08006431
 800631c:	08006431 	.word	0x08006431
 8006320:	08006431 	.word	0x08006431
 8006324:	08006431 	.word	0x08006431
 8006328:	08006431 	.word	0x08006431
 800632c:	08006431 	.word	0x08006431
 8006330:	08006431 	.word	0x08006431
 8006334:	08006431 	.word	0x08006431
 8006338:	08006431 	.word	0x08006431
 800633c:	08006431 	.word	0x08006431
 8006340:	08006431 	.word	0x08006431
 8006344:	08006431 	.word	0x08006431
 8006348:	08006423 	.word	0x08006423
 800634c:	08006431 	.word	0x08006431
 8006350:	08006431 	.word	0x08006431
 8006354:	08006431 	.word	0x08006431
 8006358:	08006431 	.word	0x08006431
 800635c:	08006431 	.word	0x08006431
 8006360:	08006431 	.word	0x08006431
 8006364:	08006431 	.word	0x08006431
 8006368:	08006431 	.word	0x08006431
 800636c:	08006431 	.word	0x08006431
 8006370:	08006431 	.word	0x08006431
 8006374:	08006431 	.word	0x08006431
 8006378:	08006431 	.word	0x08006431
 800637c:	08006431 	.word	0x08006431
 8006380:	08006431 	.word	0x08006431
 8006384:	08006431 	.word	0x08006431
 8006388:	08006431 	.word	0x08006431
 800638c:	08006431 	.word	0x08006431
 8006390:	08006431 	.word	0x08006431
 8006394:	08006431 	.word	0x08006431
 8006398:	08006431 	.word	0x08006431
 800639c:	08006431 	.word	0x08006431
 80063a0:	08006431 	.word	0x08006431
 80063a4:	08006431 	.word	0x08006431
 80063a8:	08006431 	.word	0x08006431
 80063ac:	08006431 	.word	0x08006431
 80063b0:	08006431 	.word	0x08006431
 80063b4:	08006431 	.word	0x08006431
 80063b8:	08006431 	.word	0x08006431
 80063bc:	08006431 	.word	0x08006431
 80063c0:	08006431 	.word	0x08006431
 80063c4:	08006431 	.word	0x08006431
 80063c8:	08006429 	.word	0x08006429
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063cc:	f7fd f950 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 80063d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063d2:	e033      	b.n	800643c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063d4:	f7fd f962 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 80063d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063da:	e02f      	b.n	800643c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063dc:	f107 0314 	add.w	r3, r7, #20
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe f875 	bl	80044d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063ea:	e027      	b.n	800643c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ec:	f107 0308 	add.w	r3, r7, #8
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe f9b9 	bl	8004768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063fa:	e01f      	b.n	800643c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fc:	4b2c      	ldr	r3, [pc, #176]	; (80064b0 <UART_SetConfig+0xb50>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d009      	beq.n	800641c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006408:	4b29      	ldr	r3, [pc, #164]	; (80064b0 <UART_SetConfig+0xb50>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	08db      	lsrs	r3, r3, #3
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	4a28      	ldr	r2, [pc, #160]	; (80064b4 <UART_SetConfig+0xb54>)
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800641a:	e00f      	b.n	800643c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800641c:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <UART_SetConfig+0xb54>)
 800641e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006420:	e00c      	b.n	800643c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006422:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <UART_SetConfig+0xb58>)
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006426:	e009      	b.n	800643c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800642e:	e005      	b.n	800643c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800643a:	bf00      	nop
    }

    if (pclk != 0U)
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d021      	beq.n	8006486 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	4a1d      	ldr	r2, [pc, #116]	; (80064bc <UART_SetConfig+0xb5c>)
 8006448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800644c:	461a      	mov	r2, r3
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	fbb3 f2f2 	udiv	r2, r3, r2
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	441a      	add	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	fbb2 f3f3 	udiv	r3, r2, r3
 8006464:	b29b      	uxth	r3, r3
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	2b0f      	cmp	r3, #15
 800646c:	d908      	bls.n	8006480 <UART_SetConfig+0xb20>
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006474:	d204      	bcs.n	8006480 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	e002      	b.n	8006486 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80064a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3738      	adds	r7, #56	; 0x38
 80064aa:	46bd      	mov	sp, r7
 80064ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80064b0:	58024400 	.word	0x58024400
 80064b4:	03d09000 	.word	0x03d09000
 80064b8:	003d0900 	.word	0x003d0900
 80064bc:	0800b0f4 	.word	0x0800b0f4

080064c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01a      	beq.n	80065d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065be:	d10a      	bne.n	80065d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]
  }
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af02      	add	r7, sp, #8
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006614:	f7fb fae4 	bl	8001be0 <HAL_GetTick>
 8006618:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b08      	cmp	r3, #8
 8006626:	d10e      	bne.n	8006646 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f82c 	bl	8006694 <UART_WaitOnFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e022      	b.n	800668c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b04      	cmp	r3, #4
 8006652:	d10e      	bne.n	8006672 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f816 	bl	8006694 <UART_WaitOnFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e00c      	b.n	800668c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a4:	e062      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d05e      	beq.n	800676c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ae:	f7fb fa97 	bl	8001be0 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d302      	bcc.n	80066c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11d      	bne.n	8006700 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066d2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0201 	bic.w	r2, r2, #1
 80066e2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e045      	b.n	800678c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d02e      	beq.n	800676c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800671c:	d126      	bne.n	800676c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006726:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006736:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0201 	bic.w	r2, r2, #1
 8006746:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2220      	movs	r2, #32
 8006754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e00f      	b.n	800678c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69da      	ldr	r2, [r3, #28]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4013      	ands	r3, r2
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	429a      	cmp	r2, r3
 800677a:	bf0c      	ite	eq
 800677c:	2301      	moveq	r3, #1
 800677e:	2300      	movne	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	429a      	cmp	r2, r3
 8006788:	d08d      	beq.n	80066a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6899      	ldr	r1, [r3, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <UART_EndRxTransfer+0x44>)
 80067b8:	400b      	ands	r3, r1
 80067ba:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	effffffe 	.word	0xeffffffe

080067dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff f8a6 	bl	800594c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006816:	2b21      	cmp	r3, #33	; 0x21
 8006818:	d12a      	bne.n	8006870 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d110      	bne.n	8006848 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006834:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006844:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006846:	e013      	b.n	8006870 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684c:	781a      	ldrb	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800688a:	2b21      	cmp	r3, #33	; 0x21
 800688c:	d12f      	bne.n	80068ee <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d110      	bne.n	80068bc <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068a8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068b8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80068ba:	e018      	b.n	80068ee <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068d0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d6:	1c9a      	adds	r2, r3, #2
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006908:	2b21      	cmp	r3, #33	; 0x21
 800690a:	d13d      	bne.n	8006988 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006912:	81fb      	strh	r3, [r7, #14]
 8006914:	e035      	b.n	8006982 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d111      	bne.n	8006946 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006930:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006940:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006942:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006944:	e020      	b.n	8006988 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006950:	2b00      	cmp	r3, #0
 8006952:	d013      	beq.n	800697c <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006958:	781a      	ldrb	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800697c:	89fb      	ldrh	r3, [r7, #14]
 800697e:	3b01      	subs	r3, #1
 8006980:	81fb      	strh	r3, [r7, #14]
 8006982:	89fb      	ldrh	r3, [r7, #14]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1c6      	bne.n	8006916 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8006988:	bf00      	nop
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a2:	2b21      	cmp	r3, #33	; 0x21
 80069a4:	d142      	bne.n	8006a2c <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069ac:	81fb      	strh	r3, [r7, #14]
 80069ae:	e03a      	b.n	8006a26 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d111      	bne.n	80069e0 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80069ca:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069da:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80069dc:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80069de:	e025      	b.n	8006a2c <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d018      	beq.n	8006a20 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f2:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a02:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a08:	1c9a      	adds	r2, r3, #2
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006a20:	89fb      	ldrh	r3, [r7, #14]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	81fb      	strh	r3, [r7, #14]
 8006a26:	89fb      	ldrh	r3, [r7, #14]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1c1      	bne.n	80069b0 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a4e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fa fe5c 	bl	800171c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a64:	bf00      	nop
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a7a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a82:	2b22      	cmp	r3, #34	; 0x22
 8006a84:	d13b      	bne.n	8006afe <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a8e:	89bb      	ldrh	r3, [r7, #12]
 8006a90:	b2d9      	uxtb	r1, r3
 8006a92:	89fb      	ldrh	r3, [r7, #14]
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9a:	400a      	ands	r2, r1
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d122      	bne.n	8006b0e <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ad6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0201 	bic.w	r2, r2, #1
 8006ae6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fa fe20 	bl	800173c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006afc:	e007      	b.n	8006b0e <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	699a      	ldr	r2, [r3, #24]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0208 	orr.w	r2, r2, #8
 8006b0c:	619a      	str	r2, [r3, #24]
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b24:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2c:	2b22      	cmp	r3, #34	; 0x22
 8006b2e:	d13b      	bne.n	8006ba8 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b3e:	89ba      	ldrh	r2, [r7, #12]
 8006b40:	89fb      	ldrh	r3, [r7, #14]
 8006b42:	4013      	ands	r3, r2
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	1c9a      	adds	r2, r3, #2
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d122      	bne.n	8006bb8 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b80:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0201 	bic.w	r2, r2, #1
 8006b90:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7fa fdcb 	bl	800173c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ba6:	e007      	b.n	8006bb8 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0208 	orr.w	r2, r2, #8
 8006bb6:	619a      	str	r2, [r3, #24]
}
 8006bb8:	bf00      	nop
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bce:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd6:	2b22      	cmp	r3, #34	; 0x22
 8006bd8:	d166      	bne.n	8006ca8 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006be0:	81fb      	strh	r3, [r7, #14]
 8006be2:	e03d      	b.n	8006c60 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bec:	893b      	ldrh	r3, [r7, #8]
 8006bee:	b2d9      	uxtb	r1, r3
 8006bf0:	89bb      	ldrh	r3, [r7, #12]
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d119      	bne.n	8006c5a <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c34:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6899      	ldr	r1, [r3, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	4b1f      	ldr	r3, [pc, #124]	; (8006cc0 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8006c42:	400b      	ands	r3, r1
 8006c44:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fa fd71 	bl	800173c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006c5a:	89fb      	ldrh	r3, [r7, #14]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	81fb      	strh	r3, [r7, #14]
 8006c60:	89fb      	ldrh	r3, [r7, #14]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1be      	bne.n	8006be4 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c6c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c6e:	897b      	ldrh	r3, [r7, #10]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d021      	beq.n	8006cb8 <UART_RxISR_8BIT_FIFOEN+0xf8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c7a:	897a      	ldrh	r2, [r7, #10]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d21b      	bcs.n	8006cb8 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c8e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a0c      	ldr	r2, [pc, #48]	; (8006cc4 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006c94:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0220 	orr.w	r2, r2, #32
 8006ca4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ca6:	e007      	b.n	8006cb8 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0208 	orr.w	r2, r2, #8
 8006cb6:	619a      	str	r2, [r3, #24]
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	effffffe 	.word	0xeffffffe
 8006cc4:	08006a6d 	.word	0x08006a6d

08006cc8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006cd6:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cde:	2b22      	cmp	r3, #34	; 0x22
 8006ce0:	d166      	bne.n	8006db0 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ce8:	82fb      	strh	r3, [r7, #22]
 8006cea:	e03d      	b.n	8006d68 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf8:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006cfa:	8a3a      	ldrh	r2, [r7, #16]
 8006cfc:	8abb      	ldrh	r3, [r7, #20]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0a:	1c9a      	adds	r2, r3, #2
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d119      	bne.n	8006d62 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d3c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6899      	ldr	r1, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	4b1f      	ldr	r3, [pc, #124]	; (8006dc8 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8006d4a:	400b      	ands	r3, r1
 8006d4c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7fa fced 	bl	800173c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006d62:	8afb      	ldrh	r3, [r7, #22]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	82fb      	strh	r3, [r7, #22]
 8006d68:	8afb      	ldrh	r3, [r7, #22]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1be      	bne.n	8006cec <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d74:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d76:	8a7b      	ldrh	r3, [r7, #18]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d021      	beq.n	8006dc0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d82:	8a7a      	ldrh	r2, [r7, #18]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d21b      	bcs.n	8006dc0 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006d96:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a0c      	ldr	r2, [pc, #48]	; (8006dcc <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006d9c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0220 	orr.w	r2, r2, #32
 8006dac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dae:	e007      	b.n	8006dc0 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699a      	ldr	r2, [r3, #24]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0208 	orr.w	r2, r2, #8
 8006dbe:	619a      	str	r2, [r3, #24]
}
 8006dc0:	bf00      	nop
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	effffffe 	.word	0xeffffffe
 8006dcc:	08006b17 	.word	0x08006b17

08006dd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d101      	bne.n	8006e22 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e027      	b.n	8006e72 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2224      	movs	r2, #36	; 0x24
 8006e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e92:	2302      	movs	r3, #2
 8006e94:	e02d      	b.n	8006ef2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2224      	movs	r2, #36	; 0x24
 8006ea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0201 	bic.w	r2, r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f850 	bl	8006f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e02d      	b.n	8006f6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2224      	movs	r2, #36	; 0x24
 8006f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0201 	bic.w	r2, r2, #1
 8006f38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f812 	bl	8006f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b089      	sub	sp, #36	; 0x24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006f80:	4a2f      	ldr	r2, [pc, #188]	; (8007040 <UARTEx_SetNbDataToProcess+0xc8>)
 8006f82:	f107 0314 	add.w	r3, r7, #20
 8006f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f8a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006f8e:	4a2d      	ldr	r2, [pc, #180]	; (8007044 <UARTEx_SetNbDataToProcess+0xcc>)
 8006f90:	f107 030c 	add.w	r3, r7, #12
 8006f94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f98:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d108      	bne.n	8006fb6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fb4:	e03d      	b.n	8007032 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fb6:	2310      	movs	r3, #16
 8006fb8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fba:	2310      	movs	r3, #16
 8006fbc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	0e5b      	lsrs	r3, r3, #25
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	0f5b      	lsrs	r3, r3, #29
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006fde:	7fbb      	ldrb	r3, [r7, #30]
 8006fe0:	7f3a      	ldrb	r2, [r7, #28]
 8006fe2:	f107 0120 	add.w	r1, r7, #32
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006fec:	fb02 f303 	mul.w	r3, r2, r3
 8006ff0:	7f3a      	ldrb	r2, [r7, #28]
 8006ff2:	f107 0120 	add.w	r1, r7, #32
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006ffc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007000:	b29a      	uxth	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007008:	7ffb      	ldrb	r3, [r7, #31]
 800700a:	7f7a      	ldrb	r2, [r7, #29]
 800700c:	f107 0120 	add.w	r1, r7, #32
 8007010:	440a      	add	r2, r1
 8007012:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007016:	fb02 f303 	mul.w	r3, r2, r3
 800701a:	7f7a      	ldrb	r2, [r7, #29]
 800701c:	f107 0120 	add.w	r1, r7, #32
 8007020:	440a      	add	r2, r1
 8007022:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007026:	fb93 f3f2 	sdiv	r3, r3, r2
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007032:	bf00      	nop
 8007034:	3724      	adds	r7, #36	; 0x24
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	0800b0c8 	.word	0x0800b0c8
 8007044:	0800b0d0 	.word	0x0800b0d0

08007048 <arm_std_f32>:
 8007048:	2901      	cmp	r1, #1
 800704a:	d065      	beq.n	8007118 <arm_std_f32+0xd0>
 800704c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8007134 <arm_std_f32+0xec>
 8007050:	b530      	push	{r4, r5, lr}
 8007052:	088d      	lsrs	r5, r1, #2
 8007054:	b083      	sub	sp, #12
 8007056:	d062      	beq.n	800711e <arm_std_f32+0xd6>
 8007058:	eef0 6a65 	vmov.f32	s13, s11
 800705c:	f100 0310 	add.w	r3, r0, #16
 8007060:	462c      	mov	r4, r5
 8007062:	ed53 7a04 	vldr	s15, [r3, #-16]
 8007066:	3c01      	subs	r4, #1
 8007068:	ed13 7a03 	vldr	s14, [r3, #-12]
 800706c:	f103 0310 	add.w	r3, r3, #16
 8007070:	ee27 4aa7 	vmul.f32	s8, s15, s15
 8007074:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8007078:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800707c:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8007080:	ee27 5a07 	vmul.f32	s10, s14, s14
 8007084:	ee74 5a25 	vadd.f32	s11, s8, s11
 8007088:	ee36 7a87 	vadd.f32	s14, s13, s14
 800708c:	ee64 6aa4 	vmul.f32	s13, s9, s9
 8007090:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007094:	ee77 7a24 	vadd.f32	s15, s14, s9
 8007098:	ee26 7a06 	vmul.f32	s14, s12, s12
 800709c:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80070a0:	ee77 6a86 	vadd.f32	s13, s15, s12
 80070a4:	ee77 5a25 	vadd.f32	s11, s14, s11
 80070a8:	d1db      	bne.n	8007062 <arm_std_f32+0x1a>
 80070aa:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80070ae:	f011 0303 	ands.w	r3, r1, #3
 80070b2:	d009      	beq.n	80070c8 <arm_std_f32+0x80>
 80070b4:	ecf0 7a01 	vldmia	r0!, {s15}
 80070b8:	3b01      	subs	r3, #1
 80070ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80070be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80070c2:	ee75 5a87 	vadd.f32	s11, s11, s14
 80070c6:	d1f5      	bne.n	80070b4 <arm_std_f32+0x6c>
 80070c8:	ee07 1a90 	vmov	s15, r1
 80070cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80070d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d8:	ee77 6ac6 	vsub.f32	s13, s15, s12
 80070dc:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80070e0:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 80070e4:	ee27 7a07 	vmul.f32	s14, s14, s14
 80070e8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80070ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80070f0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80070f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f8:	db0a      	blt.n	8007110 <arm_std_f32+0xc8>
 80070fa:	eeb1 0ac7 	vsqrt.f32	s0, s14
 80070fe:	eeb4 0a40 	vcmp.f32	s0, s0
 8007102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007106:	d10d      	bne.n	8007124 <arm_std_f32+0xdc>
 8007108:	ed82 0a00 	vstr	s0, [r2]
 800710c:	b003      	add	sp, #12
 800710e:	bd30      	pop	{r4, r5, pc}
 8007110:	2300      	movs	r3, #0
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	b003      	add	sp, #12
 8007116:	bd30      	pop	{r4, r5, pc}
 8007118:	2300      	movs	r3, #0
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	4770      	bx	lr
 800711e:	eef0 6a65 	vmov.f32	s13, s11
 8007122:	e7c4      	b.n	80070ae <arm_std_f32+0x66>
 8007124:	eeb0 0a47 	vmov.f32	s0, s14
 8007128:	9201      	str	r2, [sp, #4]
 800712a:	f000 f8dd 	bl	80072e8 <sqrtf>
 800712e:	9a01      	ldr	r2, [sp, #4]
 8007130:	e7ea      	b.n	8007108 <arm_std_f32+0xc0>
 8007132:	bf00      	nop
 8007134:	00000000 	.word	0x00000000

08007138 <arm_power_f32>:
 8007138:	b430      	push	{r4, r5}
 800713a:	088d      	lsrs	r5, r1, #2
 800713c:	d031      	beq.n	80071a2 <arm_power_f32+0x6a>
 800713e:	f100 0310 	add.w	r3, r0, #16
 8007142:	462c      	mov	r4, r5
 8007144:	ed9f 5a18 	vldr	s10, [pc, #96]	; 80071a8 <arm_power_f32+0x70>
 8007148:	ed53 6a04 	vldr	s13, [r3, #-16]
 800714c:	3c01      	subs	r4, #1
 800714e:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007152:	f103 0310 	add.w	r3, r3, #16
 8007156:	ee26 6aa6 	vmul.f32	s12, s13, s13
 800715a:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800715e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8007162:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 8007166:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800716a:	ee76 7a05 	vadd.f32	s15, s12, s10
 800716e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8007172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800717a:	ee35 5aa7 	vadd.f32	s10, s11, s15
 800717e:	d1e3      	bne.n	8007148 <arm_power_f32+0x10>
 8007180:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007184:	f011 0103 	ands.w	r1, r1, #3
 8007188:	d007      	beq.n	800719a <arm_power_f32+0x62>
 800718a:	ecb0 6a01 	vldmia	r0!, {s12}
 800718e:	3901      	subs	r1, #1
 8007190:	ee26 6a06 	vmul.f32	s12, s12, s12
 8007194:	ee35 5a06 	vadd.f32	s10, s10, s12
 8007198:	d1f7      	bne.n	800718a <arm_power_f32+0x52>
 800719a:	ed82 5a00 	vstr	s10, [r2]
 800719e:	bc30      	pop	{r4, r5}
 80071a0:	4770      	bx	lr
 80071a2:	ed9f 5a01 	vldr	s10, [pc, #4]	; 80071a8 <arm_power_f32+0x70>
 80071a6:	e7ed      	b.n	8007184 <arm_power_f32+0x4c>
 80071a8:	00000000 	.word	0x00000000

080071ac <arm_mean_f32>:
 80071ac:	b430      	push	{r4, r5}
 80071ae:	088d      	lsrs	r5, r1, #2
 80071b0:	d02d      	beq.n	800720e <arm_mean_f32+0x62>
 80071b2:	f100 0310 	add.w	r3, r0, #16
 80071b6:	462c      	mov	r4, r5
 80071b8:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007214 <arm_mean_f32+0x68>
 80071bc:	ed13 7a04 	vldr	s14, [r3, #-16]
 80071c0:	3c01      	subs	r4, #1
 80071c2:	ed13 6a03 	vldr	s12, [r3, #-12]
 80071c6:	f103 0310 	add.w	r3, r3, #16
 80071ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ce:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 80071d2:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 80071d6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80071da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e2:	d1eb      	bne.n	80071bc <arm_mean_f32+0x10>
 80071e4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80071e8:	f011 0303 	ands.w	r3, r1, #3
 80071ec:	d005      	beq.n	80071fa <arm_mean_f32+0x4e>
 80071ee:	ecb0 7a01 	vldmia	r0!, {s14}
 80071f2:	3b01      	subs	r3, #1
 80071f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071f8:	d1f9      	bne.n	80071ee <arm_mean_f32+0x42>
 80071fa:	ee07 1a10 	vmov	s14, r1
 80071fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007202:	bc30      	pop	{r4, r5}
 8007204:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007208:	edc2 6a00 	vstr	s13, [r2]
 800720c:	4770      	bx	lr
 800720e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007214 <arm_mean_f32+0x68>
 8007212:	e7e9      	b.n	80071e8 <arm_mean_f32+0x3c>
 8007214:	00000000 	.word	0x00000000

08007218 <arm_max_f32>:
 8007218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800721c:	1e4d      	subs	r5, r1, #1
 800721e:	f100 0c04 	add.w	ip, r0, #4
 8007222:	edd0 7a00 	vldr	s15, [r0]
 8007226:	ea5f 0995 	movs.w	r9, r5, lsr #2
 800722a:	d056      	beq.n	80072da <arm_max_f32+0xc2>
 800722c:	3014      	adds	r0, #20
 800722e:	46c8      	mov	r8, r9
 8007230:	2404      	movs	r4, #4
 8007232:	2600      	movs	r6, #0
 8007234:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007238:	f1a4 0a03 	sub.w	sl, r4, #3
 800723c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007240:	f1a4 0e02 	sub.w	lr, r4, #2
 8007244:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007248:	ed10 7a02 	vldr	s14, [r0, #-8]
 800724c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007250:	1e67      	subs	r7, r4, #1
 8007252:	3010      	adds	r0, #16
 8007254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007258:	bfc8      	it	gt
 800725a:	eef0 7a46 	vmovgt.f32	s15, s12
 800725e:	bfc8      	it	gt
 8007260:	4656      	movgt	r6, sl
 8007262:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726a:	bf48      	it	mi
 800726c:	eef0 7a66 	vmovmi.f32	s15, s13
 8007270:	bf48      	it	mi
 8007272:	4676      	movmi	r6, lr
 8007274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727c:	bf48      	it	mi
 800727e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007282:	bf48      	it	mi
 8007284:	463e      	movmi	r6, r7
 8007286:	eef4 7ae5 	vcmpe.f32	s15, s11
 800728a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728e:	bf48      	it	mi
 8007290:	4626      	movmi	r6, r4
 8007292:	bf48      	it	mi
 8007294:	eef0 7a65 	vmovmi.f32	s15, s11
 8007298:	f1b8 0801 	subs.w	r8, r8, #1
 800729c:	f104 0404 	add.w	r4, r4, #4
 80072a0:	d1c8      	bne.n	8007234 <arm_max_f32+0x1c>
 80072a2:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 80072a6:	f015 0003 	ands.w	r0, r5, #3
 80072aa:	d018      	beq.n	80072de <arm_max_f32+0xc6>
 80072ac:	1a08      	subs	r0, r1, r0
 80072ae:	ecbc 7a01 	vldmia	ip!, {s14}
 80072b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80072b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ba:	bfc8      	it	gt
 80072bc:	4606      	movgt	r6, r0
 80072be:	f100 0001 	add.w	r0, r0, #1
 80072c2:	bfd8      	it	le
 80072c4:	eeb0 7a67 	vmovle.f32	s14, s15
 80072c8:	4281      	cmp	r1, r0
 80072ca:	eef0 7a47 	vmov.f32	s15, s14
 80072ce:	d1ee      	bne.n	80072ae <arm_max_f32+0x96>
 80072d0:	ed82 7a00 	vstr	s14, [r2]
 80072d4:	601e      	str	r6, [r3, #0]
 80072d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072da:	464e      	mov	r6, r9
 80072dc:	e7e3      	b.n	80072a6 <arm_max_f32+0x8e>
 80072de:	eeb0 7a67 	vmov.f32	s14, s15
 80072e2:	e7f5      	b.n	80072d0 <arm_max_f32+0xb8>

080072e4 <atan2f>:
 80072e4:	f000 b850 	b.w	8007388 <__ieee754_atan2f>

080072e8 <sqrtf>:
 80072e8:	b500      	push	{lr}
 80072ea:	ed2d 8b02 	vpush	{d8}
 80072ee:	b08b      	sub	sp, #44	; 0x2c
 80072f0:	eeb0 8a40 	vmov.f32	s16, s0
 80072f4:	f000 f8f2 	bl	80074dc <__ieee754_sqrtf>
 80072f8:	4b21      	ldr	r3, [pc, #132]	; (8007380 <sqrtf+0x98>)
 80072fa:	f993 3000 	ldrsb.w	r3, [r3]
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	d028      	beq.n	8007354 <sqrtf+0x6c>
 8007302:	eeb4 8a48 	vcmp.f32	s16, s16
 8007306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730a:	d623      	bvs.n	8007354 <sqrtf+0x6c>
 800730c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	d51e      	bpl.n	8007354 <sqrtf+0x6c>
 8007316:	2201      	movs	r2, #1
 8007318:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800731c:	9200      	str	r2, [sp, #0]
 800731e:	4a19      	ldr	r2, [pc, #100]	; (8007384 <sqrtf+0x9c>)
 8007320:	9201      	str	r2, [sp, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	9208      	str	r2, [sp, #32]
 8007326:	ed8d 8b04 	vstr	d8, [sp, #16]
 800732a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800732e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8007378 <sqrtf+0x90>
 8007332:	b9a3      	cbnz	r3, 800735e <sqrtf+0x76>
 8007334:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007338:	4668      	mov	r0, sp
 800733a:	f000 f8d2 	bl	80074e2 <matherr>
 800733e:	b1a0      	cbz	r0, 800736a <sqrtf+0x82>
 8007340:	9b08      	ldr	r3, [sp, #32]
 8007342:	b11b      	cbz	r3, 800734c <sqrtf+0x64>
 8007344:	f000 f9aa 	bl	800769c <__errno>
 8007348:	9b08      	ldr	r3, [sp, #32]
 800734a:	6003      	str	r3, [r0, #0]
 800734c:	ed9d 0b06 	vldr	d0, [sp, #24]
 8007350:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007354:	b00b      	add	sp, #44	; 0x2c
 8007356:	ecbd 8b02 	vpop	{d8}
 800735a:	f85d fb04 	ldr.w	pc, [sp], #4
 800735e:	2b02      	cmp	r3, #2
 8007360:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8007364:	ed8d 6b06 	vstr	d6, [sp, #24]
 8007368:	d1e6      	bne.n	8007338 <sqrtf+0x50>
 800736a:	f000 f997 	bl	800769c <__errno>
 800736e:	2321      	movs	r3, #33	; 0x21
 8007370:	6003      	str	r3, [r0, #0]
 8007372:	e7e5      	b.n	8007340 <sqrtf+0x58>
 8007374:	f3af 8000 	nop.w
	...
 8007380:	2400000d 	.word	0x2400000d
 8007384:	0800b10c 	.word	0x0800b10c

08007388 <__ieee754_atan2f>:
 8007388:	ee10 2a90 	vmov	r2, s1
 800738c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007390:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007394:	b510      	push	{r4, lr}
 8007396:	eef0 7a40 	vmov.f32	s15, s0
 800739a:	dc06      	bgt.n	80073aa <__ieee754_atan2f+0x22>
 800739c:	ee10 0a10 	vmov	r0, s0
 80073a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80073a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80073a8:	dd04      	ble.n	80073b4 <__ieee754_atan2f+0x2c>
 80073aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80073ae:	eeb0 0a67 	vmov.f32	s0, s15
 80073b2:	bd10      	pop	{r4, pc}
 80073b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80073b8:	d103      	bne.n	80073c2 <__ieee754_atan2f+0x3a>
 80073ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073be:	f000 b893 	b.w	80074e8 <atanf>
 80073c2:	1794      	asrs	r4, r2, #30
 80073c4:	f004 0402 	and.w	r4, r4, #2
 80073c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80073cc:	b93b      	cbnz	r3, 80073de <__ieee754_atan2f+0x56>
 80073ce:	2c02      	cmp	r4, #2
 80073d0:	d06b      	beq.n	80074aa <__ieee754_atan2f+0x122>
 80073d2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80074b0 <__ieee754_atan2f+0x128>
 80073d6:	2c03      	cmp	r4, #3
 80073d8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80073dc:	e7e7      	b.n	80073ae <__ieee754_atan2f+0x26>
 80073de:	b939      	cbnz	r1, 80073f0 <__ieee754_atan2f+0x68>
 80073e0:	eddf 7a34 	vldr	s15, [pc, #208]	; 80074b4 <__ieee754_atan2f+0x12c>
 80073e4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80074b8 <__ieee754_atan2f+0x130>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	fe67 7a87 	vselge.f32	s15, s15, s14
 80073ee:	e7de      	b.n	80073ae <__ieee754_atan2f+0x26>
 80073f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80073f4:	d121      	bne.n	800743a <__ieee754_atan2f+0xb2>
 80073f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80073fa:	d111      	bne.n	8007420 <__ieee754_atan2f+0x98>
 80073fc:	2c02      	cmp	r4, #2
 80073fe:	d009      	beq.n	8007414 <__ieee754_atan2f+0x8c>
 8007400:	2c03      	cmp	r4, #3
 8007402:	d00a      	beq.n	800741a <__ieee754_atan2f+0x92>
 8007404:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80074bc <__ieee754_atan2f+0x134>
 8007408:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80074c0 <__ieee754_atan2f+0x138>
 800740c:	2c01      	cmp	r4, #1
 800740e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8007412:	e7cc      	b.n	80073ae <__ieee754_atan2f+0x26>
 8007414:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80074c4 <__ieee754_atan2f+0x13c>
 8007418:	e7c9      	b.n	80073ae <__ieee754_atan2f+0x26>
 800741a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80074c8 <__ieee754_atan2f+0x140>
 800741e:	e7c6      	b.n	80073ae <__ieee754_atan2f+0x26>
 8007420:	2c02      	cmp	r4, #2
 8007422:	d042      	beq.n	80074aa <__ieee754_atan2f+0x122>
 8007424:	2c03      	cmp	r4, #3
 8007426:	d005      	beq.n	8007434 <__ieee754_atan2f+0xac>
 8007428:	2c01      	cmp	r4, #1
 800742a:	eddf 7a28 	vldr	s15, [pc, #160]	; 80074cc <__ieee754_atan2f+0x144>
 800742e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80074d0 <__ieee754_atan2f+0x148>
 8007432:	e7ec      	b.n	800740e <__ieee754_atan2f+0x86>
 8007434:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80074b0 <__ieee754_atan2f+0x128>
 8007438:	e7b9      	b.n	80073ae <__ieee754_atan2f+0x26>
 800743a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800743e:	d0cf      	beq.n	80073e0 <__ieee754_atan2f+0x58>
 8007440:	1a5b      	subs	r3, r3, r1
 8007442:	15db      	asrs	r3, r3, #23
 8007444:	2b3c      	cmp	r3, #60	; 0x3c
 8007446:	dc1a      	bgt.n	800747e <__ieee754_atan2f+0xf6>
 8007448:	2a00      	cmp	r2, #0
 800744a:	da01      	bge.n	8007450 <__ieee754_atan2f+0xc8>
 800744c:	333c      	adds	r3, #60	; 0x3c
 800744e:	db19      	blt.n	8007484 <__ieee754_atan2f+0xfc>
 8007450:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007454:	f000 f91a 	bl	800768c <fabsf>
 8007458:	f000 f846 	bl	80074e8 <atanf>
 800745c:	eef0 7a40 	vmov.f32	s15, s0
 8007460:	2c01      	cmp	r4, #1
 8007462:	d012      	beq.n	800748a <__ieee754_atan2f+0x102>
 8007464:	2c02      	cmp	r4, #2
 8007466:	d017      	beq.n	8007498 <__ieee754_atan2f+0x110>
 8007468:	2c00      	cmp	r4, #0
 800746a:	d0a0      	beq.n	80073ae <__ieee754_atan2f+0x26>
 800746c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80074d4 <__ieee754_atan2f+0x14c>
 8007470:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007474:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80074d8 <__ieee754_atan2f+0x150>
 8007478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800747c:	e797      	b.n	80073ae <__ieee754_atan2f+0x26>
 800747e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80074b4 <__ieee754_atan2f+0x12c>
 8007482:	e7ed      	b.n	8007460 <__ieee754_atan2f+0xd8>
 8007484:	eddf 7a12 	vldr	s15, [pc, #72]	; 80074d0 <__ieee754_atan2f+0x148>
 8007488:	e7ea      	b.n	8007460 <__ieee754_atan2f+0xd8>
 800748a:	ee17 3a90 	vmov	r3, s15
 800748e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	e78a      	b.n	80073ae <__ieee754_atan2f+0x26>
 8007498:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80074d4 <__ieee754_atan2f+0x14c>
 800749c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074a0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80074d8 <__ieee754_atan2f+0x150>
 80074a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074a8:	e781      	b.n	80073ae <__ieee754_atan2f+0x26>
 80074aa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80074d8 <__ieee754_atan2f+0x150>
 80074ae:	e77e      	b.n	80073ae <__ieee754_atan2f+0x26>
 80074b0:	c0490fdb 	.word	0xc0490fdb
 80074b4:	3fc90fdb 	.word	0x3fc90fdb
 80074b8:	bfc90fdb 	.word	0xbfc90fdb
 80074bc:	bf490fdb 	.word	0xbf490fdb
 80074c0:	3f490fdb 	.word	0x3f490fdb
 80074c4:	4016cbe4 	.word	0x4016cbe4
 80074c8:	c016cbe4 	.word	0xc016cbe4
 80074cc:	80000000 	.word	0x80000000
 80074d0:	00000000 	.word	0x00000000
 80074d4:	33bbbd2e 	.word	0x33bbbd2e
 80074d8:	40490fdb 	.word	0x40490fdb

080074dc <__ieee754_sqrtf>:
 80074dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80074e0:	4770      	bx	lr

080074e2 <matherr>:
 80074e2:	2000      	movs	r0, #0
 80074e4:	4770      	bx	lr
	...

080074e8 <atanf>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	ee10 5a10 	vmov	r5, s0
 80074ee:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80074f2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80074f6:	eef0 7a40 	vmov.f32	s15, s0
 80074fa:	db0f      	blt.n	800751c <atanf+0x34>
 80074fc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007500:	dd04      	ble.n	800750c <atanf+0x24>
 8007502:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007506:	eeb0 0a67 	vmov.f32	s0, s15
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007640 <atanf+0x158>
 8007510:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8007644 <atanf+0x15c>
 8007514:	2d00      	cmp	r5, #0
 8007516:	fe77 7a87 	vselgt.f32	s15, s15, s14
 800751a:	e7f4      	b.n	8007506 <atanf+0x1e>
 800751c:	4b4a      	ldr	r3, [pc, #296]	; (8007648 <atanf+0x160>)
 800751e:	429c      	cmp	r4, r3
 8007520:	dc10      	bgt.n	8007544 <atanf+0x5c>
 8007522:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007526:	da0a      	bge.n	800753e <atanf+0x56>
 8007528:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800764c <atanf+0x164>
 800752c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007534:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753c:	dce3      	bgt.n	8007506 <atanf+0x1e>
 800753e:	f04f 33ff 	mov.w	r3, #4294967295
 8007542:	e013      	b.n	800756c <atanf+0x84>
 8007544:	f000 f8a2 	bl	800768c <fabsf>
 8007548:	4b41      	ldr	r3, [pc, #260]	; (8007650 <atanf+0x168>)
 800754a:	429c      	cmp	r4, r3
 800754c:	dc4f      	bgt.n	80075ee <atanf+0x106>
 800754e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007552:	429c      	cmp	r4, r3
 8007554:	dc41      	bgt.n	80075da <atanf+0xf2>
 8007556:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800755a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800755e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007562:	2300      	movs	r3, #0
 8007564:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007568:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007572:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007654 <atanf+0x16c>
 8007576:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007658 <atanf+0x170>
 800757a:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800765c <atanf+0x174>
 800757e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007582:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007586:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007660 <atanf+0x178>
 800758a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800758e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007664 <atanf+0x17c>
 8007592:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007596:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007668 <atanf+0x180>
 800759a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800759e:	eddf 5a33 	vldr	s11, [pc, #204]	; 800766c <atanf+0x184>
 80075a2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80075a6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007670 <atanf+0x188>
 80075aa:	eea6 5a87 	vfma.f32	s10, s13, s14
 80075ae:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007674 <atanf+0x18c>
 80075b2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80075b6:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007678 <atanf+0x190>
 80075ba:	eea7 5a26 	vfma.f32	s10, s14, s13
 80075be:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800767c <atanf+0x194>
 80075c2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80075c6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80075ca:	eea5 7a86 	vfma.f32	s14, s11, s12
 80075ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075d2:	d121      	bne.n	8007618 <atanf+0x130>
 80075d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075d8:	e795      	b.n	8007506 <atanf+0x1e>
 80075da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80075de:	ee30 7a67 	vsub.f32	s14, s0, s15
 80075e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80075e6:	2301      	movs	r3, #1
 80075e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80075ec:	e7be      	b.n	800756c <atanf+0x84>
 80075ee:	4b24      	ldr	r3, [pc, #144]	; (8007680 <atanf+0x198>)
 80075f0:	429c      	cmp	r4, r3
 80075f2:	dc0b      	bgt.n	800760c <atanf+0x124>
 80075f4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80075f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075fc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007600:	2302      	movs	r3, #2
 8007602:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800760a:	e7af      	b.n	800756c <atanf+0x84>
 800760c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007610:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007614:	2303      	movs	r3, #3
 8007616:	e7a9      	b.n	800756c <atanf+0x84>
 8007618:	4a1a      	ldr	r2, [pc, #104]	; (8007684 <atanf+0x19c>)
 800761a:	491b      	ldr	r1, [pc, #108]	; (8007688 <atanf+0x1a0>)
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	441a      	add	r2, r3
 8007620:	440b      	add	r3, r1
 8007622:	edd3 6a00 	vldr	s13, [r3]
 8007626:	ee37 7a66 	vsub.f32	s14, s14, s13
 800762a:	2d00      	cmp	r5, #0
 800762c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007630:	ed92 7a00 	vldr	s14, [r2]
 8007634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007638:	bfb8      	it	lt
 800763a:	eef1 7a67 	vneglt.f32	s15, s15
 800763e:	e762      	b.n	8007506 <atanf+0x1e>
 8007640:	bfc90fdb 	.word	0xbfc90fdb
 8007644:	3fc90fdb 	.word	0x3fc90fdb
 8007648:	3edfffff 	.word	0x3edfffff
 800764c:	7149f2ca 	.word	0x7149f2ca
 8007650:	3f97ffff 	.word	0x3f97ffff
 8007654:	3c8569d7 	.word	0x3c8569d7
 8007658:	3d4bda59 	.word	0x3d4bda59
 800765c:	bd6ef16b 	.word	0xbd6ef16b
 8007660:	3d886b35 	.word	0x3d886b35
 8007664:	3dba2e6e 	.word	0x3dba2e6e
 8007668:	3e124925 	.word	0x3e124925
 800766c:	3eaaaaab 	.word	0x3eaaaaab
 8007670:	bd15a221 	.word	0xbd15a221
 8007674:	bd9d8795 	.word	0xbd9d8795
 8007678:	bde38e38 	.word	0xbde38e38
 800767c:	be4ccccd 	.word	0xbe4ccccd
 8007680:	401bffff 	.word	0x401bffff
 8007684:	0800b114 	.word	0x0800b114
 8007688:	0800b124 	.word	0x0800b124

0800768c <fabsf>:
 800768c:	ee10 3a10 	vmov	r3, s0
 8007690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007694:	ee00 3a10 	vmov	s0, r3
 8007698:	4770      	bx	lr
	...

0800769c <__errno>:
 800769c:	4b01      	ldr	r3, [pc, #4]	; (80076a4 <__errno+0x8>)
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	24000010 	.word	0x24000010

080076a8 <__libc_init_array>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	4e0d      	ldr	r6, [pc, #52]	; (80076e0 <__libc_init_array+0x38>)
 80076ac:	4c0d      	ldr	r4, [pc, #52]	; (80076e4 <__libc_init_array+0x3c>)
 80076ae:	1ba4      	subs	r4, r4, r6
 80076b0:	10a4      	asrs	r4, r4, #2
 80076b2:	2500      	movs	r5, #0
 80076b4:	42a5      	cmp	r5, r4
 80076b6:	d109      	bne.n	80076cc <__libc_init_array+0x24>
 80076b8:	4e0b      	ldr	r6, [pc, #44]	; (80076e8 <__libc_init_array+0x40>)
 80076ba:	4c0c      	ldr	r4, [pc, #48]	; (80076ec <__libc_init_array+0x44>)
 80076bc:	f003 fc9c 	bl	800aff8 <_init>
 80076c0:	1ba4      	subs	r4, r4, r6
 80076c2:	10a4      	asrs	r4, r4, #2
 80076c4:	2500      	movs	r5, #0
 80076c6:	42a5      	cmp	r5, r4
 80076c8:	d105      	bne.n	80076d6 <__libc_init_array+0x2e>
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076d0:	4798      	blx	r3
 80076d2:	3501      	adds	r5, #1
 80076d4:	e7ee      	b.n	80076b4 <__libc_init_array+0xc>
 80076d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076da:	4798      	blx	r3
 80076dc:	3501      	adds	r5, #1
 80076de:	e7f2      	b.n	80076c6 <__libc_init_array+0x1e>
 80076e0:	0800b3f0 	.word	0x0800b3f0
 80076e4:	0800b3f0 	.word	0x0800b3f0
 80076e8:	0800b3f0 	.word	0x0800b3f0
 80076ec:	0800b3f4 	.word	0x0800b3f4

080076f0 <malloc>:
 80076f0:	4b02      	ldr	r3, [pc, #8]	; (80076fc <malloc+0xc>)
 80076f2:	4601      	mov	r1, r0
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	f000 b86d 	b.w	80077d4 <_malloc_r>
 80076fa:	bf00      	nop
 80076fc:	24000010 	.word	0x24000010

08007700 <free>:
 8007700:	4b02      	ldr	r3, [pc, #8]	; (800770c <free+0xc>)
 8007702:	4601      	mov	r1, r0
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	f000 b817 	b.w	8007738 <_free_r>
 800770a:	bf00      	nop
 800770c:	24000010 	.word	0x24000010

08007710 <memcpy>:
 8007710:	b510      	push	{r4, lr}
 8007712:	1e43      	subs	r3, r0, #1
 8007714:	440a      	add	r2, r1
 8007716:	4291      	cmp	r1, r2
 8007718:	d100      	bne.n	800771c <memcpy+0xc>
 800771a:	bd10      	pop	{r4, pc}
 800771c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007720:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007724:	e7f7      	b.n	8007716 <memcpy+0x6>

08007726 <memset>:
 8007726:	4402      	add	r2, r0
 8007728:	4603      	mov	r3, r0
 800772a:	4293      	cmp	r3, r2
 800772c:	d100      	bne.n	8007730 <memset+0xa>
 800772e:	4770      	bx	lr
 8007730:	f803 1b01 	strb.w	r1, [r3], #1
 8007734:	e7f9      	b.n	800772a <memset+0x4>
	...

08007738 <_free_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4605      	mov	r5, r0
 800773c:	2900      	cmp	r1, #0
 800773e:	d045      	beq.n	80077cc <_free_r+0x94>
 8007740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007744:	1f0c      	subs	r4, r1, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	bfb8      	it	lt
 800774a:	18e4      	addlt	r4, r4, r3
 800774c:	f002 fe8c 	bl	800a468 <__malloc_lock>
 8007750:	4a1f      	ldr	r2, [pc, #124]	; (80077d0 <_free_r+0x98>)
 8007752:	6813      	ldr	r3, [r2, #0]
 8007754:	4610      	mov	r0, r2
 8007756:	b933      	cbnz	r3, 8007766 <_free_r+0x2e>
 8007758:	6063      	str	r3, [r4, #4]
 800775a:	6014      	str	r4, [r2, #0]
 800775c:	4628      	mov	r0, r5
 800775e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007762:	f002 be82 	b.w	800a46a <__malloc_unlock>
 8007766:	42a3      	cmp	r3, r4
 8007768:	d90c      	bls.n	8007784 <_free_r+0x4c>
 800776a:	6821      	ldr	r1, [r4, #0]
 800776c:	1862      	adds	r2, r4, r1
 800776e:	4293      	cmp	r3, r2
 8007770:	bf04      	itt	eq
 8007772:	681a      	ldreq	r2, [r3, #0]
 8007774:	685b      	ldreq	r3, [r3, #4]
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	bf04      	itt	eq
 800777a:	1852      	addeq	r2, r2, r1
 800777c:	6022      	streq	r2, [r4, #0]
 800777e:	6004      	str	r4, [r0, #0]
 8007780:	e7ec      	b.n	800775c <_free_r+0x24>
 8007782:	4613      	mov	r3, r2
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	b10a      	cbz	r2, 800778c <_free_r+0x54>
 8007788:	42a2      	cmp	r2, r4
 800778a:	d9fa      	bls.n	8007782 <_free_r+0x4a>
 800778c:	6819      	ldr	r1, [r3, #0]
 800778e:	1858      	adds	r0, r3, r1
 8007790:	42a0      	cmp	r0, r4
 8007792:	d10b      	bne.n	80077ac <_free_r+0x74>
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	4401      	add	r1, r0
 8007798:	1858      	adds	r0, r3, r1
 800779a:	4282      	cmp	r2, r0
 800779c:	6019      	str	r1, [r3, #0]
 800779e:	d1dd      	bne.n	800775c <_free_r+0x24>
 80077a0:	6810      	ldr	r0, [r2, #0]
 80077a2:	6852      	ldr	r2, [r2, #4]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	4401      	add	r1, r0
 80077a8:	6019      	str	r1, [r3, #0]
 80077aa:	e7d7      	b.n	800775c <_free_r+0x24>
 80077ac:	d902      	bls.n	80077b4 <_free_r+0x7c>
 80077ae:	230c      	movs	r3, #12
 80077b0:	602b      	str	r3, [r5, #0]
 80077b2:	e7d3      	b.n	800775c <_free_r+0x24>
 80077b4:	6820      	ldr	r0, [r4, #0]
 80077b6:	1821      	adds	r1, r4, r0
 80077b8:	428a      	cmp	r2, r1
 80077ba:	bf04      	itt	eq
 80077bc:	6811      	ldreq	r1, [r2, #0]
 80077be:	6852      	ldreq	r2, [r2, #4]
 80077c0:	6062      	str	r2, [r4, #4]
 80077c2:	bf04      	itt	eq
 80077c4:	1809      	addeq	r1, r1, r0
 80077c6:	6021      	streq	r1, [r4, #0]
 80077c8:	605c      	str	r4, [r3, #4]
 80077ca:	e7c7      	b.n	800775c <_free_r+0x24>
 80077cc:	bd38      	pop	{r3, r4, r5, pc}
 80077ce:	bf00      	nop
 80077d0:	2400026c 	.word	0x2400026c

080077d4 <_malloc_r>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	1ccd      	adds	r5, r1, #3
 80077d8:	f025 0503 	bic.w	r5, r5, #3
 80077dc:	3508      	adds	r5, #8
 80077de:	2d0c      	cmp	r5, #12
 80077e0:	bf38      	it	cc
 80077e2:	250c      	movcc	r5, #12
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	4606      	mov	r6, r0
 80077e8:	db01      	blt.n	80077ee <_malloc_r+0x1a>
 80077ea:	42a9      	cmp	r1, r5
 80077ec:	d903      	bls.n	80077f6 <_malloc_r+0x22>
 80077ee:	230c      	movs	r3, #12
 80077f0:	6033      	str	r3, [r6, #0]
 80077f2:	2000      	movs	r0, #0
 80077f4:	bd70      	pop	{r4, r5, r6, pc}
 80077f6:	f002 fe37 	bl	800a468 <__malloc_lock>
 80077fa:	4a21      	ldr	r2, [pc, #132]	; (8007880 <_malloc_r+0xac>)
 80077fc:	6814      	ldr	r4, [r2, #0]
 80077fe:	4621      	mov	r1, r4
 8007800:	b991      	cbnz	r1, 8007828 <_malloc_r+0x54>
 8007802:	4c20      	ldr	r4, [pc, #128]	; (8007884 <_malloc_r+0xb0>)
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	b91b      	cbnz	r3, 8007810 <_malloc_r+0x3c>
 8007808:	4630      	mov	r0, r6
 800780a:	f000 fe51 	bl	80084b0 <_sbrk_r>
 800780e:	6020      	str	r0, [r4, #0]
 8007810:	4629      	mov	r1, r5
 8007812:	4630      	mov	r0, r6
 8007814:	f000 fe4c 	bl	80084b0 <_sbrk_r>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d124      	bne.n	8007866 <_malloc_r+0x92>
 800781c:	230c      	movs	r3, #12
 800781e:	6033      	str	r3, [r6, #0]
 8007820:	4630      	mov	r0, r6
 8007822:	f002 fe22 	bl	800a46a <__malloc_unlock>
 8007826:	e7e4      	b.n	80077f2 <_malloc_r+0x1e>
 8007828:	680b      	ldr	r3, [r1, #0]
 800782a:	1b5b      	subs	r3, r3, r5
 800782c:	d418      	bmi.n	8007860 <_malloc_r+0x8c>
 800782e:	2b0b      	cmp	r3, #11
 8007830:	d90f      	bls.n	8007852 <_malloc_r+0x7e>
 8007832:	600b      	str	r3, [r1, #0]
 8007834:	50cd      	str	r5, [r1, r3]
 8007836:	18cc      	adds	r4, r1, r3
 8007838:	4630      	mov	r0, r6
 800783a:	f002 fe16 	bl	800a46a <__malloc_unlock>
 800783e:	f104 000b 	add.w	r0, r4, #11
 8007842:	1d23      	adds	r3, r4, #4
 8007844:	f020 0007 	bic.w	r0, r0, #7
 8007848:	1ac3      	subs	r3, r0, r3
 800784a:	d0d3      	beq.n	80077f4 <_malloc_r+0x20>
 800784c:	425a      	negs	r2, r3
 800784e:	50e2      	str	r2, [r4, r3]
 8007850:	e7d0      	b.n	80077f4 <_malloc_r+0x20>
 8007852:	428c      	cmp	r4, r1
 8007854:	684b      	ldr	r3, [r1, #4]
 8007856:	bf16      	itet	ne
 8007858:	6063      	strne	r3, [r4, #4]
 800785a:	6013      	streq	r3, [r2, #0]
 800785c:	460c      	movne	r4, r1
 800785e:	e7eb      	b.n	8007838 <_malloc_r+0x64>
 8007860:	460c      	mov	r4, r1
 8007862:	6849      	ldr	r1, [r1, #4]
 8007864:	e7cc      	b.n	8007800 <_malloc_r+0x2c>
 8007866:	1cc4      	adds	r4, r0, #3
 8007868:	f024 0403 	bic.w	r4, r4, #3
 800786c:	42a0      	cmp	r0, r4
 800786e:	d005      	beq.n	800787c <_malloc_r+0xa8>
 8007870:	1a21      	subs	r1, r4, r0
 8007872:	4630      	mov	r0, r6
 8007874:	f000 fe1c 	bl	80084b0 <_sbrk_r>
 8007878:	3001      	adds	r0, #1
 800787a:	d0cf      	beq.n	800781c <_malloc_r+0x48>
 800787c:	6025      	str	r5, [r4, #0]
 800787e:	e7db      	b.n	8007838 <_malloc_r+0x64>
 8007880:	2400026c 	.word	0x2400026c
 8007884:	24000270 	.word	0x24000270

08007888 <__cvt>:
 8007888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788a:	ed2d 8b02 	vpush	{d8}
 800788e:	eeb0 8b40 	vmov.f64	d8, d0
 8007892:	b085      	sub	sp, #20
 8007894:	4617      	mov	r7, r2
 8007896:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007898:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800789a:	ee18 2a90 	vmov	r2, s17
 800789e:	f025 0520 	bic.w	r5, r5, #32
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	bfb6      	itet	lt
 80078a6:	222d      	movlt	r2, #45	; 0x2d
 80078a8:	2200      	movge	r2, #0
 80078aa:	eeb1 8b40 	vneglt.f64	d8, d0
 80078ae:	2d46      	cmp	r5, #70	; 0x46
 80078b0:	460c      	mov	r4, r1
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	d004      	beq.n	80078c0 <__cvt+0x38>
 80078b6:	2d45      	cmp	r5, #69	; 0x45
 80078b8:	d100      	bne.n	80078bc <__cvt+0x34>
 80078ba:	3401      	adds	r4, #1
 80078bc:	2102      	movs	r1, #2
 80078be:	e000      	b.n	80078c2 <__cvt+0x3a>
 80078c0:	2103      	movs	r1, #3
 80078c2:	ab03      	add	r3, sp, #12
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	ab02      	add	r3, sp, #8
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	4622      	mov	r2, r4
 80078cc:	4633      	mov	r3, r6
 80078ce:	eeb0 0b48 	vmov.f64	d0, d8
 80078d2:	f001 fd31 	bl	8009338 <_dtoa_r>
 80078d6:	2d47      	cmp	r5, #71	; 0x47
 80078d8:	d101      	bne.n	80078de <__cvt+0x56>
 80078da:	07fb      	lsls	r3, r7, #31
 80078dc:	d51e      	bpl.n	800791c <__cvt+0x94>
 80078de:	2d46      	cmp	r5, #70	; 0x46
 80078e0:	eb00 0304 	add.w	r3, r0, r4
 80078e4:	d10c      	bne.n	8007900 <__cvt+0x78>
 80078e6:	7802      	ldrb	r2, [r0, #0]
 80078e8:	2a30      	cmp	r2, #48	; 0x30
 80078ea:	d107      	bne.n	80078fc <__cvt+0x74>
 80078ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80078f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f4:	bf1c      	itt	ne
 80078f6:	f1c4 0401 	rsbne	r4, r4, #1
 80078fa:	6034      	strne	r4, [r6, #0]
 80078fc:	6832      	ldr	r2, [r6, #0]
 80078fe:	4413      	add	r3, r2
 8007900:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007908:	d007      	beq.n	800791a <__cvt+0x92>
 800790a:	2130      	movs	r1, #48	; 0x30
 800790c:	9a03      	ldr	r2, [sp, #12]
 800790e:	429a      	cmp	r2, r3
 8007910:	d204      	bcs.n	800791c <__cvt+0x94>
 8007912:	1c54      	adds	r4, r2, #1
 8007914:	9403      	str	r4, [sp, #12]
 8007916:	7011      	strb	r1, [r2, #0]
 8007918:	e7f8      	b.n	800790c <__cvt+0x84>
 800791a:	9303      	str	r3, [sp, #12]
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007920:	1a1b      	subs	r3, r3, r0
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	b005      	add	sp, #20
 8007926:	ecbd 8b02 	vpop	{d8}
 800792a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800792c <__exponent>:
 800792c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800792e:	2900      	cmp	r1, #0
 8007930:	4604      	mov	r4, r0
 8007932:	bfba      	itte	lt
 8007934:	4249      	neglt	r1, r1
 8007936:	232d      	movlt	r3, #45	; 0x2d
 8007938:	232b      	movge	r3, #43	; 0x2b
 800793a:	2909      	cmp	r1, #9
 800793c:	f804 2b02 	strb.w	r2, [r4], #2
 8007940:	7043      	strb	r3, [r0, #1]
 8007942:	dd20      	ble.n	8007986 <__exponent+0x5a>
 8007944:	f10d 0307 	add.w	r3, sp, #7
 8007948:	461f      	mov	r7, r3
 800794a:	260a      	movs	r6, #10
 800794c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007950:	fb06 1115 	mls	r1, r6, r5, r1
 8007954:	3130      	adds	r1, #48	; 0x30
 8007956:	2d09      	cmp	r5, #9
 8007958:	f803 1c01 	strb.w	r1, [r3, #-1]
 800795c:	f103 32ff 	add.w	r2, r3, #4294967295
 8007960:	4629      	mov	r1, r5
 8007962:	dc09      	bgt.n	8007978 <__exponent+0x4c>
 8007964:	3130      	adds	r1, #48	; 0x30
 8007966:	3b02      	subs	r3, #2
 8007968:	f802 1c01 	strb.w	r1, [r2, #-1]
 800796c:	42bb      	cmp	r3, r7
 800796e:	4622      	mov	r2, r4
 8007970:	d304      	bcc.n	800797c <__exponent+0x50>
 8007972:	1a10      	subs	r0, r2, r0
 8007974:	b003      	add	sp, #12
 8007976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007978:	4613      	mov	r3, r2
 800797a:	e7e7      	b.n	800794c <__exponent+0x20>
 800797c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007980:	f804 2b01 	strb.w	r2, [r4], #1
 8007984:	e7f2      	b.n	800796c <__exponent+0x40>
 8007986:	2330      	movs	r3, #48	; 0x30
 8007988:	4419      	add	r1, r3
 800798a:	7083      	strb	r3, [r0, #2]
 800798c:	1d02      	adds	r2, r0, #4
 800798e:	70c1      	strb	r1, [r0, #3]
 8007990:	e7ef      	b.n	8007972 <__exponent+0x46>
 8007992:	0000      	movs	r0, r0
 8007994:	0000      	movs	r0, r0
	...

08007998 <_printf_float>:
 8007998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	b08d      	sub	sp, #52	; 0x34
 800799e:	460c      	mov	r4, r1
 80079a0:	4616      	mov	r6, r2
 80079a2:	461f      	mov	r7, r3
 80079a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80079a8:	4605      	mov	r5, r0
 80079aa:	f002 fd3d 	bl	800a428 <_localeconv_r>
 80079ae:	f8d0 b000 	ldr.w	fp, [r0]
 80079b2:	4658      	mov	r0, fp
 80079b4:	f7f8 fc94 	bl	80002e0 <strlen>
 80079b8:	2300      	movs	r3, #0
 80079ba:	930a      	str	r3, [sp, #40]	; 0x28
 80079bc:	f8d8 3000 	ldr.w	r3, [r8]
 80079c0:	9005      	str	r0, [sp, #20]
 80079c2:	3307      	adds	r3, #7
 80079c4:	f023 0307 	bic.w	r3, r3, #7
 80079c8:	f103 0108 	add.w	r1, r3, #8
 80079cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80079d0:	6822      	ldr	r2, [r4, #0]
 80079d2:	f8c8 1000 	str.w	r1, [r8]
 80079d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80079de:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8007c68 <_printf_float+0x2d0>
 80079e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80079e6:	eeb0 6bc0 	vabs.f64	d6, d0
 80079ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80079ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f2:	dd24      	ble.n	8007a3e <_printf_float+0xa6>
 80079f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80079f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079fc:	d502      	bpl.n	8007a04 <_printf_float+0x6c>
 80079fe:	232d      	movs	r3, #45	; 0x2d
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a04:	499a      	ldr	r1, [pc, #616]	; (8007c70 <_printf_float+0x2d8>)
 8007a06:	4b9b      	ldr	r3, [pc, #620]	; (8007c74 <_printf_float+0x2dc>)
 8007a08:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a0c:	bf8c      	ite	hi
 8007a0e:	4688      	movhi	r8, r1
 8007a10:	4698      	movls	r8, r3
 8007a12:	f022 0204 	bic.w	r2, r2, #4
 8007a16:	2303      	movs	r3, #3
 8007a18:	6123      	str	r3, [r4, #16]
 8007a1a:	6022      	str	r2, [r4, #0]
 8007a1c:	f04f 0a00 	mov.w	sl, #0
 8007a20:	9700      	str	r7, [sp, #0]
 8007a22:	4633      	mov	r3, r6
 8007a24:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a26:	4621      	mov	r1, r4
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f000 f9e1 	bl	8007df0 <_printf_common>
 8007a2e:	3001      	adds	r0, #1
 8007a30:	f040 8089 	bne.w	8007b46 <_printf_float+0x1ae>
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	b00d      	add	sp, #52	; 0x34
 8007a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a46:	d702      	bvc.n	8007a4e <_printf_float+0xb6>
 8007a48:	498b      	ldr	r1, [pc, #556]	; (8007c78 <_printf_float+0x2e0>)
 8007a4a:	4b8c      	ldr	r3, [pc, #560]	; (8007c7c <_printf_float+0x2e4>)
 8007a4c:	e7dc      	b.n	8007a08 <_printf_float+0x70>
 8007a4e:	6861      	ldr	r1, [r4, #4]
 8007a50:	1c4b      	adds	r3, r1, #1
 8007a52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a56:	ab0a      	add	r3, sp, #40	; 0x28
 8007a58:	a809      	add	r0, sp, #36	; 0x24
 8007a5a:	d13b      	bne.n	8007ad4 <_printf_float+0x13c>
 8007a5c:	2106      	movs	r1, #6
 8007a5e:	6061      	str	r1, [r4, #4]
 8007a60:	f04f 0c00 	mov.w	ip, #0
 8007a64:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007a68:	e9cd 0900 	strd	r0, r9, [sp]
 8007a6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a70:	6022      	str	r2, [r4, #0]
 8007a72:	6861      	ldr	r1, [r4, #4]
 8007a74:	4628      	mov	r0, r5
 8007a76:	f7ff ff07 	bl	8007888 <__cvt>
 8007a7a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8007a7e:	2b47      	cmp	r3, #71	; 0x47
 8007a80:	4680      	mov	r8, r0
 8007a82:	d109      	bne.n	8007a98 <_printf_float+0x100>
 8007a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a86:	1cd8      	adds	r0, r3, #3
 8007a88:	db02      	blt.n	8007a90 <_printf_float+0xf8>
 8007a8a:	6862      	ldr	r2, [r4, #4]
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	dd47      	ble.n	8007b20 <_printf_float+0x188>
 8007a90:	f1a9 0902 	sub.w	r9, r9, #2
 8007a94:	fa5f f989 	uxtb.w	r9, r9
 8007a98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a9e:	d824      	bhi.n	8007aea <_printf_float+0x152>
 8007aa0:	3901      	subs	r1, #1
 8007aa2:	464a      	mov	r2, r9
 8007aa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007aa8:	9109      	str	r1, [sp, #36]	; 0x24
 8007aaa:	f7ff ff3f 	bl	800792c <__exponent>
 8007aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ab0:	1813      	adds	r3, r2, r0
 8007ab2:	2a01      	cmp	r2, #1
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	dc02      	bgt.n	8007ac0 <_printf_float+0x128>
 8007aba:	6822      	ldr	r2, [r4, #0]
 8007abc:	07d1      	lsls	r1, r2, #31
 8007abe:	d501      	bpl.n	8007ac4 <_printf_float+0x12c>
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0a9      	beq.n	8007a20 <_printf_float+0x88>
 8007acc:	232d      	movs	r3, #45	; 0x2d
 8007ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad2:	e7a5      	b.n	8007a20 <_printf_float+0x88>
 8007ad4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8007ad8:	f000 8178 	beq.w	8007dcc <_printf_float+0x434>
 8007adc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007ae0:	d1be      	bne.n	8007a60 <_printf_float+0xc8>
 8007ae2:	2900      	cmp	r1, #0
 8007ae4:	d1bc      	bne.n	8007a60 <_printf_float+0xc8>
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	e7b9      	b.n	8007a5e <_printf_float+0xc6>
 8007aea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007aee:	d119      	bne.n	8007b24 <_printf_float+0x18c>
 8007af0:	2900      	cmp	r1, #0
 8007af2:	6863      	ldr	r3, [r4, #4]
 8007af4:	dd0c      	ble.n	8007b10 <_printf_float+0x178>
 8007af6:	6121      	str	r1, [r4, #16]
 8007af8:	b913      	cbnz	r3, 8007b00 <_printf_float+0x168>
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	07d2      	lsls	r2, r2, #31
 8007afe:	d502      	bpl.n	8007b06 <_printf_float+0x16e>
 8007b00:	3301      	adds	r3, #1
 8007b02:	440b      	add	r3, r1
 8007b04:	6123      	str	r3, [r4, #16]
 8007b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b08:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b0a:	f04f 0a00 	mov.w	sl, #0
 8007b0e:	e7d9      	b.n	8007ac4 <_printf_float+0x12c>
 8007b10:	b913      	cbnz	r3, 8007b18 <_printf_float+0x180>
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	07d0      	lsls	r0, r2, #31
 8007b16:	d501      	bpl.n	8007b1c <_printf_float+0x184>
 8007b18:	3302      	adds	r3, #2
 8007b1a:	e7f3      	b.n	8007b04 <_printf_float+0x16c>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e7f1      	b.n	8007b04 <_printf_float+0x16c>
 8007b20:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	db05      	blt.n	8007b38 <_printf_float+0x1a0>
 8007b2c:	6822      	ldr	r2, [r4, #0]
 8007b2e:	6123      	str	r3, [r4, #16]
 8007b30:	07d1      	lsls	r1, r2, #31
 8007b32:	d5e8      	bpl.n	8007b06 <_printf_float+0x16e>
 8007b34:	3301      	adds	r3, #1
 8007b36:	e7e5      	b.n	8007b04 <_printf_float+0x16c>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bfd4      	ite	le
 8007b3c:	f1c3 0302 	rsble	r3, r3, #2
 8007b40:	2301      	movgt	r3, #1
 8007b42:	4413      	add	r3, r2
 8007b44:	e7de      	b.n	8007b04 <_printf_float+0x16c>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	055a      	lsls	r2, r3, #21
 8007b4a:	d407      	bmi.n	8007b5c <_printf_float+0x1c4>
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	4642      	mov	r2, r8
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	d12a      	bne.n	8007bb0 <_printf_float+0x218>
 8007b5a:	e76b      	b.n	8007a34 <_printf_float+0x9c>
 8007b5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b60:	f240 80de 	bls.w	8007d20 <_printf_float+0x388>
 8007b64:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007b68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b70:	d133      	bne.n	8007bda <_printf_float+0x242>
 8007b72:	2301      	movs	r3, #1
 8007b74:	4a42      	ldr	r2, [pc, #264]	; (8007c80 <_printf_float+0x2e8>)
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	f43f af59 	beq.w	8007a34 <_printf_float+0x9c>
 8007b82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b86:	429a      	cmp	r2, r3
 8007b88:	db02      	blt.n	8007b90 <_printf_float+0x1f8>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	07d8      	lsls	r0, r3, #31
 8007b8e:	d50f      	bpl.n	8007bb0 <_printf_float+0x218>
 8007b90:	9b05      	ldr	r3, [sp, #20]
 8007b92:	465a      	mov	r2, fp
 8007b94:	4631      	mov	r1, r6
 8007b96:	4628      	mov	r0, r5
 8007b98:	47b8      	blx	r7
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	f43f af4a 	beq.w	8007a34 <_printf_float+0x9c>
 8007ba0:	f04f 0800 	mov.w	r8, #0
 8007ba4:	f104 091a 	add.w	r9, r4, #26
 8007ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007baa:	3b01      	subs	r3, #1
 8007bac:	4543      	cmp	r3, r8
 8007bae:	dc09      	bgt.n	8007bc4 <_printf_float+0x22c>
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	079b      	lsls	r3, r3, #30
 8007bb4:	f100 8105 	bmi.w	8007dc2 <_printf_float+0x42a>
 8007bb8:	68e0      	ldr	r0, [r4, #12]
 8007bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bbc:	4298      	cmp	r0, r3
 8007bbe:	bfb8      	it	lt
 8007bc0:	4618      	movlt	r0, r3
 8007bc2:	e739      	b.n	8007a38 <_printf_float+0xa0>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	464a      	mov	r2, r9
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b8      	blx	r7
 8007bce:	3001      	adds	r0, #1
 8007bd0:	f43f af30 	beq.w	8007a34 <_printf_float+0x9c>
 8007bd4:	f108 0801 	add.w	r8, r8, #1
 8007bd8:	e7e6      	b.n	8007ba8 <_printf_float+0x210>
 8007bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dc2b      	bgt.n	8007c38 <_printf_float+0x2a0>
 8007be0:	2301      	movs	r3, #1
 8007be2:	4a27      	ldr	r2, [pc, #156]	; (8007c80 <_printf_float+0x2e8>)
 8007be4:	4631      	mov	r1, r6
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b8      	blx	r7
 8007bea:	3001      	adds	r0, #1
 8007bec:	f43f af22 	beq.w	8007a34 <_printf_float+0x9c>
 8007bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf2:	b923      	cbnz	r3, 8007bfe <_printf_float+0x266>
 8007bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf6:	b913      	cbnz	r3, 8007bfe <_printf_float+0x266>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	07d9      	lsls	r1, r3, #31
 8007bfc:	d5d8      	bpl.n	8007bb0 <_printf_float+0x218>
 8007bfe:	9b05      	ldr	r3, [sp, #20]
 8007c00:	465a      	mov	r2, fp
 8007c02:	4631      	mov	r1, r6
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b8      	blx	r7
 8007c08:	3001      	adds	r0, #1
 8007c0a:	f43f af13 	beq.w	8007a34 <_printf_float+0x9c>
 8007c0e:	f04f 0900 	mov.w	r9, #0
 8007c12:	f104 0a1a 	add.w	sl, r4, #26
 8007c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c18:	425b      	negs	r3, r3
 8007c1a:	454b      	cmp	r3, r9
 8007c1c:	dc01      	bgt.n	8007c22 <_printf_float+0x28a>
 8007c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c20:	e795      	b.n	8007b4e <_printf_float+0x1b6>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4652      	mov	r2, sl
 8007c26:	4631      	mov	r1, r6
 8007c28:	4628      	mov	r0, r5
 8007c2a:	47b8      	blx	r7
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	f43f af01 	beq.w	8007a34 <_printf_float+0x9c>
 8007c32:	f109 0901 	add.w	r9, r9, #1
 8007c36:	e7ee      	b.n	8007c16 <_printf_float+0x27e>
 8007c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	bfa8      	it	ge
 8007c40:	461a      	movge	r2, r3
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	4691      	mov	r9, r2
 8007c46:	dd07      	ble.n	8007c58 <_printf_float+0x2c0>
 8007c48:	4613      	mov	r3, r2
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	4628      	mov	r0, r5
 8007c50:	47b8      	blx	r7
 8007c52:	3001      	adds	r0, #1
 8007c54:	f43f aeee 	beq.w	8007a34 <_printf_float+0x9c>
 8007c58:	f104 031a 	add.w	r3, r4, #26
 8007c5c:	f04f 0a00 	mov.w	sl, #0
 8007c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c64:	9307      	str	r3, [sp, #28]
 8007c66:	e017      	b.n	8007c98 <_printf_float+0x300>
 8007c68:	ffffffff 	.word	0xffffffff
 8007c6c:	7fefffff 	.word	0x7fefffff
 8007c70:	0800b138 	.word	0x0800b138
 8007c74:	0800b134 	.word	0x0800b134
 8007c78:	0800b140 	.word	0x0800b140
 8007c7c:	0800b13c 	.word	0x0800b13c
 8007c80:	0800b144 	.word	0x0800b144
 8007c84:	2301      	movs	r3, #1
 8007c86:	9a07      	ldr	r2, [sp, #28]
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b8      	blx	r7
 8007c8e:	3001      	adds	r0, #1
 8007c90:	f43f aed0 	beq.w	8007a34 <_printf_float+0x9c>
 8007c94:	f10a 0a01 	add.w	sl, sl, #1
 8007c98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c9a:	9306      	str	r3, [sp, #24]
 8007c9c:	eba3 0309 	sub.w	r3, r3, r9
 8007ca0:	4553      	cmp	r3, sl
 8007ca2:	dcef      	bgt.n	8007c84 <_printf_float+0x2ec>
 8007ca4:	9b06      	ldr	r3, [sp, #24]
 8007ca6:	4498      	add	r8, r3
 8007ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cac:	429a      	cmp	r2, r3
 8007cae:	db15      	blt.n	8007cdc <_printf_float+0x344>
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	07da      	lsls	r2, r3, #31
 8007cb4:	d412      	bmi.n	8007cdc <_printf_float+0x344>
 8007cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb8:	9a06      	ldr	r2, [sp, #24]
 8007cba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cbc:	1a9a      	subs	r2, r3, r2
 8007cbe:	eba3 0a01 	sub.w	sl, r3, r1
 8007cc2:	4592      	cmp	sl, r2
 8007cc4:	bfa8      	it	ge
 8007cc6:	4692      	movge	sl, r2
 8007cc8:	f1ba 0f00 	cmp.w	sl, #0
 8007ccc:	dc0e      	bgt.n	8007cec <_printf_float+0x354>
 8007cce:	f04f 0800 	mov.w	r8, #0
 8007cd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cd6:	f104 091a 	add.w	r9, r4, #26
 8007cda:	e019      	b.n	8007d10 <_printf_float+0x378>
 8007cdc:	9b05      	ldr	r3, [sp, #20]
 8007cde:	465a      	mov	r2, fp
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d1e5      	bne.n	8007cb6 <_printf_float+0x31e>
 8007cea:	e6a3      	b.n	8007a34 <_printf_float+0x9c>
 8007cec:	4653      	mov	r3, sl
 8007cee:	4642      	mov	r2, r8
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	47b8      	blx	r7
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d1e9      	bne.n	8007cce <_printf_float+0x336>
 8007cfa:	e69b      	b.n	8007a34 <_printf_float+0x9c>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	464a      	mov	r2, r9
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b8      	blx	r7
 8007d06:	3001      	adds	r0, #1
 8007d08:	f43f ae94 	beq.w	8007a34 <_printf_float+0x9c>
 8007d0c:	f108 0801 	add.w	r8, r8, #1
 8007d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d14:	1a9b      	subs	r3, r3, r2
 8007d16:	eba3 030a 	sub.w	r3, r3, sl
 8007d1a:	4543      	cmp	r3, r8
 8007d1c:	dcee      	bgt.n	8007cfc <_printf_float+0x364>
 8007d1e:	e747      	b.n	8007bb0 <_printf_float+0x218>
 8007d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d22:	2a01      	cmp	r2, #1
 8007d24:	dc01      	bgt.n	8007d2a <_printf_float+0x392>
 8007d26:	07db      	lsls	r3, r3, #31
 8007d28:	d539      	bpl.n	8007d9e <_printf_float+0x406>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	4642      	mov	r2, r8
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4628      	mov	r0, r5
 8007d32:	47b8      	blx	r7
 8007d34:	3001      	adds	r0, #1
 8007d36:	f43f ae7d 	beq.w	8007a34 <_printf_float+0x9c>
 8007d3a:	9b05      	ldr	r3, [sp, #20]
 8007d3c:	465a      	mov	r2, fp
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b8      	blx	r7
 8007d44:	3001      	adds	r0, #1
 8007d46:	f108 0801 	add.w	r8, r8, #1
 8007d4a:	f43f ae73 	beq.w	8007a34 <_printf_float+0x9c>
 8007d4e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d60:	d018      	beq.n	8007d94 <_printf_float+0x3fc>
 8007d62:	4642      	mov	r2, r8
 8007d64:	4631      	mov	r1, r6
 8007d66:	4628      	mov	r0, r5
 8007d68:	47b8      	blx	r7
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d10e      	bne.n	8007d8c <_printf_float+0x3f4>
 8007d6e:	e661      	b.n	8007a34 <_printf_float+0x9c>
 8007d70:	2301      	movs	r3, #1
 8007d72:	464a      	mov	r2, r9
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f43f ae5a 	beq.w	8007a34 <_printf_float+0x9c>
 8007d80:	f108 0801 	add.w	r8, r8, #1
 8007d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d86:	3b01      	subs	r3, #1
 8007d88:	4543      	cmp	r3, r8
 8007d8a:	dcf1      	bgt.n	8007d70 <_printf_float+0x3d8>
 8007d8c:	4653      	mov	r3, sl
 8007d8e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d92:	e6dd      	b.n	8007b50 <_printf_float+0x1b8>
 8007d94:	f04f 0800 	mov.w	r8, #0
 8007d98:	f104 091a 	add.w	r9, r4, #26
 8007d9c:	e7f2      	b.n	8007d84 <_printf_float+0x3ec>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e7df      	b.n	8007d62 <_printf_float+0x3ca>
 8007da2:	2301      	movs	r3, #1
 8007da4:	464a      	mov	r2, r9
 8007da6:	4631      	mov	r1, r6
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b8      	blx	r7
 8007dac:	3001      	adds	r0, #1
 8007dae:	f43f ae41 	beq.w	8007a34 <_printf_float+0x9c>
 8007db2:	f108 0801 	add.w	r8, r8, #1
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	4543      	cmp	r3, r8
 8007dbe:	dcf0      	bgt.n	8007da2 <_printf_float+0x40a>
 8007dc0:	e6fa      	b.n	8007bb8 <_printf_float+0x220>
 8007dc2:	f04f 0800 	mov.w	r8, #0
 8007dc6:	f104 0919 	add.w	r9, r4, #25
 8007dca:	e7f4      	b.n	8007db6 <_printf_float+0x41e>
 8007dcc:	2900      	cmp	r1, #0
 8007dce:	f43f ae8a 	beq.w	8007ae6 <_printf_float+0x14e>
 8007dd2:	f04f 0c00 	mov.w	ip, #0
 8007dd6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007dda:	e9cd 0900 	strd	r0, r9, [sp]
 8007dde:	6022      	str	r2, [r4, #0]
 8007de0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007de4:	4628      	mov	r0, r5
 8007de6:	f7ff fd4f 	bl	8007888 <__cvt>
 8007dea:	4680      	mov	r8, r0
 8007dec:	e64a      	b.n	8007a84 <_printf_float+0xec>
 8007dee:	bf00      	nop

08007df0 <_printf_common>:
 8007df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df4:	4691      	mov	r9, r2
 8007df6:	461f      	mov	r7, r3
 8007df8:	688a      	ldr	r2, [r1, #8]
 8007dfa:	690b      	ldr	r3, [r1, #16]
 8007dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e00:	4293      	cmp	r3, r2
 8007e02:	bfb8      	it	lt
 8007e04:	4613      	movlt	r3, r2
 8007e06:	f8c9 3000 	str.w	r3, [r9]
 8007e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e0e:	4606      	mov	r6, r0
 8007e10:	460c      	mov	r4, r1
 8007e12:	b112      	cbz	r2, 8007e1a <_printf_common+0x2a>
 8007e14:	3301      	adds	r3, #1
 8007e16:	f8c9 3000 	str.w	r3, [r9]
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	0699      	lsls	r1, r3, #26
 8007e1e:	bf42      	ittt	mi
 8007e20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e24:	3302      	addmi	r3, #2
 8007e26:	f8c9 3000 	strmi.w	r3, [r9]
 8007e2a:	6825      	ldr	r5, [r4, #0]
 8007e2c:	f015 0506 	ands.w	r5, r5, #6
 8007e30:	d107      	bne.n	8007e42 <_printf_common+0x52>
 8007e32:	f104 0a19 	add.w	sl, r4, #25
 8007e36:	68e3      	ldr	r3, [r4, #12]
 8007e38:	f8d9 2000 	ldr.w	r2, [r9]
 8007e3c:	1a9b      	subs	r3, r3, r2
 8007e3e:	42ab      	cmp	r3, r5
 8007e40:	dc28      	bgt.n	8007e94 <_printf_common+0xa4>
 8007e42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e46:	6822      	ldr	r2, [r4, #0]
 8007e48:	3300      	adds	r3, #0
 8007e4a:	bf18      	it	ne
 8007e4c:	2301      	movne	r3, #1
 8007e4e:	0692      	lsls	r2, r2, #26
 8007e50:	d42d      	bmi.n	8007eae <_printf_common+0xbe>
 8007e52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e56:	4639      	mov	r1, r7
 8007e58:	4630      	mov	r0, r6
 8007e5a:	47c0      	blx	r8
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d020      	beq.n	8007ea2 <_printf_common+0xb2>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	68e5      	ldr	r5, [r4, #12]
 8007e64:	f8d9 2000 	ldr.w	r2, [r9]
 8007e68:	f003 0306 	and.w	r3, r3, #6
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	bf08      	it	eq
 8007e70:	1aad      	subeq	r5, r5, r2
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	6922      	ldr	r2, [r4, #16]
 8007e76:	bf0c      	ite	eq
 8007e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e7c:	2500      	movne	r5, #0
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	bfc4      	itt	gt
 8007e82:	1a9b      	subgt	r3, r3, r2
 8007e84:	18ed      	addgt	r5, r5, r3
 8007e86:	f04f 0900 	mov.w	r9, #0
 8007e8a:	341a      	adds	r4, #26
 8007e8c:	454d      	cmp	r5, r9
 8007e8e:	d11a      	bne.n	8007ec6 <_printf_common+0xd6>
 8007e90:	2000      	movs	r0, #0
 8007e92:	e008      	b.n	8007ea6 <_printf_common+0xb6>
 8007e94:	2301      	movs	r3, #1
 8007e96:	4652      	mov	r2, sl
 8007e98:	4639      	mov	r1, r7
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	47c0      	blx	r8
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d103      	bne.n	8007eaa <_printf_common+0xba>
 8007ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eaa:	3501      	adds	r5, #1
 8007eac:	e7c3      	b.n	8007e36 <_printf_common+0x46>
 8007eae:	18e1      	adds	r1, r4, r3
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	2030      	movs	r0, #48	; 0x30
 8007eb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eb8:	4422      	add	r2, r4
 8007eba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ebe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ec2:	3302      	adds	r3, #2
 8007ec4:	e7c5      	b.n	8007e52 <_printf_common+0x62>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4639      	mov	r1, r7
 8007ecc:	4630      	mov	r0, r6
 8007ece:	47c0      	blx	r8
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d0e6      	beq.n	8007ea2 <_printf_common+0xb2>
 8007ed4:	f109 0901 	add.w	r9, r9, #1
 8007ed8:	e7d8      	b.n	8007e8c <_printf_common+0x9c>
	...

08007edc <_printf_i>:
 8007edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ee0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	7e09      	ldrb	r1, [r1, #24]
 8007ee8:	b085      	sub	sp, #20
 8007eea:	296e      	cmp	r1, #110	; 0x6e
 8007eec:	4617      	mov	r7, r2
 8007eee:	4606      	mov	r6, r0
 8007ef0:	4698      	mov	r8, r3
 8007ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ef4:	f000 80b3 	beq.w	800805e <_printf_i+0x182>
 8007ef8:	d822      	bhi.n	8007f40 <_printf_i+0x64>
 8007efa:	2963      	cmp	r1, #99	; 0x63
 8007efc:	d036      	beq.n	8007f6c <_printf_i+0x90>
 8007efe:	d80a      	bhi.n	8007f16 <_printf_i+0x3a>
 8007f00:	2900      	cmp	r1, #0
 8007f02:	f000 80b9 	beq.w	8008078 <_printf_i+0x19c>
 8007f06:	2958      	cmp	r1, #88	; 0x58
 8007f08:	f000 8083 	beq.w	8008012 <_printf_i+0x136>
 8007f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f14:	e032      	b.n	8007f7c <_printf_i+0xa0>
 8007f16:	2964      	cmp	r1, #100	; 0x64
 8007f18:	d001      	beq.n	8007f1e <_printf_i+0x42>
 8007f1a:	2969      	cmp	r1, #105	; 0x69
 8007f1c:	d1f6      	bne.n	8007f0c <_printf_i+0x30>
 8007f1e:	6820      	ldr	r0, [r4, #0]
 8007f20:	6813      	ldr	r3, [r2, #0]
 8007f22:	0605      	lsls	r5, r0, #24
 8007f24:	f103 0104 	add.w	r1, r3, #4
 8007f28:	d52a      	bpl.n	8007f80 <_printf_i+0xa4>
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6011      	str	r1, [r2, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	da03      	bge.n	8007f3a <_printf_i+0x5e>
 8007f32:	222d      	movs	r2, #45	; 0x2d
 8007f34:	425b      	negs	r3, r3
 8007f36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f3a:	486f      	ldr	r0, [pc, #444]	; (80080f8 <_printf_i+0x21c>)
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	e039      	b.n	8007fb4 <_printf_i+0xd8>
 8007f40:	2973      	cmp	r1, #115	; 0x73
 8007f42:	f000 809d 	beq.w	8008080 <_printf_i+0x1a4>
 8007f46:	d808      	bhi.n	8007f5a <_printf_i+0x7e>
 8007f48:	296f      	cmp	r1, #111	; 0x6f
 8007f4a:	d020      	beq.n	8007f8e <_printf_i+0xb2>
 8007f4c:	2970      	cmp	r1, #112	; 0x70
 8007f4e:	d1dd      	bne.n	8007f0c <_printf_i+0x30>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	f043 0320 	orr.w	r3, r3, #32
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	e003      	b.n	8007f62 <_printf_i+0x86>
 8007f5a:	2975      	cmp	r1, #117	; 0x75
 8007f5c:	d017      	beq.n	8007f8e <_printf_i+0xb2>
 8007f5e:	2978      	cmp	r1, #120	; 0x78
 8007f60:	d1d4      	bne.n	8007f0c <_printf_i+0x30>
 8007f62:	2378      	movs	r3, #120	; 0x78
 8007f64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f68:	4864      	ldr	r0, [pc, #400]	; (80080fc <_printf_i+0x220>)
 8007f6a:	e055      	b.n	8008018 <_printf_i+0x13c>
 8007f6c:	6813      	ldr	r3, [r2, #0]
 8007f6e:	1d19      	adds	r1, r3, #4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6011      	str	r1, [r2, #0]
 8007f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e08c      	b.n	800809a <_printf_i+0x1be>
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6011      	str	r1, [r2, #0]
 8007f84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f88:	bf18      	it	ne
 8007f8a:	b21b      	sxthne	r3, r3
 8007f8c:	e7cf      	b.n	8007f2e <_printf_i+0x52>
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	6825      	ldr	r5, [r4, #0]
 8007f92:	1d18      	adds	r0, r3, #4
 8007f94:	6010      	str	r0, [r2, #0]
 8007f96:	0628      	lsls	r0, r5, #24
 8007f98:	d501      	bpl.n	8007f9e <_printf_i+0xc2>
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	e002      	b.n	8007fa4 <_printf_i+0xc8>
 8007f9e:	0668      	lsls	r0, r5, #25
 8007fa0:	d5fb      	bpl.n	8007f9a <_printf_i+0xbe>
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	4854      	ldr	r0, [pc, #336]	; (80080f8 <_printf_i+0x21c>)
 8007fa6:	296f      	cmp	r1, #111	; 0x6f
 8007fa8:	bf14      	ite	ne
 8007faa:	220a      	movne	r2, #10
 8007fac:	2208      	moveq	r2, #8
 8007fae:	2100      	movs	r1, #0
 8007fb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fb4:	6865      	ldr	r5, [r4, #4]
 8007fb6:	60a5      	str	r5, [r4, #8]
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	f2c0 8095 	blt.w	80080e8 <_printf_i+0x20c>
 8007fbe:	6821      	ldr	r1, [r4, #0]
 8007fc0:	f021 0104 	bic.w	r1, r1, #4
 8007fc4:	6021      	str	r1, [r4, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d13d      	bne.n	8008046 <_printf_i+0x16a>
 8007fca:	2d00      	cmp	r5, #0
 8007fcc:	f040 808e 	bne.w	80080ec <_printf_i+0x210>
 8007fd0:	4665      	mov	r5, ip
 8007fd2:	2a08      	cmp	r2, #8
 8007fd4:	d10b      	bne.n	8007fee <_printf_i+0x112>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	07db      	lsls	r3, r3, #31
 8007fda:	d508      	bpl.n	8007fee <_printf_i+0x112>
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	6862      	ldr	r2, [r4, #4]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	bfde      	ittt	le
 8007fe4:	2330      	movle	r3, #48	; 0x30
 8007fe6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fee:	ebac 0305 	sub.w	r3, ip, r5
 8007ff2:	6123      	str	r3, [r4, #16]
 8007ff4:	f8cd 8000 	str.w	r8, [sp]
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	aa03      	add	r2, sp, #12
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4630      	mov	r0, r6
 8008000:	f7ff fef6 	bl	8007df0 <_printf_common>
 8008004:	3001      	adds	r0, #1
 8008006:	d14d      	bne.n	80080a4 <_printf_i+0x1c8>
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	b005      	add	sp, #20
 800800e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008012:	4839      	ldr	r0, [pc, #228]	; (80080f8 <_printf_i+0x21c>)
 8008014:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008018:	6813      	ldr	r3, [r2, #0]
 800801a:	6821      	ldr	r1, [r4, #0]
 800801c:	1d1d      	adds	r5, r3, #4
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6015      	str	r5, [r2, #0]
 8008022:	060a      	lsls	r2, r1, #24
 8008024:	d50b      	bpl.n	800803e <_printf_i+0x162>
 8008026:	07ca      	lsls	r2, r1, #31
 8008028:	bf44      	itt	mi
 800802a:	f041 0120 	orrmi.w	r1, r1, #32
 800802e:	6021      	strmi	r1, [r4, #0]
 8008030:	b91b      	cbnz	r3, 800803a <_printf_i+0x15e>
 8008032:	6822      	ldr	r2, [r4, #0]
 8008034:	f022 0220 	bic.w	r2, r2, #32
 8008038:	6022      	str	r2, [r4, #0]
 800803a:	2210      	movs	r2, #16
 800803c:	e7b7      	b.n	8007fae <_printf_i+0xd2>
 800803e:	064d      	lsls	r5, r1, #25
 8008040:	bf48      	it	mi
 8008042:	b29b      	uxthmi	r3, r3
 8008044:	e7ef      	b.n	8008026 <_printf_i+0x14a>
 8008046:	4665      	mov	r5, ip
 8008048:	fbb3 f1f2 	udiv	r1, r3, r2
 800804c:	fb02 3311 	mls	r3, r2, r1, r3
 8008050:	5cc3      	ldrb	r3, [r0, r3]
 8008052:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008056:	460b      	mov	r3, r1
 8008058:	2900      	cmp	r1, #0
 800805a:	d1f5      	bne.n	8008048 <_printf_i+0x16c>
 800805c:	e7b9      	b.n	8007fd2 <_printf_i+0xf6>
 800805e:	6813      	ldr	r3, [r2, #0]
 8008060:	6825      	ldr	r5, [r4, #0]
 8008062:	6961      	ldr	r1, [r4, #20]
 8008064:	1d18      	adds	r0, r3, #4
 8008066:	6010      	str	r0, [r2, #0]
 8008068:	0628      	lsls	r0, r5, #24
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	d501      	bpl.n	8008072 <_printf_i+0x196>
 800806e:	6019      	str	r1, [r3, #0]
 8008070:	e002      	b.n	8008078 <_printf_i+0x19c>
 8008072:	066a      	lsls	r2, r5, #25
 8008074:	d5fb      	bpl.n	800806e <_printf_i+0x192>
 8008076:	8019      	strh	r1, [r3, #0]
 8008078:	2300      	movs	r3, #0
 800807a:	6123      	str	r3, [r4, #16]
 800807c:	4665      	mov	r5, ip
 800807e:	e7b9      	b.n	8007ff4 <_printf_i+0x118>
 8008080:	6813      	ldr	r3, [r2, #0]
 8008082:	1d19      	adds	r1, r3, #4
 8008084:	6011      	str	r1, [r2, #0]
 8008086:	681d      	ldr	r5, [r3, #0]
 8008088:	6862      	ldr	r2, [r4, #4]
 800808a:	2100      	movs	r1, #0
 800808c:	4628      	mov	r0, r5
 800808e:	f7f8 f92f 	bl	80002f0 <memchr>
 8008092:	b108      	cbz	r0, 8008098 <_printf_i+0x1bc>
 8008094:	1b40      	subs	r0, r0, r5
 8008096:	6060      	str	r0, [r4, #4]
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	6123      	str	r3, [r4, #16]
 800809c:	2300      	movs	r3, #0
 800809e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a2:	e7a7      	b.n	8007ff4 <_printf_i+0x118>
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	462a      	mov	r2, r5
 80080a8:	4639      	mov	r1, r7
 80080aa:	4630      	mov	r0, r6
 80080ac:	47c0      	blx	r8
 80080ae:	3001      	adds	r0, #1
 80080b0:	d0aa      	beq.n	8008008 <_printf_i+0x12c>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	079b      	lsls	r3, r3, #30
 80080b6:	d413      	bmi.n	80080e0 <_printf_i+0x204>
 80080b8:	68e0      	ldr	r0, [r4, #12]
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	4298      	cmp	r0, r3
 80080be:	bfb8      	it	lt
 80080c0:	4618      	movlt	r0, r3
 80080c2:	e7a3      	b.n	800800c <_printf_i+0x130>
 80080c4:	2301      	movs	r3, #1
 80080c6:	464a      	mov	r2, r9
 80080c8:	4639      	mov	r1, r7
 80080ca:	4630      	mov	r0, r6
 80080cc:	47c0      	blx	r8
 80080ce:	3001      	adds	r0, #1
 80080d0:	d09a      	beq.n	8008008 <_printf_i+0x12c>
 80080d2:	3501      	adds	r5, #1
 80080d4:	68e3      	ldr	r3, [r4, #12]
 80080d6:	9a03      	ldr	r2, [sp, #12]
 80080d8:	1a9b      	subs	r3, r3, r2
 80080da:	42ab      	cmp	r3, r5
 80080dc:	dcf2      	bgt.n	80080c4 <_printf_i+0x1e8>
 80080de:	e7eb      	b.n	80080b8 <_printf_i+0x1dc>
 80080e0:	2500      	movs	r5, #0
 80080e2:	f104 0919 	add.w	r9, r4, #25
 80080e6:	e7f5      	b.n	80080d4 <_printf_i+0x1f8>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1ac      	bne.n	8008046 <_printf_i+0x16a>
 80080ec:	7803      	ldrb	r3, [r0, #0]
 80080ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080f6:	e76c      	b.n	8007fd2 <_printf_i+0xf6>
 80080f8:	0800b146 	.word	0x0800b146
 80080fc:	0800b157 	.word	0x0800b157

08008100 <_scanf_float>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	469a      	mov	sl, r3
 8008106:	688b      	ldr	r3, [r1, #8]
 8008108:	4616      	mov	r6, r2
 800810a:	1e5a      	subs	r2, r3, #1
 800810c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008110:	b087      	sub	sp, #28
 8008112:	bf83      	ittte	hi
 8008114:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008118:	189b      	addhi	r3, r3, r2
 800811a:	9301      	strhi	r3, [sp, #4]
 800811c:	2300      	movls	r3, #0
 800811e:	bf86      	itte	hi
 8008120:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008124:	608b      	strhi	r3, [r1, #8]
 8008126:	9301      	strls	r3, [sp, #4]
 8008128:	680b      	ldr	r3, [r1, #0]
 800812a:	4688      	mov	r8, r1
 800812c:	f04f 0b00 	mov.w	fp, #0
 8008130:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008134:	f848 3b1c 	str.w	r3, [r8], #28
 8008138:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800813c:	4607      	mov	r7, r0
 800813e:	460c      	mov	r4, r1
 8008140:	4645      	mov	r5, r8
 8008142:	465a      	mov	r2, fp
 8008144:	46d9      	mov	r9, fp
 8008146:	f8cd b008 	str.w	fp, [sp, #8]
 800814a:	68a1      	ldr	r1, [r4, #8]
 800814c:	b181      	cbz	r1, 8008170 <_scanf_float+0x70>
 800814e:	6833      	ldr	r3, [r6, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2b49      	cmp	r3, #73	; 0x49
 8008154:	d071      	beq.n	800823a <_scanf_float+0x13a>
 8008156:	d84d      	bhi.n	80081f4 <_scanf_float+0xf4>
 8008158:	2b39      	cmp	r3, #57	; 0x39
 800815a:	d840      	bhi.n	80081de <_scanf_float+0xde>
 800815c:	2b31      	cmp	r3, #49	; 0x31
 800815e:	f080 8088 	bcs.w	8008272 <_scanf_float+0x172>
 8008162:	2b2d      	cmp	r3, #45	; 0x2d
 8008164:	f000 8090 	beq.w	8008288 <_scanf_float+0x188>
 8008168:	d815      	bhi.n	8008196 <_scanf_float+0x96>
 800816a:	2b2b      	cmp	r3, #43	; 0x2b
 800816c:	f000 808c 	beq.w	8008288 <_scanf_float+0x188>
 8008170:	f1b9 0f00 	cmp.w	r9, #0
 8008174:	d003      	beq.n	800817e <_scanf_float+0x7e>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	3a01      	subs	r2, #1
 8008180:	2a01      	cmp	r2, #1
 8008182:	f200 80ea 	bhi.w	800835a <_scanf_float+0x25a>
 8008186:	4545      	cmp	r5, r8
 8008188:	f200 80dc 	bhi.w	8008344 <_scanf_float+0x244>
 800818c:	2601      	movs	r6, #1
 800818e:	4630      	mov	r0, r6
 8008190:	b007      	add	sp, #28
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	2b2e      	cmp	r3, #46	; 0x2e
 8008198:	f000 809f 	beq.w	80082da <_scanf_float+0x1da>
 800819c:	2b30      	cmp	r3, #48	; 0x30
 800819e:	d1e7      	bne.n	8008170 <_scanf_float+0x70>
 80081a0:	6820      	ldr	r0, [r4, #0]
 80081a2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80081a6:	d064      	beq.n	8008272 <_scanf_float+0x172>
 80081a8:	9b01      	ldr	r3, [sp, #4]
 80081aa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80081ae:	6020      	str	r0, [r4, #0]
 80081b0:	f109 0901 	add.w	r9, r9, #1
 80081b4:	b11b      	cbz	r3, 80081be <_scanf_float+0xbe>
 80081b6:	3b01      	subs	r3, #1
 80081b8:	3101      	adds	r1, #1
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	60a1      	str	r1, [r4, #8]
 80081be:	68a3      	ldr	r3, [r4, #8]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	60a3      	str	r3, [r4, #8]
 80081c4:	6923      	ldr	r3, [r4, #16]
 80081c6:	3301      	adds	r3, #1
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	6873      	ldr	r3, [r6, #4]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	6073      	str	r3, [r6, #4]
 80081d2:	f340 80ac 	ble.w	800832e <_scanf_float+0x22e>
 80081d6:	6833      	ldr	r3, [r6, #0]
 80081d8:	3301      	adds	r3, #1
 80081da:	6033      	str	r3, [r6, #0]
 80081dc:	e7b5      	b.n	800814a <_scanf_float+0x4a>
 80081de:	2b45      	cmp	r3, #69	; 0x45
 80081e0:	f000 8085 	beq.w	80082ee <_scanf_float+0x1ee>
 80081e4:	2b46      	cmp	r3, #70	; 0x46
 80081e6:	d06a      	beq.n	80082be <_scanf_float+0x1be>
 80081e8:	2b41      	cmp	r3, #65	; 0x41
 80081ea:	d1c1      	bne.n	8008170 <_scanf_float+0x70>
 80081ec:	2a01      	cmp	r2, #1
 80081ee:	d1bf      	bne.n	8008170 <_scanf_float+0x70>
 80081f0:	2202      	movs	r2, #2
 80081f2:	e046      	b.n	8008282 <_scanf_float+0x182>
 80081f4:	2b65      	cmp	r3, #101	; 0x65
 80081f6:	d07a      	beq.n	80082ee <_scanf_float+0x1ee>
 80081f8:	d818      	bhi.n	800822c <_scanf_float+0x12c>
 80081fa:	2b54      	cmp	r3, #84	; 0x54
 80081fc:	d066      	beq.n	80082cc <_scanf_float+0x1cc>
 80081fe:	d811      	bhi.n	8008224 <_scanf_float+0x124>
 8008200:	2b4e      	cmp	r3, #78	; 0x4e
 8008202:	d1b5      	bne.n	8008170 <_scanf_float+0x70>
 8008204:	2a00      	cmp	r2, #0
 8008206:	d146      	bne.n	8008296 <_scanf_float+0x196>
 8008208:	f1b9 0f00 	cmp.w	r9, #0
 800820c:	d145      	bne.n	800829a <_scanf_float+0x19a>
 800820e:	6821      	ldr	r1, [r4, #0]
 8008210:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008214:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008218:	d13f      	bne.n	800829a <_scanf_float+0x19a>
 800821a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800821e:	6021      	str	r1, [r4, #0]
 8008220:	2201      	movs	r2, #1
 8008222:	e02e      	b.n	8008282 <_scanf_float+0x182>
 8008224:	2b59      	cmp	r3, #89	; 0x59
 8008226:	d01e      	beq.n	8008266 <_scanf_float+0x166>
 8008228:	2b61      	cmp	r3, #97	; 0x61
 800822a:	e7de      	b.n	80081ea <_scanf_float+0xea>
 800822c:	2b6e      	cmp	r3, #110	; 0x6e
 800822e:	d0e9      	beq.n	8008204 <_scanf_float+0x104>
 8008230:	d815      	bhi.n	800825e <_scanf_float+0x15e>
 8008232:	2b66      	cmp	r3, #102	; 0x66
 8008234:	d043      	beq.n	80082be <_scanf_float+0x1be>
 8008236:	2b69      	cmp	r3, #105	; 0x69
 8008238:	d19a      	bne.n	8008170 <_scanf_float+0x70>
 800823a:	f1bb 0f00 	cmp.w	fp, #0
 800823e:	d138      	bne.n	80082b2 <_scanf_float+0x1b2>
 8008240:	f1b9 0f00 	cmp.w	r9, #0
 8008244:	d197      	bne.n	8008176 <_scanf_float+0x76>
 8008246:	6821      	ldr	r1, [r4, #0]
 8008248:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800824c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008250:	d195      	bne.n	800817e <_scanf_float+0x7e>
 8008252:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008256:	6021      	str	r1, [r4, #0]
 8008258:	f04f 0b01 	mov.w	fp, #1
 800825c:	e011      	b.n	8008282 <_scanf_float+0x182>
 800825e:	2b74      	cmp	r3, #116	; 0x74
 8008260:	d034      	beq.n	80082cc <_scanf_float+0x1cc>
 8008262:	2b79      	cmp	r3, #121	; 0x79
 8008264:	d184      	bne.n	8008170 <_scanf_float+0x70>
 8008266:	f1bb 0f07 	cmp.w	fp, #7
 800826a:	d181      	bne.n	8008170 <_scanf_float+0x70>
 800826c:	f04f 0b08 	mov.w	fp, #8
 8008270:	e007      	b.n	8008282 <_scanf_float+0x182>
 8008272:	eb12 0f0b 	cmn.w	r2, fp
 8008276:	f47f af7b 	bne.w	8008170 <_scanf_float+0x70>
 800827a:	6821      	ldr	r1, [r4, #0]
 800827c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008280:	6021      	str	r1, [r4, #0]
 8008282:	702b      	strb	r3, [r5, #0]
 8008284:	3501      	adds	r5, #1
 8008286:	e79a      	b.n	80081be <_scanf_float+0xbe>
 8008288:	6821      	ldr	r1, [r4, #0]
 800828a:	0608      	lsls	r0, r1, #24
 800828c:	f57f af70 	bpl.w	8008170 <_scanf_float+0x70>
 8008290:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008294:	e7f4      	b.n	8008280 <_scanf_float+0x180>
 8008296:	2a02      	cmp	r2, #2
 8008298:	d047      	beq.n	800832a <_scanf_float+0x22a>
 800829a:	f1bb 0f01 	cmp.w	fp, #1
 800829e:	d003      	beq.n	80082a8 <_scanf_float+0x1a8>
 80082a0:	f1bb 0f04 	cmp.w	fp, #4
 80082a4:	f47f af64 	bne.w	8008170 <_scanf_float+0x70>
 80082a8:	f10b 0b01 	add.w	fp, fp, #1
 80082ac:	fa5f fb8b 	uxtb.w	fp, fp
 80082b0:	e7e7      	b.n	8008282 <_scanf_float+0x182>
 80082b2:	f1bb 0f03 	cmp.w	fp, #3
 80082b6:	d0f7      	beq.n	80082a8 <_scanf_float+0x1a8>
 80082b8:	f1bb 0f05 	cmp.w	fp, #5
 80082bc:	e7f2      	b.n	80082a4 <_scanf_float+0x1a4>
 80082be:	f1bb 0f02 	cmp.w	fp, #2
 80082c2:	f47f af55 	bne.w	8008170 <_scanf_float+0x70>
 80082c6:	f04f 0b03 	mov.w	fp, #3
 80082ca:	e7da      	b.n	8008282 <_scanf_float+0x182>
 80082cc:	f1bb 0f06 	cmp.w	fp, #6
 80082d0:	f47f af4e 	bne.w	8008170 <_scanf_float+0x70>
 80082d4:	f04f 0b07 	mov.w	fp, #7
 80082d8:	e7d3      	b.n	8008282 <_scanf_float+0x182>
 80082da:	6821      	ldr	r1, [r4, #0]
 80082dc:	0588      	lsls	r0, r1, #22
 80082de:	f57f af47 	bpl.w	8008170 <_scanf_float+0x70>
 80082e2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80082e6:	6021      	str	r1, [r4, #0]
 80082e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80082ec:	e7c9      	b.n	8008282 <_scanf_float+0x182>
 80082ee:	6821      	ldr	r1, [r4, #0]
 80082f0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80082f4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80082f8:	d006      	beq.n	8008308 <_scanf_float+0x208>
 80082fa:	0548      	lsls	r0, r1, #21
 80082fc:	f57f af38 	bpl.w	8008170 <_scanf_float+0x70>
 8008300:	f1b9 0f00 	cmp.w	r9, #0
 8008304:	f43f af3b 	beq.w	800817e <_scanf_float+0x7e>
 8008308:	0588      	lsls	r0, r1, #22
 800830a:	bf58      	it	pl
 800830c:	9802      	ldrpl	r0, [sp, #8]
 800830e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008312:	bf58      	it	pl
 8008314:	eba9 0000 	subpl.w	r0, r9, r0
 8008318:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800831c:	bf58      	it	pl
 800831e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008322:	6021      	str	r1, [r4, #0]
 8008324:	f04f 0900 	mov.w	r9, #0
 8008328:	e7ab      	b.n	8008282 <_scanf_float+0x182>
 800832a:	2203      	movs	r2, #3
 800832c:	e7a9      	b.n	8008282 <_scanf_float+0x182>
 800832e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008332:	9205      	str	r2, [sp, #20]
 8008334:	4631      	mov	r1, r6
 8008336:	4638      	mov	r0, r7
 8008338:	4798      	blx	r3
 800833a:	9a05      	ldr	r2, [sp, #20]
 800833c:	2800      	cmp	r0, #0
 800833e:	f43f af04 	beq.w	800814a <_scanf_float+0x4a>
 8008342:	e715      	b.n	8008170 <_scanf_float+0x70>
 8008344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008348:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800834c:	4632      	mov	r2, r6
 800834e:	4638      	mov	r0, r7
 8008350:	4798      	blx	r3
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	3b01      	subs	r3, #1
 8008356:	6123      	str	r3, [r4, #16]
 8008358:	e715      	b.n	8008186 <_scanf_float+0x86>
 800835a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800835e:	2b06      	cmp	r3, #6
 8008360:	d80a      	bhi.n	8008378 <_scanf_float+0x278>
 8008362:	f1bb 0f02 	cmp.w	fp, #2
 8008366:	d966      	bls.n	8008436 <_scanf_float+0x336>
 8008368:	f1ab 0b03 	sub.w	fp, fp, #3
 800836c:	fa5f fb8b 	uxtb.w	fp, fp
 8008370:	eba5 0b0b 	sub.w	fp, r5, fp
 8008374:	455d      	cmp	r5, fp
 8008376:	d149      	bne.n	800840c <_scanf_float+0x30c>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	05da      	lsls	r2, r3, #23
 800837c:	d51f      	bpl.n	80083be <_scanf_float+0x2be>
 800837e:	055b      	lsls	r3, r3, #21
 8008380:	d466      	bmi.n	8008450 <_scanf_float+0x350>
 8008382:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	2965      	cmp	r1, #101	; 0x65
 800838a:	f103 33ff 	add.w	r3, r3, #4294967295
 800838e:	f105 3bff 	add.w	fp, r5, #4294967295
 8008392:	6123      	str	r3, [r4, #16]
 8008394:	d00d      	beq.n	80083b2 <_scanf_float+0x2b2>
 8008396:	2945      	cmp	r1, #69	; 0x45
 8008398:	d00b      	beq.n	80083b2 <_scanf_float+0x2b2>
 800839a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800839e:	4632      	mov	r2, r6
 80083a0:	4638      	mov	r0, r7
 80083a2:	4798      	blx	r3
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	f1a5 0b02 	sub.w	fp, r5, #2
 80083b0:	6123      	str	r3, [r4, #16]
 80083b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083b6:	4632      	mov	r2, r6
 80083b8:	4638      	mov	r0, r7
 80083ba:	4798      	blx	r3
 80083bc:	465d      	mov	r5, fp
 80083be:	6826      	ldr	r6, [r4, #0]
 80083c0:	f016 0610 	ands.w	r6, r6, #16
 80083c4:	d170      	bne.n	80084a8 <_scanf_float+0x3a8>
 80083c6:	702e      	strb	r6, [r5, #0]
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d2:	d140      	bne.n	8008456 <_scanf_float+0x356>
 80083d4:	9b02      	ldr	r3, [sp, #8]
 80083d6:	eba9 0303 	sub.w	r3, r9, r3
 80083da:	425a      	negs	r2, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d147      	bne.n	8008470 <_scanf_float+0x370>
 80083e0:	2200      	movs	r2, #0
 80083e2:	4638      	mov	r0, r7
 80083e4:	4641      	mov	r1, r8
 80083e6:	f000 fe7b 	bl	80090e0 <_strtod_r>
 80083ea:	6820      	ldr	r0, [r4, #0]
 80083ec:	f8da 3000 	ldr.w	r3, [sl]
 80083f0:	f010 0f02 	tst.w	r0, #2
 80083f4:	f103 0204 	add.w	r2, r3, #4
 80083f8:	f8ca 2000 	str.w	r2, [sl]
 80083fc:	d043      	beq.n	8008486 <_scanf_float+0x386>
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	ed83 0b00 	vstr	d0, [r3]
 8008404:	68e3      	ldr	r3, [r4, #12]
 8008406:	3301      	adds	r3, #1
 8008408:	60e3      	str	r3, [r4, #12]
 800840a:	e6c0      	b.n	800818e <_scanf_float+0x8e>
 800840c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008410:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008414:	4632      	mov	r2, r6
 8008416:	4638      	mov	r0, r7
 8008418:	4798      	blx	r3
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	3b01      	subs	r3, #1
 800841e:	6123      	str	r3, [r4, #16]
 8008420:	e7a8      	b.n	8008374 <_scanf_float+0x274>
 8008422:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008426:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800842a:	4632      	mov	r2, r6
 800842c:	4638      	mov	r0, r7
 800842e:	4798      	blx	r3
 8008430:	6923      	ldr	r3, [r4, #16]
 8008432:	3b01      	subs	r3, #1
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	4545      	cmp	r5, r8
 8008438:	d8f3      	bhi.n	8008422 <_scanf_float+0x322>
 800843a:	e6a7      	b.n	800818c <_scanf_float+0x8c>
 800843c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008440:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008444:	4632      	mov	r2, r6
 8008446:	4638      	mov	r0, r7
 8008448:	4798      	blx	r3
 800844a:	6923      	ldr	r3, [r4, #16]
 800844c:	3b01      	subs	r3, #1
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	4545      	cmp	r5, r8
 8008452:	d8f3      	bhi.n	800843c <_scanf_float+0x33c>
 8008454:	e69a      	b.n	800818c <_scanf_float+0x8c>
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0c1      	beq.n	80083e0 <_scanf_float+0x2e0>
 800845c:	9904      	ldr	r1, [sp, #16]
 800845e:	230a      	movs	r3, #10
 8008460:	4632      	mov	r2, r6
 8008462:	3101      	adds	r1, #1
 8008464:	4638      	mov	r0, r7
 8008466:	f000 fec7 	bl	80091f8 <_strtol_r>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	9d04      	ldr	r5, [sp, #16]
 800846e:	1ac2      	subs	r2, r0, r3
 8008470:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008474:	429d      	cmp	r5, r3
 8008476:	bf28      	it	cs
 8008478:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800847c:	490b      	ldr	r1, [pc, #44]	; (80084ac <_scanf_float+0x3ac>)
 800847e:	4628      	mov	r0, r5
 8008480:	f000 f82c 	bl	80084dc <siprintf>
 8008484:	e7ac      	b.n	80083e0 <_scanf_float+0x2e0>
 8008486:	f010 0004 	ands.w	r0, r0, #4
 800848a:	d1b8      	bne.n	80083fe <_scanf_float+0x2fe>
 800848c:	eeb4 0b40 	vcmp.f64	d0, d0
 8008490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008494:	681d      	ldr	r5, [r3, #0]
 8008496:	d704      	bvc.n	80084a2 <_scanf_float+0x3a2>
 8008498:	f000 f81a 	bl	80084d0 <nanf>
 800849c:	ed85 0a00 	vstr	s0, [r5]
 80084a0:	e7b0      	b.n	8008404 <_scanf_float+0x304>
 80084a2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80084a6:	e7f9      	b.n	800849c <_scanf_float+0x39c>
 80084a8:	2600      	movs	r6, #0
 80084aa:	e670      	b.n	800818e <_scanf_float+0x8e>
 80084ac:	0800b168 	.word	0x0800b168

080084b0 <_sbrk_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4c06      	ldr	r4, [pc, #24]	; (80084cc <_sbrk_r+0x1c>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4605      	mov	r5, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	f7f9 f9a8 	bl	8001810 <_sbrk>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_sbrk_r+0x1a>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_sbrk_r+0x1a>
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	240138c0 	.word	0x240138c0

080084d0 <nanf>:
 80084d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80084d8 <nanf+0x8>
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	7fc00000 	.word	0x7fc00000

080084dc <siprintf>:
 80084dc:	b40e      	push	{r1, r2, r3}
 80084de:	b500      	push	{lr}
 80084e0:	b09c      	sub	sp, #112	; 0x70
 80084e2:	ab1d      	add	r3, sp, #116	; 0x74
 80084e4:	9002      	str	r0, [sp, #8]
 80084e6:	9006      	str	r0, [sp, #24]
 80084e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084ec:	4809      	ldr	r0, [pc, #36]	; (8008514 <siprintf+0x38>)
 80084ee:	9107      	str	r1, [sp, #28]
 80084f0:	9104      	str	r1, [sp, #16]
 80084f2:	4909      	ldr	r1, [pc, #36]	; (8008518 <siprintf+0x3c>)
 80084f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f8:	9105      	str	r1, [sp, #20]
 80084fa:	6800      	ldr	r0, [r0, #0]
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	a902      	add	r1, sp, #8
 8008500:	f002 fc1c 	bl	800ad3c <_svfiprintf_r>
 8008504:	9b02      	ldr	r3, [sp, #8]
 8008506:	2200      	movs	r2, #0
 8008508:	701a      	strb	r2, [r3, #0]
 800850a:	b01c      	add	sp, #112	; 0x70
 800850c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008510:	b003      	add	sp, #12
 8008512:	4770      	bx	lr
 8008514:	24000010 	.word	0x24000010
 8008518:	ffff0208 	.word	0xffff0208

0800851c <sulp>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4604      	mov	r4, r0
 8008520:	460d      	mov	r5, r1
 8008522:	4616      	mov	r6, r2
 8008524:	ec45 4b10 	vmov	d0, r4, r5
 8008528:	f002 fa6c 	bl	800aa04 <__ulp>
 800852c:	b17e      	cbz	r6, 800854e <sulp+0x32>
 800852e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008532:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008536:	2b00      	cmp	r3, #0
 8008538:	dd09      	ble.n	800854e <sulp+0x32>
 800853a:	051b      	lsls	r3, r3, #20
 800853c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008540:	2000      	movs	r0, #0
 8008542:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008546:	ec41 0b17 	vmov	d7, r0, r1
 800854a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800854e:	bd70      	pop	{r4, r5, r6, pc}

08008550 <_strtod_l>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	ed2d 8b0c 	vpush	{d8-d13}
 8008558:	4698      	mov	r8, r3
 800855a:	b09d      	sub	sp, #116	; 0x74
 800855c:	2300      	movs	r3, #0
 800855e:	4604      	mov	r4, r0
 8008560:	4640      	mov	r0, r8
 8008562:	460e      	mov	r6, r1
 8008564:	9214      	str	r2, [sp, #80]	; 0x50
 8008566:	9318      	str	r3, [sp, #96]	; 0x60
 8008568:	f001 ff5b 	bl	800a422 <__localeconv_l>
 800856c:	4681      	mov	r9, r0
 800856e:	6800      	ldr	r0, [r0, #0]
 8008570:	f7f7 feb6 	bl	80002e0 <strlen>
 8008574:	f04f 0a00 	mov.w	sl, #0
 8008578:	4607      	mov	r7, r0
 800857a:	f04f 0b00 	mov.w	fp, #0
 800857e:	9617      	str	r6, [sp, #92]	; 0x5c
 8008580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008582:	781a      	ldrb	r2, [r3, #0]
 8008584:	2a0d      	cmp	r2, #13
 8008586:	d834      	bhi.n	80085f2 <_strtod_l+0xa2>
 8008588:	2a09      	cmp	r2, #9
 800858a:	d238      	bcs.n	80085fe <_strtod_l+0xae>
 800858c:	2a00      	cmp	r2, #0
 800858e:	d040      	beq.n	8008612 <_strtod_l+0xc2>
 8008590:	2300      	movs	r3, #0
 8008592:	930d      	str	r3, [sp, #52]	; 0x34
 8008594:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008596:	782b      	ldrb	r3, [r5, #0]
 8008598:	2b30      	cmp	r3, #48	; 0x30
 800859a:	f040 80b3 	bne.w	8008704 <_strtod_l+0x1b4>
 800859e:	786b      	ldrb	r3, [r5, #1]
 80085a0:	2b58      	cmp	r3, #88	; 0x58
 80085a2:	d001      	beq.n	80085a8 <_strtod_l+0x58>
 80085a4:	2b78      	cmp	r3, #120	; 0x78
 80085a6:	d169      	bne.n	800867c <_strtod_l+0x12c>
 80085a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	ab18      	add	r3, sp, #96	; 0x60
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80085b4:	ab19      	add	r3, sp, #100	; 0x64
 80085b6:	4a8f      	ldr	r2, [pc, #572]	; (80087f4 <_strtod_l+0x2a4>)
 80085b8:	a917      	add	r1, sp, #92	; 0x5c
 80085ba:	4620      	mov	r0, r4
 80085bc:	f001 fc57 	bl	8009e6e <__gethex>
 80085c0:	f010 0607 	ands.w	r6, r0, #7
 80085c4:	4607      	mov	r7, r0
 80085c6:	d005      	beq.n	80085d4 <_strtod_l+0x84>
 80085c8:	2e06      	cmp	r6, #6
 80085ca:	d12c      	bne.n	8008626 <_strtod_l+0xd6>
 80085cc:	3501      	adds	r5, #1
 80085ce:	2300      	movs	r3, #0
 80085d0:	9517      	str	r5, [sp, #92]	; 0x5c
 80085d2:	930d      	str	r3, [sp, #52]	; 0x34
 80085d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f040 855e 	bne.w	8009098 <_strtod_l+0xb48>
 80085dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085de:	b1eb      	cbz	r3, 800861c <_strtod_l+0xcc>
 80085e0:	ec4b ab17 	vmov	d7, sl, fp
 80085e4:	eeb1 0b47 	vneg.f64	d0, d7
 80085e8:	b01d      	add	sp, #116	; 0x74
 80085ea:	ecbd 8b0c 	vpop	{d8-d13}
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	2a2b      	cmp	r2, #43	; 0x2b
 80085f4:	d015      	beq.n	8008622 <_strtod_l+0xd2>
 80085f6:	2a2d      	cmp	r2, #45	; 0x2d
 80085f8:	d004      	beq.n	8008604 <_strtod_l+0xb4>
 80085fa:	2a20      	cmp	r2, #32
 80085fc:	d1c8      	bne.n	8008590 <_strtod_l+0x40>
 80085fe:	3301      	adds	r3, #1
 8008600:	9317      	str	r3, [sp, #92]	; 0x5c
 8008602:	e7bd      	b.n	8008580 <_strtod_l+0x30>
 8008604:	2201      	movs	r2, #1
 8008606:	920d      	str	r2, [sp, #52]	; 0x34
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	9217      	str	r2, [sp, #92]	; 0x5c
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1c0      	bne.n	8008594 <_strtod_l+0x44>
 8008612:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008614:	9617      	str	r6, [sp, #92]	; 0x5c
 8008616:	2b00      	cmp	r3, #0
 8008618:	f040 853c 	bne.w	8009094 <_strtod_l+0xb44>
 800861c:	ec4b ab10 	vmov	d0, sl, fp
 8008620:	e7e2      	b.n	80085e8 <_strtod_l+0x98>
 8008622:	2200      	movs	r2, #0
 8008624:	e7ef      	b.n	8008606 <_strtod_l+0xb6>
 8008626:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008628:	b13a      	cbz	r2, 800863a <_strtod_l+0xea>
 800862a:	2135      	movs	r1, #53	; 0x35
 800862c:	a81a      	add	r0, sp, #104	; 0x68
 800862e:	f002 fae2 	bl	800abf6 <__copybits>
 8008632:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008634:	4620      	mov	r0, r4
 8008636:	f001 ff4d 	bl	800a4d4 <_Bfree>
 800863a:	3e01      	subs	r6, #1
 800863c:	2e04      	cmp	r6, #4
 800863e:	d806      	bhi.n	800864e <_strtod_l+0xfe>
 8008640:	e8df f006 	tbb	[pc, r6]
 8008644:	1714030a 	.word	0x1714030a
 8008648:	0a          	.byte	0x0a
 8008649:	00          	.byte	0x00
 800864a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800864e:	073b      	lsls	r3, r7, #28
 8008650:	d5c0      	bpl.n	80085d4 <_strtod_l+0x84>
 8008652:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008656:	e7bd      	b.n	80085d4 <_strtod_l+0x84>
 8008658:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800865c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800865e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008662:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008666:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800866a:	e7f0      	b.n	800864e <_strtod_l+0xfe>
 800866c:	f8df b188 	ldr.w	fp, [pc, #392]	; 80087f8 <_strtod_l+0x2a8>
 8008670:	e7ed      	b.n	800864e <_strtod_l+0xfe>
 8008672:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008676:	f04f 3aff 	mov.w	sl, #4294967295
 800867a:	e7e8      	b.n	800864e <_strtod_l+0xfe>
 800867c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	9217      	str	r2, [sp, #92]	; 0x5c
 8008682:	785b      	ldrb	r3, [r3, #1]
 8008684:	2b30      	cmp	r3, #48	; 0x30
 8008686:	d0f9      	beq.n	800867c <_strtod_l+0x12c>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0a3      	beq.n	80085d4 <_strtod_l+0x84>
 800868c:	2301      	movs	r3, #1
 800868e:	930a      	str	r3, [sp, #40]	; 0x28
 8008690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008692:	930c      	str	r3, [sp, #48]	; 0x30
 8008694:	2300      	movs	r3, #0
 8008696:	9306      	str	r3, [sp, #24]
 8008698:	9308      	str	r3, [sp, #32]
 800869a:	461d      	mov	r5, r3
 800869c:	220a      	movs	r2, #10
 800869e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80086a0:	f890 8000 	ldrb.w	r8, [r0]
 80086a4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 80086a8:	b2d9      	uxtb	r1, r3
 80086aa:	2909      	cmp	r1, #9
 80086ac:	d92c      	bls.n	8008708 <_strtod_l+0x1b8>
 80086ae:	463a      	mov	r2, r7
 80086b0:	f8d9 1000 	ldr.w	r1, [r9]
 80086b4:	f002 fc3a 	bl	800af2c <strncmp>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d035      	beq.n	8008728 <_strtod_l+0x1d8>
 80086bc:	2000      	movs	r0, #0
 80086be:	4642      	mov	r2, r8
 80086c0:	462b      	mov	r3, r5
 80086c2:	4601      	mov	r1, r0
 80086c4:	9004      	str	r0, [sp, #16]
 80086c6:	2a65      	cmp	r2, #101	; 0x65
 80086c8:	d001      	beq.n	80086ce <_strtod_l+0x17e>
 80086ca:	2a45      	cmp	r2, #69	; 0x45
 80086cc:	d117      	bne.n	80086fe <_strtod_l+0x1ae>
 80086ce:	b923      	cbnz	r3, 80086da <_strtod_l+0x18a>
 80086d0:	b910      	cbnz	r0, 80086d8 <_strtod_l+0x188>
 80086d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d09c      	beq.n	8008612 <_strtod_l+0xc2>
 80086d8:	2300      	movs	r3, #0
 80086da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80086dc:	1c72      	adds	r2, r6, #1
 80086de:	9217      	str	r2, [sp, #92]	; 0x5c
 80086e0:	7872      	ldrb	r2, [r6, #1]
 80086e2:	2a2b      	cmp	r2, #43	; 0x2b
 80086e4:	f000 8082 	beq.w	80087ec <_strtod_l+0x29c>
 80086e8:	2a2d      	cmp	r2, #45	; 0x2d
 80086ea:	d079      	beq.n	80087e0 <_strtod_l+0x290>
 80086ec:	f04f 0e00 	mov.w	lr, #0
 80086f0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80086f4:	f1bc 0f09 	cmp.w	ip, #9
 80086f8:	f240 8086 	bls.w	8008808 <_strtod_l+0x2b8>
 80086fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80086fe:	f04f 0800 	mov.w	r8, #0
 8008702:	e0a8      	b.n	8008856 <_strtod_l+0x306>
 8008704:	2300      	movs	r3, #0
 8008706:	e7c2      	b.n	800868e <_strtod_l+0x13e>
 8008708:	2d08      	cmp	r5, #8
 800870a:	bfd5      	itete	le
 800870c:	9908      	ldrle	r1, [sp, #32]
 800870e:	9906      	ldrgt	r1, [sp, #24]
 8008710:	fb02 3301 	mlale	r3, r2, r1, r3
 8008714:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008718:	f100 0001 	add.w	r0, r0, #1
 800871c:	bfd4      	ite	le
 800871e:	9308      	strle	r3, [sp, #32]
 8008720:	9306      	strgt	r3, [sp, #24]
 8008722:	3501      	adds	r5, #1
 8008724:	9017      	str	r0, [sp, #92]	; 0x5c
 8008726:	e7ba      	b.n	800869e <_strtod_l+0x14e>
 8008728:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800872a:	19da      	adds	r2, r3, r7
 800872c:	9217      	str	r2, [sp, #92]	; 0x5c
 800872e:	5dda      	ldrb	r2, [r3, r7]
 8008730:	2d00      	cmp	r5, #0
 8008732:	d038      	beq.n	80087a6 <_strtod_l+0x256>
 8008734:	4601      	mov	r1, r0
 8008736:	462b      	mov	r3, r5
 8008738:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800873c:	2f09      	cmp	r7, #9
 800873e:	d913      	bls.n	8008768 <_strtod_l+0x218>
 8008740:	2701      	movs	r7, #1
 8008742:	9704      	str	r7, [sp, #16]
 8008744:	e7bf      	b.n	80086c6 <_strtod_l+0x176>
 8008746:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	9217      	str	r2, [sp, #92]	; 0x5c
 800874c:	785a      	ldrb	r2, [r3, #1]
 800874e:	3001      	adds	r0, #1
 8008750:	2a30      	cmp	r2, #48	; 0x30
 8008752:	d0f8      	beq.n	8008746 <_strtod_l+0x1f6>
 8008754:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008758:	2b08      	cmp	r3, #8
 800875a:	f200 84a2 	bhi.w	80090a2 <_strtod_l+0xb52>
 800875e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008760:	930c      	str	r3, [sp, #48]	; 0x30
 8008762:	4601      	mov	r1, r0
 8008764:	2000      	movs	r0, #0
 8008766:	4603      	mov	r3, r0
 8008768:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800876c:	f100 0701 	add.w	r7, r0, #1
 8008770:	d013      	beq.n	800879a <_strtod_l+0x24a>
 8008772:	4439      	add	r1, r7
 8008774:	eb00 0e03 	add.w	lr, r0, r3
 8008778:	461f      	mov	r7, r3
 800877a:	f04f 0c0a 	mov.w	ip, #10
 800877e:	45be      	cmp	lr, r7
 8008780:	d113      	bne.n	80087aa <_strtod_l+0x25a>
 8008782:	181f      	adds	r7, r3, r0
 8008784:	2f08      	cmp	r7, #8
 8008786:	f103 0301 	add.w	r3, r3, #1
 800878a:	4403      	add	r3, r0
 800878c:	dc1d      	bgt.n	80087ca <_strtod_l+0x27a>
 800878e:	9a08      	ldr	r2, [sp, #32]
 8008790:	200a      	movs	r0, #10
 8008792:	fb00 8202 	mla	r2, r0, r2, r8
 8008796:	9208      	str	r2, [sp, #32]
 8008798:	2700      	movs	r7, #0
 800879a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800879c:	1c50      	adds	r0, r2, #1
 800879e:	9017      	str	r0, [sp, #92]	; 0x5c
 80087a0:	7852      	ldrb	r2, [r2, #1]
 80087a2:	4638      	mov	r0, r7
 80087a4:	e7c8      	b.n	8008738 <_strtod_l+0x1e8>
 80087a6:	4628      	mov	r0, r5
 80087a8:	e7d2      	b.n	8008750 <_strtod_l+0x200>
 80087aa:	2f08      	cmp	r7, #8
 80087ac:	f107 0701 	add.w	r7, r7, #1
 80087b0:	dc04      	bgt.n	80087bc <_strtod_l+0x26c>
 80087b2:	9a08      	ldr	r2, [sp, #32]
 80087b4:	fb0c f202 	mul.w	r2, ip, r2
 80087b8:	9208      	str	r2, [sp, #32]
 80087ba:	e7e0      	b.n	800877e <_strtod_l+0x22e>
 80087bc:	2f10      	cmp	r7, #16
 80087be:	bfde      	ittt	le
 80087c0:	9a06      	ldrle	r2, [sp, #24]
 80087c2:	fb0c f202 	mulle.w	r2, ip, r2
 80087c6:	9206      	strle	r2, [sp, #24]
 80087c8:	e7d9      	b.n	800877e <_strtod_l+0x22e>
 80087ca:	2b10      	cmp	r3, #16
 80087cc:	bfdf      	itttt	le
 80087ce:	9a06      	ldrle	r2, [sp, #24]
 80087d0:	200a      	movle	r0, #10
 80087d2:	fb00 8202 	mlale	r2, r0, r2, r8
 80087d6:	9206      	strle	r2, [sp, #24]
 80087d8:	e7de      	b.n	8008798 <_strtod_l+0x248>
 80087da:	2301      	movs	r3, #1
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	e777      	b.n	80086d0 <_strtod_l+0x180>
 80087e0:	f04f 0e01 	mov.w	lr, #1
 80087e4:	1cb2      	adds	r2, r6, #2
 80087e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80087e8:	78b2      	ldrb	r2, [r6, #2]
 80087ea:	e781      	b.n	80086f0 <_strtod_l+0x1a0>
 80087ec:	f04f 0e00 	mov.w	lr, #0
 80087f0:	e7f8      	b.n	80087e4 <_strtod_l+0x294>
 80087f2:	bf00      	nop
 80087f4:	0800b170 	.word	0x0800b170
 80087f8:	7ff00000 	.word	0x7ff00000
 80087fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087fe:	f102 0c01 	add.w	ip, r2, #1
 8008802:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8008806:	7852      	ldrb	r2, [r2, #1]
 8008808:	2a30      	cmp	r2, #48	; 0x30
 800880a:	d0f7      	beq.n	80087fc <_strtod_l+0x2ac>
 800880c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8008810:	f1bc 0f08 	cmp.w	ip, #8
 8008814:	f63f af73 	bhi.w	80086fe <_strtod_l+0x1ae>
 8008818:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800881c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800881e:	920e      	str	r2, [sp, #56]	; 0x38
 8008820:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008822:	f102 0c01 	add.w	ip, r2, #1
 8008826:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800882a:	7852      	ldrb	r2, [r2, #1]
 800882c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8008830:	f1b9 0f09 	cmp.w	r9, #9
 8008834:	d939      	bls.n	80088aa <_strtod_l+0x35a>
 8008836:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008838:	ebac 0c07 	sub.w	ip, ip, r7
 800883c:	f1bc 0f08 	cmp.w	ip, #8
 8008840:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8008844:	dc37      	bgt.n	80088b6 <_strtod_l+0x366>
 8008846:	45e0      	cmp	r8, ip
 8008848:	bfa8      	it	ge
 800884a:	46e0      	movge	r8, ip
 800884c:	f1be 0f00 	cmp.w	lr, #0
 8008850:	d001      	beq.n	8008856 <_strtod_l+0x306>
 8008852:	f1c8 0800 	rsb	r8, r8, #0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d151      	bne.n	80088fe <_strtod_l+0x3ae>
 800885a:	2800      	cmp	r0, #0
 800885c:	f47f aeba 	bne.w	80085d4 <_strtod_l+0x84>
 8008860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008862:	2b00      	cmp	r3, #0
 8008864:	f47f aeb6 	bne.w	80085d4 <_strtod_l+0x84>
 8008868:	9b04      	ldr	r3, [sp, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	f47f aed1 	bne.w	8008612 <_strtod_l+0xc2>
 8008870:	2a4e      	cmp	r2, #78	; 0x4e
 8008872:	d027      	beq.n	80088c4 <_strtod_l+0x374>
 8008874:	dc21      	bgt.n	80088ba <_strtod_l+0x36a>
 8008876:	2a49      	cmp	r2, #73	; 0x49
 8008878:	f47f aecb 	bne.w	8008612 <_strtod_l+0xc2>
 800887c:	499a      	ldr	r1, [pc, #616]	; (8008ae8 <_strtod_l+0x598>)
 800887e:	a817      	add	r0, sp, #92	; 0x5c
 8008880:	f001 fd28 	bl	800a2d4 <__match>
 8008884:	2800      	cmp	r0, #0
 8008886:	f43f aec4 	beq.w	8008612 <_strtod_l+0xc2>
 800888a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800888c:	4997      	ldr	r1, [pc, #604]	; (8008aec <_strtod_l+0x59c>)
 800888e:	3b01      	subs	r3, #1
 8008890:	a817      	add	r0, sp, #92	; 0x5c
 8008892:	9317      	str	r3, [sp, #92]	; 0x5c
 8008894:	f001 fd1e 	bl	800a2d4 <__match>
 8008898:	b910      	cbnz	r0, 80088a0 <_strtod_l+0x350>
 800889a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800889c:	3301      	adds	r3, #1
 800889e:	9317      	str	r3, [sp, #92]	; 0x5c
 80088a0:	f8df b260 	ldr.w	fp, [pc, #608]	; 8008b04 <_strtod_l+0x5b4>
 80088a4:	f04f 0a00 	mov.w	sl, #0
 80088a8:	e694      	b.n	80085d4 <_strtod_l+0x84>
 80088aa:	270a      	movs	r7, #10
 80088ac:	fb07 2808 	mla	r8, r7, r8, r2
 80088b0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80088b4:	e7b4      	b.n	8008820 <_strtod_l+0x2d0>
 80088b6:	46e0      	mov	r8, ip
 80088b8:	e7c8      	b.n	800884c <_strtod_l+0x2fc>
 80088ba:	2a69      	cmp	r2, #105	; 0x69
 80088bc:	d0de      	beq.n	800887c <_strtod_l+0x32c>
 80088be:	2a6e      	cmp	r2, #110	; 0x6e
 80088c0:	f47f aea7 	bne.w	8008612 <_strtod_l+0xc2>
 80088c4:	498a      	ldr	r1, [pc, #552]	; (8008af0 <_strtod_l+0x5a0>)
 80088c6:	a817      	add	r0, sp, #92	; 0x5c
 80088c8:	f001 fd04 	bl	800a2d4 <__match>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f43f aea0 	beq.w	8008612 <_strtod_l+0xc2>
 80088d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b28      	cmp	r3, #40	; 0x28
 80088d8:	d10e      	bne.n	80088f8 <_strtod_l+0x3a8>
 80088da:	aa1a      	add	r2, sp, #104	; 0x68
 80088dc:	4985      	ldr	r1, [pc, #532]	; (8008af4 <_strtod_l+0x5a4>)
 80088de:	a817      	add	r0, sp, #92	; 0x5c
 80088e0:	f001 fd0c 	bl	800a2fc <__hexnan>
 80088e4:	2805      	cmp	r0, #5
 80088e6:	d107      	bne.n	80088f8 <_strtod_l+0x3a8>
 80088e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80088ea:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80088ee:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80088f2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80088f6:	e66d      	b.n	80085d4 <_strtod_l+0x84>
 80088f8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8008b08 <_strtod_l+0x5b8>
 80088fc:	e7d2      	b.n	80088a4 <_strtod_l+0x354>
 80088fe:	eddd 7a08 	vldr	s15, [sp, #32]
 8008902:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008906:	eba8 0201 	sub.w	r2, r8, r1
 800890a:	2d00      	cmp	r5, #0
 800890c:	bf08      	it	eq
 800890e:	461d      	moveq	r5, r3
 8008910:	2b10      	cmp	r3, #16
 8008912:	9204      	str	r2, [sp, #16]
 8008914:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008918:	461a      	mov	r2, r3
 800891a:	bfa8      	it	ge
 800891c:	2210      	movge	r2, #16
 800891e:	2b09      	cmp	r3, #9
 8008920:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008924:	dc14      	bgt.n	8008950 <_strtod_l+0x400>
 8008926:	9904      	ldr	r1, [sp, #16]
 8008928:	2900      	cmp	r1, #0
 800892a:	f43f ae53 	beq.w	80085d4 <_strtod_l+0x84>
 800892e:	9904      	ldr	r1, [sp, #16]
 8008930:	dd72      	ble.n	8008a18 <_strtod_l+0x4c8>
 8008932:	2916      	cmp	r1, #22
 8008934:	dc5a      	bgt.n	80089ec <_strtod_l+0x49c>
 8008936:	4970      	ldr	r1, [pc, #448]	; (8008af8 <_strtod_l+0x5a8>)
 8008938:	9b04      	ldr	r3, [sp, #16]
 800893a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800893e:	ed91 7b00 	vldr	d7, [r1]
 8008942:	ec4b ab16 	vmov	d6, sl, fp
 8008946:	ee27 7b06 	vmul.f64	d7, d7, d6
 800894a:	ec5b ab17 	vmov	sl, fp, d7
 800894e:	e641      	b.n	80085d4 <_strtod_l+0x84>
 8008950:	4969      	ldr	r1, [pc, #420]	; (8008af8 <_strtod_l+0x5a8>)
 8008952:	eddd 7a06 	vldr	s15, [sp, #24]
 8008956:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800895a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800895e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008962:	2b0f      	cmp	r3, #15
 8008964:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008968:	eea5 7b06 	vfma.f64	d7, d5, d6
 800896c:	ec5b ab17 	vmov	sl, fp, d7
 8008970:	ddd9      	ble.n	8008926 <_strtod_l+0x3d6>
 8008972:	9904      	ldr	r1, [sp, #16]
 8008974:	1a9a      	subs	r2, r3, r2
 8008976:	440a      	add	r2, r1
 8008978:	2a00      	cmp	r2, #0
 800897a:	f340 8096 	ble.w	8008aaa <_strtod_l+0x55a>
 800897e:	f012 000f 	ands.w	r0, r2, #15
 8008982:	d00a      	beq.n	800899a <_strtod_l+0x44a>
 8008984:	495c      	ldr	r1, [pc, #368]	; (8008af8 <_strtod_l+0x5a8>)
 8008986:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800898a:	ed91 7b00 	vldr	d7, [r1]
 800898e:	ec4b ab16 	vmov	d6, sl, fp
 8008992:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008996:	ec5b ab17 	vmov	sl, fp, d7
 800899a:	f032 020f 	bics.w	r2, r2, #15
 800899e:	d072      	beq.n	8008a86 <_strtod_l+0x536>
 80089a0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80089a4:	dd45      	ble.n	8008a32 <_strtod_l+0x4e2>
 80089a6:	2500      	movs	r5, #0
 80089a8:	46a8      	mov	r8, r5
 80089aa:	9506      	str	r5, [sp, #24]
 80089ac:	46a9      	mov	r9, r5
 80089ae:	2322      	movs	r3, #34	; 0x22
 80089b0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8008b04 <_strtod_l+0x5b4>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	f04f 0a00 	mov.w	sl, #0
 80089ba:	9b06      	ldr	r3, [sp, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f43f ae09 	beq.w	80085d4 <_strtod_l+0x84>
 80089c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089c4:	4620      	mov	r0, r4
 80089c6:	f001 fd85 	bl	800a4d4 <_Bfree>
 80089ca:	4649      	mov	r1, r9
 80089cc:	4620      	mov	r0, r4
 80089ce:	f001 fd81 	bl	800a4d4 <_Bfree>
 80089d2:	4641      	mov	r1, r8
 80089d4:	4620      	mov	r0, r4
 80089d6:	f001 fd7d 	bl	800a4d4 <_Bfree>
 80089da:	9906      	ldr	r1, [sp, #24]
 80089dc:	4620      	mov	r0, r4
 80089de:	f001 fd79 	bl	800a4d4 <_Bfree>
 80089e2:	4629      	mov	r1, r5
 80089e4:	4620      	mov	r0, r4
 80089e6:	f001 fd75 	bl	800a4d4 <_Bfree>
 80089ea:	e5f3      	b.n	80085d4 <_strtod_l+0x84>
 80089ec:	9804      	ldr	r0, [sp, #16]
 80089ee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80089f2:	4281      	cmp	r1, r0
 80089f4:	dbbd      	blt.n	8008972 <_strtod_l+0x422>
 80089f6:	4a40      	ldr	r2, [pc, #256]	; (8008af8 <_strtod_l+0x5a8>)
 80089f8:	f1c3 030f 	rsb	r3, r3, #15
 80089fc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008a00:	ed91 7b00 	vldr	d7, [r1]
 8008a04:	ec4b ab16 	vmov	d6, sl, fp
 8008a08:	1ac3      	subs	r3, r0, r3
 8008a0a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008a0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a12:	ed92 6b00 	vldr	d6, [r2]
 8008a16:	e796      	b.n	8008946 <_strtod_l+0x3f6>
 8008a18:	3116      	adds	r1, #22
 8008a1a:	dbaa      	blt.n	8008972 <_strtod_l+0x422>
 8008a1c:	4936      	ldr	r1, [pc, #216]	; (8008af8 <_strtod_l+0x5a8>)
 8008a1e:	9b04      	ldr	r3, [sp, #16]
 8008a20:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8008a24:	ed91 7b00 	vldr	d7, [r1]
 8008a28:	ec4b ab16 	vmov	d6, sl, fp
 8008a2c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008a30:	e78b      	b.n	800894a <_strtod_l+0x3fa>
 8008a32:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8008a36:	2000      	movs	r0, #0
 8008a38:	4e30      	ldr	r6, [pc, #192]	; (8008afc <_strtod_l+0x5ac>)
 8008a3a:	1112      	asrs	r2, r2, #4
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	2a01      	cmp	r2, #1
 8008a40:	dc23      	bgt.n	8008a8a <_strtod_l+0x53a>
 8008a42:	b108      	cbz	r0, 8008a48 <_strtod_l+0x4f8>
 8008a44:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8008a48:	4a2c      	ldr	r2, [pc, #176]	; (8008afc <_strtod_l+0x5ac>)
 8008a4a:	482d      	ldr	r0, [pc, #180]	; (8008b00 <_strtod_l+0x5b0>)
 8008a4c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008a50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008a54:	ed91 7b00 	vldr	d7, [r1]
 8008a58:	ec4b ab16 	vmov	d6, sl, fp
 8008a5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a60:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a64:	9907      	ldr	r1, [sp, #28]
 8008a66:	4a27      	ldr	r2, [pc, #156]	; (8008b04 <_strtod_l+0x5b4>)
 8008a68:	400a      	ands	r2, r1
 8008a6a:	4282      	cmp	r2, r0
 8008a6c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8008a70:	d899      	bhi.n	80089a6 <_strtod_l+0x456>
 8008a72:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008a76:	4282      	cmp	r2, r0
 8008a78:	bf86      	itte	hi
 8008a7a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8008b0c <_strtod_l+0x5bc>
 8008a7e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a82:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8008a86:	2700      	movs	r7, #0
 8008a88:	e070      	b.n	8008b6c <_strtod_l+0x61c>
 8008a8a:	07d7      	lsls	r7, r2, #31
 8008a8c:	d50a      	bpl.n	8008aa4 <_strtod_l+0x554>
 8008a8e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8008a92:	ed90 7b00 	vldr	d7, [r0]
 8008a96:	ed9d 6b06 	vldr	d6, [sp, #24]
 8008a9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008a9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	3101      	adds	r1, #1
 8008aa6:	1052      	asrs	r2, r2, #1
 8008aa8:	e7c9      	b.n	8008a3e <_strtod_l+0x4ee>
 8008aaa:	d0ec      	beq.n	8008a86 <_strtod_l+0x536>
 8008aac:	4252      	negs	r2, r2
 8008aae:	f012 000f 	ands.w	r0, r2, #15
 8008ab2:	d00a      	beq.n	8008aca <_strtod_l+0x57a>
 8008ab4:	4910      	ldr	r1, [pc, #64]	; (8008af8 <_strtod_l+0x5a8>)
 8008ab6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008aba:	ed91 7b00 	vldr	d7, [r1]
 8008abe:	ec4b ab16 	vmov	d6, sl, fp
 8008ac2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008ac6:	ec5b ab17 	vmov	sl, fp, d7
 8008aca:	1112      	asrs	r2, r2, #4
 8008acc:	d0db      	beq.n	8008a86 <_strtod_l+0x536>
 8008ace:	2a1f      	cmp	r2, #31
 8008ad0:	dd1e      	ble.n	8008b10 <_strtod_l+0x5c0>
 8008ad2:	2500      	movs	r5, #0
 8008ad4:	46a8      	mov	r8, r5
 8008ad6:	9506      	str	r5, [sp, #24]
 8008ad8:	46a9      	mov	r9, r5
 8008ada:	2322      	movs	r3, #34	; 0x22
 8008adc:	f04f 0a00 	mov.w	sl, #0
 8008ae0:	f04f 0b00 	mov.w	fp, #0
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	e768      	b.n	80089ba <_strtod_l+0x46a>
 8008ae8:	0800b139 	.word	0x0800b139
 8008aec:	0800b1c3 	.word	0x0800b1c3
 8008af0:	0800b141 	.word	0x0800b141
 8008af4:	0800b184 	.word	0x0800b184
 8008af8:	0800b200 	.word	0x0800b200
 8008afc:	0800b1d8 	.word	0x0800b1d8
 8008b00:	7ca00000 	.word	0x7ca00000
 8008b04:	7ff00000 	.word	0x7ff00000
 8008b08:	fff80000 	.word	0xfff80000
 8008b0c:	7fefffff 	.word	0x7fefffff
 8008b10:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8008b14:	f012 0710 	ands.w	r7, r2, #16
 8008b18:	49ab      	ldr	r1, [pc, #684]	; (8008dc8 <_strtod_l+0x878>)
 8008b1a:	bf18      	it	ne
 8008b1c:	276a      	movne	r7, #106	; 0x6a
 8008b1e:	2000      	movs	r0, #0
 8008b20:	2a00      	cmp	r2, #0
 8008b22:	f300 8113 	bgt.w	8008d4c <_strtod_l+0x7fc>
 8008b26:	b108      	cbz	r0, 8008b2c <_strtod_l+0x5dc>
 8008b28:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8008b2c:	b1bf      	cbz	r7, 8008b5e <_strtod_l+0x60e>
 8008b2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b32:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	4659      	mov	r1, fp
 8008b3a:	dd10      	ble.n	8008b5e <_strtod_l+0x60e>
 8008b3c:	2a1f      	cmp	r2, #31
 8008b3e:	f340 8113 	ble.w	8008d68 <_strtod_l+0x818>
 8008b42:	2a34      	cmp	r2, #52	; 0x34
 8008b44:	bfde      	ittt	le
 8008b46:	3a20      	suble	r2, #32
 8008b48:	f04f 30ff 	movle.w	r0, #4294967295
 8008b4c:	fa00 f202 	lslle.w	r2, r0, r2
 8008b50:	f04f 0a00 	mov.w	sl, #0
 8008b54:	bfcc      	ite	gt
 8008b56:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008b5a:	ea02 0b01 	andle.w	fp, r2, r1
 8008b5e:	ec4b ab17 	vmov	d7, sl, fp
 8008b62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6a:	d0b2      	beq.n	8008ad2 <_strtod_l+0x582>
 8008b6c:	9a08      	ldr	r2, [sp, #32]
 8008b6e:	9200      	str	r2, [sp, #0]
 8008b70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b72:	462a      	mov	r2, r5
 8008b74:	4620      	mov	r0, r4
 8008b76:	f001 fcff 	bl	800a578 <__s2b>
 8008b7a:	9006      	str	r0, [sp, #24]
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	f43f af12 	beq.w	80089a6 <_strtod_l+0x456>
 8008b82:	9a04      	ldr	r2, [sp, #16]
 8008b84:	9b04      	ldr	r3, [sp, #16]
 8008b86:	2a00      	cmp	r2, #0
 8008b88:	f1c3 0300 	rsb	r3, r3, #0
 8008b8c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8008db0 <_strtod_l+0x860>
 8008b90:	bfa8      	it	ge
 8008b92:	2300      	movge	r3, #0
 8008b94:	ed9f ab88 	vldr	d10, [pc, #544]	; 8008db8 <_strtod_l+0x868>
 8008b98:	ed9f bb89 	vldr	d11, [pc, #548]	; 8008dc0 <_strtod_l+0x870>
 8008b9c:	930e      	str	r3, [sp, #56]	; 0x38
 8008b9e:	2500      	movs	r5, #0
 8008ba0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008ba4:	9310      	str	r3, [sp, #64]	; 0x40
 8008ba6:	46a8      	mov	r8, r5
 8008ba8:	9b06      	ldr	r3, [sp, #24]
 8008baa:	4620      	mov	r0, r4
 8008bac:	6859      	ldr	r1, [r3, #4]
 8008bae:	f001 fc5d 	bl	800a46c <_Balloc>
 8008bb2:	4681      	mov	r9, r0
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f43f aefa 	beq.w	80089ae <_strtod_l+0x45e>
 8008bba:	9b06      	ldr	r3, [sp, #24]
 8008bbc:	691a      	ldr	r2, [r3, #16]
 8008bbe:	3202      	adds	r2, #2
 8008bc0:	f103 010c 	add.w	r1, r3, #12
 8008bc4:	0092      	lsls	r2, r2, #2
 8008bc6:	300c      	adds	r0, #12
 8008bc8:	f7fe fda2 	bl	8007710 <memcpy>
 8008bcc:	aa1a      	add	r2, sp, #104	; 0x68
 8008bce:	a919      	add	r1, sp, #100	; 0x64
 8008bd0:	ec4b ab10 	vmov	d0, sl, fp
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008bda:	f001 ff89 	bl	800aaf0 <__d2b>
 8008bde:	9018      	str	r0, [sp, #96]	; 0x60
 8008be0:	2800      	cmp	r0, #0
 8008be2:	f43f aee4 	beq.w	80089ae <_strtod_l+0x45e>
 8008be6:	2101      	movs	r1, #1
 8008be8:	4620      	mov	r0, r4
 8008bea:	f001 fd51 	bl	800a690 <__i2b>
 8008bee:	4680      	mov	r8, r0
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f43f aedc 	beq.w	80089ae <_strtod_l+0x45e>
 8008bf6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008bf8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008bfa:	2e00      	cmp	r6, #0
 8008bfc:	bfb1      	iteee	lt
 8008bfe:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8008c00:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008c02:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8008c04:	18f3      	addge	r3, r6, r3
 8008c06:	bfba      	itte	lt
 8008c08:	1b98      	sublt	r0, r3, r6
 8008c0a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008c0c:	9308      	strge	r3, [sp, #32]
 8008c0e:	eba6 0607 	sub.w	r6, r6, r7
 8008c12:	bfb8      	it	lt
 8008c14:	9308      	strlt	r3, [sp, #32]
 8008c16:	4416      	add	r6, r2
 8008c18:	4b6c      	ldr	r3, [pc, #432]	; (8008dcc <_strtod_l+0x87c>)
 8008c1a:	3e01      	subs	r6, #1
 8008c1c:	429e      	cmp	r6, r3
 8008c1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008c22:	f280 80b4 	bge.w	8008d8e <_strtod_l+0x83e>
 8008c26:	1b9b      	subs	r3, r3, r6
 8008c28:	2b1f      	cmp	r3, #31
 8008c2a:	eba2 0203 	sub.w	r2, r2, r3
 8008c2e:	f04f 0101 	mov.w	r1, #1
 8008c32:	f300 80a0 	bgt.w	8008d76 <_strtod_l+0x826>
 8008c36:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3a:	9311      	str	r3, [sp, #68]	; 0x44
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	4413      	add	r3, r2
 8008c44:	4402      	add	r2, r0
 8008c46:	18be      	adds	r6, r7, r2
 8008c48:	9a08      	ldr	r2, [sp, #32]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	bfa8      	it	ge
 8008c4e:	461a      	movge	r2, r3
 8008c50:	42b2      	cmp	r2, r6
 8008c52:	bfa8      	it	ge
 8008c54:	4632      	movge	r2, r6
 8008c56:	2a00      	cmp	r2, #0
 8008c58:	dd04      	ble.n	8008c64 <_strtod_l+0x714>
 8008c5a:	9908      	ldr	r1, [sp, #32]
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	1ab6      	subs	r6, r6, r2
 8008c60:	1a8a      	subs	r2, r1, r2
 8008c62:	9208      	str	r2, [sp, #32]
 8008c64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c66:	b1c2      	cbz	r2, 8008c9a <_strtod_l+0x74a>
 8008c68:	4641      	mov	r1, r8
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	9315      	str	r3, [sp, #84]	; 0x54
 8008c6e:	f001 fdaf 	bl	800a7d0 <__pow5mult>
 8008c72:	4680      	mov	r8, r0
 8008c74:	2800      	cmp	r0, #0
 8008c76:	f43f ae9a 	beq.w	80089ae <_strtod_l+0x45e>
 8008c7a:	4601      	mov	r1, r0
 8008c7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f001 fd0f 	bl	800a6a2 <__multiply>
 8008c84:	900c      	str	r0, [sp, #48]	; 0x30
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f43f ae91 	beq.w	80089ae <_strtod_l+0x45e>
 8008c8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f001 fc20 	bl	800a4d4 <_Bfree>
 8008c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c98:	9218      	str	r2, [sp, #96]	; 0x60
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	dc7c      	bgt.n	8008d98 <_strtod_l+0x848>
 8008c9e:	9b04      	ldr	r3, [sp, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dd08      	ble.n	8008cb6 <_strtod_l+0x766>
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f001 fd91 	bl	800a7d0 <__pow5mult>
 8008cae:	4681      	mov	r9, r0
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f43f ae7c 	beq.w	80089ae <_strtod_l+0x45e>
 8008cb6:	2e00      	cmp	r6, #0
 8008cb8:	dd08      	ble.n	8008ccc <_strtod_l+0x77c>
 8008cba:	4649      	mov	r1, r9
 8008cbc:	4632      	mov	r2, r6
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f001 fdd4 	bl	800a86c <__lshift>
 8008cc4:	4681      	mov	r9, r0
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f43f ae71 	beq.w	80089ae <_strtod_l+0x45e>
 8008ccc:	9b08      	ldr	r3, [sp, #32]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dd08      	ble.n	8008ce4 <_strtod_l+0x794>
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f001 fdc8 	bl	800a86c <__lshift>
 8008cdc:	4680      	mov	r8, r0
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f43f ae65 	beq.w	80089ae <_strtod_l+0x45e>
 8008ce4:	464a      	mov	r2, r9
 8008ce6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f001 fe2d 	bl	800a948 <__mdiff>
 8008cee:	4605      	mov	r5, r0
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	f43f ae5c 	beq.w	80089ae <_strtod_l+0x45e>
 8008cf6:	68c3      	ldr	r3, [r0, #12]
 8008cf8:	930c      	str	r3, [sp, #48]	; 0x30
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60c3      	str	r3, [r0, #12]
 8008cfe:	4641      	mov	r1, r8
 8008d00:	f001 fe08 	bl	800a914 <__mcmp>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	da63      	bge.n	8008dd0 <_strtod_l+0x880>
 8008d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d0a:	b9e3      	cbnz	r3, 8008d46 <_strtod_l+0x7f6>
 8008d0c:	f1ba 0f00 	cmp.w	sl, #0
 8008d10:	d119      	bne.n	8008d46 <_strtod_l+0x7f6>
 8008d12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d16:	b9b3      	cbnz	r3, 8008d46 <_strtod_l+0x7f6>
 8008d18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d1c:	0d1b      	lsrs	r3, r3, #20
 8008d1e:	051b      	lsls	r3, r3, #20
 8008d20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d24:	d90f      	bls.n	8008d46 <_strtod_l+0x7f6>
 8008d26:	696b      	ldr	r3, [r5, #20]
 8008d28:	b913      	cbnz	r3, 8008d30 <_strtod_l+0x7e0>
 8008d2a:	692b      	ldr	r3, [r5, #16]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	dd0a      	ble.n	8008d46 <_strtod_l+0x7f6>
 8008d30:	4629      	mov	r1, r5
 8008d32:	2201      	movs	r2, #1
 8008d34:	4620      	mov	r0, r4
 8008d36:	f001 fd99 	bl	800a86c <__lshift>
 8008d3a:	4641      	mov	r1, r8
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	f001 fde9 	bl	800a914 <__mcmp>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	dc75      	bgt.n	8008e32 <_strtod_l+0x8e2>
 8008d46:	2f00      	cmp	r7, #0
 8008d48:	d17f      	bne.n	8008e4a <_strtod_l+0x8fa>
 8008d4a:	e63a      	b.n	80089c2 <_strtod_l+0x472>
 8008d4c:	07d6      	lsls	r6, r2, #31
 8008d4e:	d508      	bpl.n	8008d62 <_strtod_l+0x812>
 8008d50:	ed9d 6b06 	vldr	d6, [sp, #24]
 8008d54:	ed91 7b00 	vldr	d7, [r1]
 8008d58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008d5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d60:	2001      	movs	r0, #1
 8008d62:	1052      	asrs	r2, r2, #1
 8008d64:	3108      	adds	r1, #8
 8008d66:	e6db      	b.n	8008b20 <_strtod_l+0x5d0>
 8008d68:	f04f 31ff 	mov.w	r1, #4294967295
 8008d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8008d70:	ea02 0a0a 	and.w	sl, r2, sl
 8008d74:	e6f3      	b.n	8008b5e <_strtod_l+0x60e>
 8008d76:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008d7a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008d7e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008d82:	36e2      	adds	r6, #226	; 0xe2
 8008d84:	fa01 f306 	lsl.w	r3, r1, r6
 8008d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d8a:	9111      	str	r1, [sp, #68]	; 0x44
 8008d8c:	e758      	b.n	8008c40 <_strtod_l+0x6f0>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d92:	2301      	movs	r3, #1
 8008d94:	9311      	str	r3, [sp, #68]	; 0x44
 8008d96:	e753      	b.n	8008c40 <_strtod_l+0x6f0>
 8008d98:	461a      	mov	r2, r3
 8008d9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f001 fd65 	bl	800a86c <__lshift>
 8008da2:	9018      	str	r0, [sp, #96]	; 0x60
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f47f af7a 	bne.w	8008c9e <_strtod_l+0x74e>
 8008daa:	e600      	b.n	80089ae <_strtod_l+0x45e>
 8008dac:	f3af 8000 	nop.w
 8008db0:	94a03595 	.word	0x94a03595
 8008db4:	3fdfffff 	.word	0x3fdfffff
 8008db8:	35afe535 	.word	0x35afe535
 8008dbc:	3fe00000 	.word	0x3fe00000
 8008dc0:	94a03595 	.word	0x94a03595
 8008dc4:	3fcfffff 	.word	0x3fcfffff
 8008dc8:	0800b198 	.word	0x0800b198
 8008dcc:	fffffc02 	.word	0xfffffc02
 8008dd0:	f8cd b020 	str.w	fp, [sp, #32]
 8008dd4:	f040 8085 	bne.w	8008ee2 <_strtod_l+0x992>
 8008dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dde:	b322      	cbz	r2, 8008e2a <_strtod_l+0x8da>
 8008de0:	4ab7      	ldr	r2, [pc, #732]	; (80090c0 <_strtod_l+0xb70>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d154      	bne.n	8008e90 <_strtod_l+0x940>
 8008de6:	4651      	mov	r1, sl
 8008de8:	b1e7      	cbz	r7, 8008e24 <_strtod_l+0x8d4>
 8008dea:	4bb6      	ldr	r3, [pc, #728]	; (80090c4 <_strtod_l+0xb74>)
 8008dec:	465a      	mov	r2, fp
 8008dee:	4013      	ands	r3, r2
 8008df0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008df4:	f04f 32ff 	mov.w	r2, #4294967295
 8008df8:	d803      	bhi.n	8008e02 <_strtod_l+0x8b2>
 8008dfa:	0d1b      	lsrs	r3, r3, #20
 8008dfc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e00:	409a      	lsls	r2, r3
 8008e02:	4291      	cmp	r1, r2
 8008e04:	d144      	bne.n	8008e90 <_strtod_l+0x940>
 8008e06:	4bb0      	ldr	r3, [pc, #704]	; (80090c8 <_strtod_l+0xb78>)
 8008e08:	9a08      	ldr	r2, [sp, #32]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d102      	bne.n	8008e14 <_strtod_l+0x8c4>
 8008e0e:	3101      	adds	r1, #1
 8008e10:	f43f adcd 	beq.w	80089ae <_strtod_l+0x45e>
 8008e14:	4bab      	ldr	r3, [pc, #684]	; (80090c4 <_strtod_l+0xb74>)
 8008e16:	9a08      	ldr	r2, [sp, #32]
 8008e18:	401a      	ands	r2, r3
 8008e1a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8008e1e:	f04f 0a00 	mov.w	sl, #0
 8008e22:	e790      	b.n	8008d46 <_strtod_l+0x7f6>
 8008e24:	f04f 32ff 	mov.w	r2, #4294967295
 8008e28:	e7eb      	b.n	8008e02 <_strtod_l+0x8b2>
 8008e2a:	bb8b      	cbnz	r3, 8008e90 <_strtod_l+0x940>
 8008e2c:	f1ba 0f00 	cmp.w	sl, #0
 8008e30:	d12e      	bne.n	8008e90 <_strtod_l+0x940>
 8008e32:	465b      	mov	r3, fp
 8008e34:	4aa3      	ldr	r2, [pc, #652]	; (80090c4 <_strtod_l+0xb74>)
 8008e36:	b30f      	cbz	r7, 8008e7c <_strtod_l+0x92c>
 8008e38:	ea02 010b 	and.w	r1, r2, fp
 8008e3c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008e40:	dc1c      	bgt.n	8008e7c <_strtod_l+0x92c>
 8008e42:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e46:	f77f ae48 	ble.w	8008ada <_strtod_l+0x58a>
 8008e4a:	4aa0      	ldr	r2, [pc, #640]	; (80090cc <_strtod_l+0xb7c>)
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8008e52:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8008e56:	ec4b ab17 	vmov	d7, sl, fp
 8008e5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e5e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e62:	9b05      	ldr	r3, [sp, #20]
 8008e64:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f47f adaa 	bne.w	80089c2 <_strtod_l+0x472>
 8008e6e:	9b04      	ldr	r3, [sp, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f47f ada6 	bne.w	80089c2 <_strtod_l+0x472>
 8008e76:	2322      	movs	r3, #34	; 0x22
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	e5a2      	b.n	80089c2 <_strtod_l+0x472>
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008e82:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e86:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e8a:	f04f 3aff 	mov.w	sl, #4294967295
 8008e8e:	e75a      	b.n	8008d46 <_strtod_l+0x7f6>
 8008e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e92:	b18b      	cbz	r3, 8008eb8 <_strtod_l+0x968>
 8008e94:	9a08      	ldr	r2, [sp, #32]
 8008e96:	4213      	tst	r3, r2
 8008e98:	f43f af55 	beq.w	8008d46 <_strtod_l+0x7f6>
 8008e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e9e:	463a      	mov	r2, r7
 8008ea0:	4650      	mov	r0, sl
 8008ea2:	4659      	mov	r1, fp
 8008ea4:	b163      	cbz	r3, 8008ec0 <_strtod_l+0x970>
 8008ea6:	f7ff fb39 	bl	800851c <sulp>
 8008eaa:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8008eae:	ee37 7b00 	vadd.f64	d7, d7, d0
 8008eb2:	ec5b ab17 	vmov	sl, fp, d7
 8008eb6:	e746      	b.n	8008d46 <_strtod_l+0x7f6>
 8008eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eba:	ea13 0f0a 	tst.w	r3, sl
 8008ebe:	e7eb      	b.n	8008e98 <_strtod_l+0x948>
 8008ec0:	f7ff fb2c 	bl	800851c <sulp>
 8008ec4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8008ec8:	ee37 7b40 	vsub.f64	d7, d7, d0
 8008ecc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008ed0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008edc:	f43f adfd 	beq.w	8008ada <_strtod_l+0x58a>
 8008ee0:	e731      	b.n	8008d46 <_strtod_l+0x7f6>
 8008ee2:	4641      	mov	r1, r8
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f001 fe52 	bl	800ab8e <__ratio>
 8008eea:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008eee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef6:	d869      	bhi.n	8008fcc <_strtod_l+0xa7c>
 8008ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d045      	beq.n	8008f8a <_strtod_l+0xa3a>
 8008efe:	4b74      	ldr	r3, [pc, #464]	; (80090d0 <_strtod_l+0xb80>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8008f06:	9808      	ldr	r0, [sp, #32]
 8008f08:	496e      	ldr	r1, [pc, #440]	; (80090c4 <_strtod_l+0xb74>)
 8008f0a:	ea00 0601 	and.w	r6, r0, r1
 8008f0e:	4871      	ldr	r0, [pc, #452]	; (80090d4 <_strtod_l+0xb84>)
 8008f10:	4286      	cmp	r6, r0
 8008f12:	f040 8089 	bne.w	8009028 <_strtod_l+0xad8>
 8008f16:	910f      	str	r1, [sp, #60]	; 0x3c
 8008f18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f1c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8008f20:	9908      	ldr	r1, [sp, #32]
 8008f22:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8008f26:	ec4b ab10 	vmov	d0, sl, fp
 8008f2a:	ec43 2b1c 	vmov	d12, r2, r3
 8008f2e:	f001 fd69 	bl	800aa04 <__ulp>
 8008f32:	ec4b ab1d 	vmov	d13, sl, fp
 8008f36:	eeac db00 	vfma.f64	d13, d12, d0
 8008f3a:	ed8d db08 	vstr	d13, [sp, #32]
 8008f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f42:	4a65      	ldr	r2, [pc, #404]	; (80090d8 <_strtod_l+0xb88>)
 8008f44:	4019      	ands	r1, r3
 8008f46:	4291      	cmp	r1, r2
 8008f48:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8008f4c:	d948      	bls.n	8008fe0 <_strtod_l+0xa90>
 8008f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f50:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d103      	bne.n	8008f60 <_strtod_l+0xa10>
 8008f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	f43f ad27 	beq.w	80089ae <_strtod_l+0x45e>
 8008f60:	f8df b164 	ldr.w	fp, [pc, #356]	; 80090c8 <_strtod_l+0xb78>
 8008f64:	f04f 3aff 	mov.w	sl, #4294967295
 8008f68:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f001 fab2 	bl	800a4d4 <_Bfree>
 8008f70:	4649      	mov	r1, r9
 8008f72:	4620      	mov	r0, r4
 8008f74:	f001 faae 	bl	800a4d4 <_Bfree>
 8008f78:	4641      	mov	r1, r8
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f001 faaa 	bl	800a4d4 <_Bfree>
 8008f80:	4629      	mov	r1, r5
 8008f82:	4620      	mov	r0, r4
 8008f84:	f001 faa6 	bl	800a4d4 <_Bfree>
 8008f88:	e60e      	b.n	8008ba8 <_strtod_l+0x658>
 8008f8a:	f1ba 0f00 	cmp.w	sl, #0
 8008f8e:	d113      	bne.n	8008fb8 <_strtod_l+0xa68>
 8008f90:	9b08      	ldr	r3, [sp, #32]
 8008f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f96:	b9b3      	cbnz	r3, 8008fc6 <_strtod_l+0xa76>
 8008f98:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008f9c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008fa8:	d401      	bmi.n	8008fae <_strtod_l+0xa5e>
 8008faa:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008fae:	eeb1 7b48 	vneg.f64	d7, d8
 8008fb2:	ec53 2b17 	vmov	r2, r3, d7
 8008fb6:	e7a6      	b.n	8008f06 <_strtod_l+0x9b6>
 8008fb8:	f1ba 0f01 	cmp.w	sl, #1
 8008fbc:	d103      	bne.n	8008fc6 <_strtod_l+0xa76>
 8008fbe:	9b08      	ldr	r3, [sp, #32]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f43f ad8a 	beq.w	8008ada <_strtod_l+0x58a>
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	4b44      	ldr	r3, [pc, #272]	; (80090dc <_strtod_l+0xb8c>)
 8008fca:	e79a      	b.n	8008f02 <_strtod_l+0x9b2>
 8008fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008fd2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0e9      	beq.n	8008fae <_strtod_l+0xa5e>
 8008fda:	ec53 2b18 	vmov	r2, r3, d8
 8008fde:	e792      	b.n	8008f06 <_strtod_l+0x9b6>
 8008fe0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008fe4:	2f00      	cmp	r7, #0
 8008fe6:	d1bf      	bne.n	8008f68 <_strtod_l+0xa18>
 8008fe8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008fec:	0d1b      	lsrs	r3, r3, #20
 8008fee:	051b      	lsls	r3, r3, #20
 8008ff0:	429e      	cmp	r6, r3
 8008ff2:	d1b9      	bne.n	8008f68 <_strtod_l+0xa18>
 8008ff4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8008ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ffa:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8008ffe:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009002:	b92b      	cbnz	r3, 8009010 <_strtod_l+0xac0>
 8009004:	f1ba 0f00 	cmp.w	sl, #0
 8009008:	d102      	bne.n	8009010 <_strtod_l+0xac0>
 800900a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800900e:	b3d2      	cbz	r2, 8009086 <_strtod_l+0xb36>
 8009010:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009018:	f53f acd3 	bmi.w	80089c2 <_strtod_l+0x472>
 800901c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8009020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009024:	dda0      	ble.n	8008f68 <_strtod_l+0xa18>
 8009026:	e4cc      	b.n	80089c2 <_strtod_l+0x472>
 8009028:	b1ef      	cbz	r7, 8009066 <_strtod_l+0xb16>
 800902a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800902e:	d81a      	bhi.n	8009066 <_strtod_l+0xb16>
 8009030:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80090b8 <_strtod_l+0xb68>
 8009034:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800903c:	d810      	bhi.n	8009060 <_strtod_l+0xb10>
 800903e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8009042:	ee17 3a90 	vmov	r3, s15
 8009046:	2b00      	cmp	r3, #0
 8009048:	bf08      	it	eq
 800904a:	2301      	moveq	r3, #1
 800904c:	ee07 3a90 	vmov	s15, r3
 8009050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009052:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8009056:	b99b      	cbnz	r3, 8009080 <_strtod_l+0xb30>
 8009058:	eeb1 7b48 	vneg.f64	d7, d8
 800905c:	ec53 2b17 	vmov	r2, r3, d7
 8009060:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8009064:	1b8b      	subs	r3, r1, r6
 8009066:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800906a:	ec43 2b1c 	vmov	d12, r2, r3
 800906e:	f001 fcc9 	bl	800aa04 <__ulp>
 8009072:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8009076:	eeac 7b00 	vfma.f64	d7, d12, d0
 800907a:	ec5b ab17 	vmov	sl, fp, d7
 800907e:	e7b1      	b.n	8008fe4 <_strtod_l+0xa94>
 8009080:	ec53 2b18 	vmov	r2, r3, d8
 8009084:	e7ec      	b.n	8009060 <_strtod_l+0xb10>
 8009086:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800908a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908e:	f57f af6b 	bpl.w	8008f68 <_strtod_l+0xa18>
 8009092:	e496      	b.n	80089c2 <_strtod_l+0x472>
 8009094:	2300      	movs	r3, #0
 8009096:	930d      	str	r3, [sp, #52]	; 0x34
 8009098:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800909a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	f7ff ba9d 	b.w	80085dc <_strtod_l+0x8c>
 80090a2:	2a65      	cmp	r2, #101	; 0x65
 80090a4:	f04f 0100 	mov.w	r1, #0
 80090a8:	f43f ab97 	beq.w	80087da <_strtod_l+0x28a>
 80090ac:	2701      	movs	r7, #1
 80090ae:	460b      	mov	r3, r1
 80090b0:	9704      	str	r7, [sp, #16]
 80090b2:	f7ff bb0a 	b.w	80086ca <_strtod_l+0x17a>
 80090b6:	bf00      	nop
 80090b8:	ffc00000 	.word	0xffc00000
 80090bc:	41dfffff 	.word	0x41dfffff
 80090c0:	000fffff 	.word	0x000fffff
 80090c4:	7ff00000 	.word	0x7ff00000
 80090c8:	7fefffff 	.word	0x7fefffff
 80090cc:	39500000 	.word	0x39500000
 80090d0:	3ff00000 	.word	0x3ff00000
 80090d4:	7fe00000 	.word	0x7fe00000
 80090d8:	7c9fffff 	.word	0x7c9fffff
 80090dc:	bff00000 	.word	0xbff00000

080090e0 <_strtod_r>:
 80090e0:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <_strtod_r+0x18>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	b410      	push	{r4}
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	4c04      	ldr	r4, [pc, #16]	; (80090fc <_strtod_r+0x1c>)
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	bf08      	it	eq
 80090ee:	4623      	moveq	r3, r4
 80090f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f4:	f7ff ba2c 	b.w	8008550 <_strtod_l>
 80090f8:	24000010 	.word	0x24000010
 80090fc:	24000074 	.word	0x24000074

08009100 <_strtol_l.isra.0>:
 8009100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009104:	4680      	mov	r8, r0
 8009106:	4689      	mov	r9, r1
 8009108:	4692      	mov	sl, r2
 800910a:	461e      	mov	r6, r3
 800910c:	460f      	mov	r7, r1
 800910e:	463d      	mov	r5, r7
 8009110:	9808      	ldr	r0, [sp, #32]
 8009112:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009116:	f001 f981 	bl	800a41c <__locale_ctype_ptr_l>
 800911a:	4420      	add	r0, r4
 800911c:	7843      	ldrb	r3, [r0, #1]
 800911e:	f013 0308 	ands.w	r3, r3, #8
 8009122:	d132      	bne.n	800918a <_strtol_l.isra.0+0x8a>
 8009124:	2c2d      	cmp	r4, #45	; 0x2d
 8009126:	d132      	bne.n	800918e <_strtol_l.isra.0+0x8e>
 8009128:	787c      	ldrb	r4, [r7, #1]
 800912a:	1cbd      	adds	r5, r7, #2
 800912c:	2201      	movs	r2, #1
 800912e:	2e00      	cmp	r6, #0
 8009130:	d05d      	beq.n	80091ee <_strtol_l.isra.0+0xee>
 8009132:	2e10      	cmp	r6, #16
 8009134:	d109      	bne.n	800914a <_strtol_l.isra.0+0x4a>
 8009136:	2c30      	cmp	r4, #48	; 0x30
 8009138:	d107      	bne.n	800914a <_strtol_l.isra.0+0x4a>
 800913a:	782b      	ldrb	r3, [r5, #0]
 800913c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009140:	2b58      	cmp	r3, #88	; 0x58
 8009142:	d14f      	bne.n	80091e4 <_strtol_l.isra.0+0xe4>
 8009144:	786c      	ldrb	r4, [r5, #1]
 8009146:	2610      	movs	r6, #16
 8009148:	3502      	adds	r5, #2
 800914a:	2a00      	cmp	r2, #0
 800914c:	bf14      	ite	ne
 800914e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009152:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009156:	2700      	movs	r7, #0
 8009158:	fbb1 fcf6 	udiv	ip, r1, r6
 800915c:	4638      	mov	r0, r7
 800915e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009162:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009166:	2b09      	cmp	r3, #9
 8009168:	d817      	bhi.n	800919a <_strtol_l.isra.0+0x9a>
 800916a:	461c      	mov	r4, r3
 800916c:	42a6      	cmp	r6, r4
 800916e:	dd23      	ble.n	80091b8 <_strtol_l.isra.0+0xb8>
 8009170:	1c7b      	adds	r3, r7, #1
 8009172:	d007      	beq.n	8009184 <_strtol_l.isra.0+0x84>
 8009174:	4584      	cmp	ip, r0
 8009176:	d31c      	bcc.n	80091b2 <_strtol_l.isra.0+0xb2>
 8009178:	d101      	bne.n	800917e <_strtol_l.isra.0+0x7e>
 800917a:	45a6      	cmp	lr, r4
 800917c:	db19      	blt.n	80091b2 <_strtol_l.isra.0+0xb2>
 800917e:	fb00 4006 	mla	r0, r0, r6, r4
 8009182:	2701      	movs	r7, #1
 8009184:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009188:	e7eb      	b.n	8009162 <_strtol_l.isra.0+0x62>
 800918a:	462f      	mov	r7, r5
 800918c:	e7bf      	b.n	800910e <_strtol_l.isra.0+0xe>
 800918e:	2c2b      	cmp	r4, #43	; 0x2b
 8009190:	bf04      	itt	eq
 8009192:	1cbd      	addeq	r5, r7, #2
 8009194:	787c      	ldrbeq	r4, [r7, #1]
 8009196:	461a      	mov	r2, r3
 8009198:	e7c9      	b.n	800912e <_strtol_l.isra.0+0x2e>
 800919a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800919e:	2b19      	cmp	r3, #25
 80091a0:	d801      	bhi.n	80091a6 <_strtol_l.isra.0+0xa6>
 80091a2:	3c37      	subs	r4, #55	; 0x37
 80091a4:	e7e2      	b.n	800916c <_strtol_l.isra.0+0x6c>
 80091a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80091aa:	2b19      	cmp	r3, #25
 80091ac:	d804      	bhi.n	80091b8 <_strtol_l.isra.0+0xb8>
 80091ae:	3c57      	subs	r4, #87	; 0x57
 80091b0:	e7dc      	b.n	800916c <_strtol_l.isra.0+0x6c>
 80091b2:	f04f 37ff 	mov.w	r7, #4294967295
 80091b6:	e7e5      	b.n	8009184 <_strtol_l.isra.0+0x84>
 80091b8:	1c7b      	adds	r3, r7, #1
 80091ba:	d108      	bne.n	80091ce <_strtol_l.isra.0+0xce>
 80091bc:	2322      	movs	r3, #34	; 0x22
 80091be:	f8c8 3000 	str.w	r3, [r8]
 80091c2:	4608      	mov	r0, r1
 80091c4:	f1ba 0f00 	cmp.w	sl, #0
 80091c8:	d107      	bne.n	80091da <_strtol_l.isra.0+0xda>
 80091ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ce:	b102      	cbz	r2, 80091d2 <_strtol_l.isra.0+0xd2>
 80091d0:	4240      	negs	r0, r0
 80091d2:	f1ba 0f00 	cmp.w	sl, #0
 80091d6:	d0f8      	beq.n	80091ca <_strtol_l.isra.0+0xca>
 80091d8:	b10f      	cbz	r7, 80091de <_strtol_l.isra.0+0xde>
 80091da:	f105 39ff 	add.w	r9, r5, #4294967295
 80091de:	f8ca 9000 	str.w	r9, [sl]
 80091e2:	e7f2      	b.n	80091ca <_strtol_l.isra.0+0xca>
 80091e4:	2430      	movs	r4, #48	; 0x30
 80091e6:	2e00      	cmp	r6, #0
 80091e8:	d1af      	bne.n	800914a <_strtol_l.isra.0+0x4a>
 80091ea:	2608      	movs	r6, #8
 80091ec:	e7ad      	b.n	800914a <_strtol_l.isra.0+0x4a>
 80091ee:	2c30      	cmp	r4, #48	; 0x30
 80091f0:	d0a3      	beq.n	800913a <_strtol_l.isra.0+0x3a>
 80091f2:	260a      	movs	r6, #10
 80091f4:	e7a9      	b.n	800914a <_strtol_l.isra.0+0x4a>
	...

080091f8 <_strtol_r>:
 80091f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091fa:	4c06      	ldr	r4, [pc, #24]	; (8009214 <_strtol_r+0x1c>)
 80091fc:	4d06      	ldr	r5, [pc, #24]	; (8009218 <_strtol_r+0x20>)
 80091fe:	6824      	ldr	r4, [r4, #0]
 8009200:	6a24      	ldr	r4, [r4, #32]
 8009202:	2c00      	cmp	r4, #0
 8009204:	bf08      	it	eq
 8009206:	462c      	moveq	r4, r5
 8009208:	9400      	str	r4, [sp, #0]
 800920a:	f7ff ff79 	bl	8009100 <_strtol_l.isra.0>
 800920e:	b003      	add	sp, #12
 8009210:	bd30      	pop	{r4, r5, pc}
 8009212:	bf00      	nop
 8009214:	24000010 	.word	0x24000010
 8009218:	24000074 	.word	0x24000074

0800921c <quorem>:
 800921c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	6903      	ldr	r3, [r0, #16]
 8009222:	690c      	ldr	r4, [r1, #16]
 8009224:	42a3      	cmp	r3, r4
 8009226:	4680      	mov	r8, r0
 8009228:	f2c0 8082 	blt.w	8009330 <quorem+0x114>
 800922c:	3c01      	subs	r4, #1
 800922e:	f101 0714 	add.w	r7, r1, #20
 8009232:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009236:	f100 0614 	add.w	r6, r0, #20
 800923a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800923e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009242:	eb06 030c 	add.w	r3, r6, ip
 8009246:	3501      	adds	r5, #1
 8009248:	eb07 090c 	add.w	r9, r7, ip
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009252:	b395      	cbz	r5, 80092ba <quorem+0x9e>
 8009254:	f04f 0a00 	mov.w	sl, #0
 8009258:	4638      	mov	r0, r7
 800925a:	46b6      	mov	lr, r6
 800925c:	46d3      	mov	fp, sl
 800925e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009262:	b293      	uxth	r3, r2
 8009264:	fb05 a303 	mla	r3, r5, r3, sl
 8009268:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800926c:	b29b      	uxth	r3, r3
 800926e:	ebab 0303 	sub.w	r3, fp, r3
 8009272:	0c12      	lsrs	r2, r2, #16
 8009274:	f8de b000 	ldr.w	fp, [lr]
 8009278:	fb05 a202 	mla	r2, r5, r2, sl
 800927c:	fa13 f38b 	uxtah	r3, r3, fp
 8009280:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009284:	fa1f fb82 	uxth.w	fp, r2
 8009288:	f8de 2000 	ldr.w	r2, [lr]
 800928c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009290:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009294:	b29b      	uxth	r3, r3
 8009296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800929a:	4581      	cmp	r9, r0
 800929c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80092a0:	f84e 3b04 	str.w	r3, [lr], #4
 80092a4:	d2db      	bcs.n	800925e <quorem+0x42>
 80092a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80092aa:	b933      	cbnz	r3, 80092ba <quorem+0x9e>
 80092ac:	9b01      	ldr	r3, [sp, #4]
 80092ae:	3b04      	subs	r3, #4
 80092b0:	429e      	cmp	r6, r3
 80092b2:	461a      	mov	r2, r3
 80092b4:	d330      	bcc.n	8009318 <quorem+0xfc>
 80092b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80092ba:	4640      	mov	r0, r8
 80092bc:	f001 fb2a 	bl	800a914 <__mcmp>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	db25      	blt.n	8009310 <quorem+0xf4>
 80092c4:	3501      	adds	r5, #1
 80092c6:	4630      	mov	r0, r6
 80092c8:	f04f 0c00 	mov.w	ip, #0
 80092cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80092d0:	f8d0 e000 	ldr.w	lr, [r0]
 80092d4:	b293      	uxth	r3, r2
 80092d6:	ebac 0303 	sub.w	r3, ip, r3
 80092da:	0c12      	lsrs	r2, r2, #16
 80092dc:	fa13 f38e 	uxtah	r3, r3, lr
 80092e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ee:	45b9      	cmp	r9, r7
 80092f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80092f4:	f840 3b04 	str.w	r3, [r0], #4
 80092f8:	d2e8      	bcs.n	80092cc <quorem+0xb0>
 80092fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80092fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009302:	b92a      	cbnz	r2, 8009310 <quorem+0xf4>
 8009304:	3b04      	subs	r3, #4
 8009306:	429e      	cmp	r6, r3
 8009308:	461a      	mov	r2, r3
 800930a:	d30b      	bcc.n	8009324 <quorem+0x108>
 800930c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009310:	4628      	mov	r0, r5
 8009312:	b003      	add	sp, #12
 8009314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	3b04      	subs	r3, #4
 800931c:	2a00      	cmp	r2, #0
 800931e:	d1ca      	bne.n	80092b6 <quorem+0x9a>
 8009320:	3c01      	subs	r4, #1
 8009322:	e7c5      	b.n	80092b0 <quorem+0x94>
 8009324:	6812      	ldr	r2, [r2, #0]
 8009326:	3b04      	subs	r3, #4
 8009328:	2a00      	cmp	r2, #0
 800932a:	d1ef      	bne.n	800930c <quorem+0xf0>
 800932c:	3c01      	subs	r4, #1
 800932e:	e7ea      	b.n	8009306 <quorem+0xea>
 8009330:	2000      	movs	r0, #0
 8009332:	e7ee      	b.n	8009312 <quorem+0xf6>
 8009334:	0000      	movs	r0, r0
	...

08009338 <_dtoa_r>:
 8009338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	ec57 6b10 	vmov	r6, r7, d0
 8009340:	b095      	sub	sp, #84	; 0x54
 8009342:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009344:	9108      	str	r1, [sp, #32]
 8009346:	4604      	mov	r4, r0
 8009348:	920a      	str	r2, [sp, #40]	; 0x28
 800934a:	9311      	str	r3, [sp, #68]	; 0x44
 800934c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8009350:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009354:	b93d      	cbnz	r5, 8009366 <_dtoa_r+0x2e>
 8009356:	2010      	movs	r0, #16
 8009358:	f7fe f9ca 	bl	80076f0 <malloc>
 800935c:	6260      	str	r0, [r4, #36]	; 0x24
 800935e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009362:	6005      	str	r5, [r0, #0]
 8009364:	60c5      	str	r5, [r0, #12]
 8009366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009368:	6819      	ldr	r1, [r3, #0]
 800936a:	b151      	cbz	r1, 8009382 <_dtoa_r+0x4a>
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	604a      	str	r2, [r1, #4]
 8009370:	2301      	movs	r3, #1
 8009372:	4093      	lsls	r3, r2
 8009374:	608b      	str	r3, [r1, #8]
 8009376:	4620      	mov	r0, r4
 8009378:	f001 f8ac 	bl	800a4d4 <_Bfree>
 800937c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	1e3b      	subs	r3, r7, #0
 8009384:	bfb9      	ittee	lt
 8009386:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800938a:	9303      	strlt	r3, [sp, #12]
 800938c:	2300      	movge	r3, #0
 800938e:	f8c8 3000 	strge.w	r3, [r8]
 8009392:	9d03      	ldr	r5, [sp, #12]
 8009394:	4bac      	ldr	r3, [pc, #688]	; (8009648 <_dtoa_r+0x310>)
 8009396:	bfbc      	itt	lt
 8009398:	2201      	movlt	r2, #1
 800939a:	f8c8 2000 	strlt.w	r2, [r8]
 800939e:	43ab      	bics	r3, r5
 80093a0:	d11b      	bne.n	80093da <_dtoa_r+0xa2>
 80093a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093a4:	f242 730f 	movw	r3, #9999	; 0x270f
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	9b02      	ldr	r3, [sp, #8]
 80093ac:	b923      	cbnz	r3, 80093b8 <_dtoa_r+0x80>
 80093ae:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80093b2:	2d00      	cmp	r5, #0
 80093b4:	f000 84dd 	beq.w	8009d72 <_dtoa_r+0xa3a>
 80093b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093ba:	b953      	cbnz	r3, 80093d2 <_dtoa_r+0x9a>
 80093bc:	4ba3      	ldr	r3, [pc, #652]	; (800964c <_dtoa_r+0x314>)
 80093be:	e020      	b.n	8009402 <_dtoa_r+0xca>
 80093c0:	4ba3      	ldr	r3, [pc, #652]	; (8009650 <_dtoa_r+0x318>)
 80093c2:	9304      	str	r3, [sp, #16]
 80093c4:	3308      	adds	r3, #8
 80093c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	9804      	ldr	r0, [sp, #16]
 80093cc:	b015      	add	sp, #84	; 0x54
 80093ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d2:	4b9e      	ldr	r3, [pc, #632]	; (800964c <_dtoa_r+0x314>)
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	3303      	adds	r3, #3
 80093d8:	e7f5      	b.n	80093c6 <_dtoa_r+0x8e>
 80093da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80093ea:	d10c      	bne.n	8009406 <_dtoa_r+0xce>
 80093ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093ee:	2301      	movs	r3, #1
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 84b9 	beq.w	8009d6c <_dtoa_r+0xa34>
 80093fa:	4b96      	ldr	r3, [pc, #600]	; (8009654 <_dtoa_r+0x31c>)
 80093fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	3b01      	subs	r3, #1
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	e7e1      	b.n	80093ca <_dtoa_r+0x92>
 8009406:	a913      	add	r1, sp, #76	; 0x4c
 8009408:	aa12      	add	r2, sp, #72	; 0x48
 800940a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800940e:	4620      	mov	r0, r4
 8009410:	f001 fb6e 	bl	800aaf0 <__d2b>
 8009414:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8009418:	9001      	str	r0, [sp, #4]
 800941a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800941c:	2e00      	cmp	r6, #0
 800941e:	d046      	beq.n	80094ae <_dtoa_r+0x176>
 8009420:	9805      	ldr	r0, [sp, #20]
 8009422:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8009426:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800942a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800942e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009432:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8009436:	2700      	movs	r7, #0
 8009438:	ee07 aa90 	vmov	s15, sl
 800943c:	ec43 2b16 	vmov	d6, r2, r3
 8009440:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8009444:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8009630 <_dtoa_r+0x2f8>
 8009448:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800944c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009450:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8009638 <_dtoa_r+0x300>
 8009454:	eea7 6b04 	vfma.f64	d6, d7, d4
 8009458:	eeb0 7b46 	vmov.f64	d7, d6
 800945c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8009640 <_dtoa_r+0x308>
 8009460:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009464:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009468:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800946c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009470:	ee16 ba90 	vmov	fp, s13
 8009474:	d508      	bpl.n	8009488 <_dtoa_r+0x150>
 8009476:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800947a:	eeb4 6b47 	vcmp.f64	d6, d7
 800947e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009482:	bf18      	it	ne
 8009484:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009488:	f1bb 0f16 	cmp.w	fp, #22
 800948c:	d834      	bhi.n	80094f8 <_dtoa_r+0x1c0>
 800948e:	4b72      	ldr	r3, [pc, #456]	; (8009658 <_dtoa_r+0x320>)
 8009490:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009494:	ed93 7b00 	vldr	d7, [r3]
 8009498:	ed9d 6b02 	vldr	d6, [sp, #8]
 800949c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80094a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a4:	dd01      	ble.n	80094aa <_dtoa_r+0x172>
 80094a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094aa:	2300      	movs	r3, #0
 80094ac:	e025      	b.n	80094fa <_dtoa_r+0x1c2>
 80094ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094b0:	eb01 0a03 	add.w	sl, r1, r3
 80094b4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80094b8:	2b20      	cmp	r3, #32
 80094ba:	dd17      	ble.n	80094ec <_dtoa_r+0x1b4>
 80094bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80094c0:	9a02      	ldr	r2, [sp, #8]
 80094c2:	409d      	lsls	r5, r3
 80094c4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80094c8:	fa22 f303 	lsr.w	r3, r2, r3
 80094cc:	432b      	orrs	r3, r5
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80094d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094da:	ed8d 7b04 	vstr	d7, [sp, #16]
 80094de:	9805      	ldr	r0, [sp, #20]
 80094e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094e4:	2701      	movs	r7, #1
 80094e6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80094ea:	e7a5      	b.n	8009438 <_dtoa_r+0x100>
 80094ec:	9a02      	ldr	r2, [sp, #8]
 80094ee:	f1c3 0320 	rsb	r3, r3, #32
 80094f2:	fa02 f303 	lsl.w	r3, r2, r3
 80094f6:	e7ea      	b.n	80094ce <_dtoa_r+0x196>
 80094f8:	2301      	movs	r3, #1
 80094fa:	eba1 0a0a 	sub.w	sl, r1, sl
 80094fe:	9310      	str	r3, [sp, #64]	; 0x40
 8009500:	f1ba 0301 	subs.w	r3, sl, #1
 8009504:	9307      	str	r3, [sp, #28]
 8009506:	bf43      	ittte	mi
 8009508:	2300      	movmi	r3, #0
 800950a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800950e:	9307      	strmi	r3, [sp, #28]
 8009510:	f04f 0a00 	movpl.w	sl, #0
 8009514:	f1bb 0f00 	cmp.w	fp, #0
 8009518:	db19      	blt.n	800954e <_dtoa_r+0x216>
 800951a:	9b07      	ldr	r3, [sp, #28]
 800951c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009520:	445b      	add	r3, fp
 8009522:	9307      	str	r3, [sp, #28]
 8009524:	f04f 0800 	mov.w	r8, #0
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	2b09      	cmp	r3, #9
 800952c:	d866      	bhi.n	80095fc <_dtoa_r+0x2c4>
 800952e:	2b05      	cmp	r3, #5
 8009530:	bfc4      	itt	gt
 8009532:	3b04      	subgt	r3, #4
 8009534:	9308      	strgt	r3, [sp, #32]
 8009536:	9b08      	ldr	r3, [sp, #32]
 8009538:	f1a3 0302 	sub.w	r3, r3, #2
 800953c:	bfcc      	ite	gt
 800953e:	2500      	movgt	r5, #0
 8009540:	2501      	movle	r5, #1
 8009542:	2b03      	cmp	r3, #3
 8009544:	d866      	bhi.n	8009614 <_dtoa_r+0x2dc>
 8009546:	e8df f003 	tbb	[pc, r3]
 800954a:	5755      	.short	0x5755
 800954c:	4909      	.short	0x4909
 800954e:	2300      	movs	r3, #0
 8009550:	ebaa 0a0b 	sub.w	sl, sl, fp
 8009554:	f1cb 0800 	rsb	r8, fp, #0
 8009558:	930b      	str	r3, [sp, #44]	; 0x2c
 800955a:	e7e5      	b.n	8009528 <_dtoa_r+0x1f0>
 800955c:	2301      	movs	r3, #1
 800955e:	9309      	str	r3, [sp, #36]	; 0x24
 8009560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009562:	2b00      	cmp	r3, #0
 8009564:	dd59      	ble.n	800961a <_dtoa_r+0x2e2>
 8009566:	9306      	str	r3, [sp, #24]
 8009568:	4699      	mov	r9, r3
 800956a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800956c:	2200      	movs	r2, #0
 800956e:	6072      	str	r2, [r6, #4]
 8009570:	2204      	movs	r2, #4
 8009572:	f102 0014 	add.w	r0, r2, #20
 8009576:	4298      	cmp	r0, r3
 8009578:	6871      	ldr	r1, [r6, #4]
 800957a:	d953      	bls.n	8009624 <_dtoa_r+0x2ec>
 800957c:	4620      	mov	r0, r4
 800957e:	f000 ff75 	bl	800a46c <_Balloc>
 8009582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009584:	6030      	str	r0, [r6, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	9304      	str	r3, [sp, #16]
 800958a:	f1b9 0f0e 	cmp.w	r9, #14
 800958e:	f200 80c2 	bhi.w	8009716 <_dtoa_r+0x3de>
 8009592:	2d00      	cmp	r5, #0
 8009594:	f000 80bf 	beq.w	8009716 <_dtoa_r+0x3de>
 8009598:	ed9d 7b02 	vldr	d7, [sp, #8]
 800959c:	f1bb 0f00 	cmp.w	fp, #0
 80095a0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80095a4:	f340 80e6 	ble.w	8009774 <_dtoa_r+0x43c>
 80095a8:	4a2b      	ldr	r2, [pc, #172]	; (8009658 <_dtoa_r+0x320>)
 80095aa:	f00b 030f 	and.w	r3, fp, #15
 80095ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80095b2:	ed93 7b00 	vldr	d7, [r3]
 80095b6:	ea4f 132b 	mov.w	r3, fp, asr #4
 80095ba:	06da      	lsls	r2, r3, #27
 80095bc:	f140 80d8 	bpl.w	8009770 <_dtoa_r+0x438>
 80095c0:	4a26      	ldr	r2, [pc, #152]	; (800965c <_dtoa_r+0x324>)
 80095c2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80095c6:	ed92 6b08 	vldr	d6, [r2, #32]
 80095ca:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80095ce:	ed8d 6b02 	vstr	d6, [sp, #8]
 80095d2:	f003 030f 	and.w	r3, r3, #15
 80095d6:	2203      	movs	r2, #3
 80095d8:	4920      	ldr	r1, [pc, #128]	; (800965c <_dtoa_r+0x324>)
 80095da:	e04a      	b.n	8009672 <_dtoa_r+0x33a>
 80095dc:	2301      	movs	r3, #1
 80095de:	9309      	str	r3, [sp, #36]	; 0x24
 80095e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e2:	445b      	add	r3, fp
 80095e4:	f103 0901 	add.w	r9, r3, #1
 80095e8:	9306      	str	r3, [sp, #24]
 80095ea:	464b      	mov	r3, r9
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	bfb8      	it	lt
 80095f0:	2301      	movlt	r3, #1
 80095f2:	e7ba      	b.n	800956a <_dtoa_r+0x232>
 80095f4:	2300      	movs	r3, #0
 80095f6:	e7b2      	b.n	800955e <_dtoa_r+0x226>
 80095f8:	2300      	movs	r3, #0
 80095fa:	e7f0      	b.n	80095de <_dtoa_r+0x2a6>
 80095fc:	2501      	movs	r5, #1
 80095fe:	2300      	movs	r3, #0
 8009600:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8009604:	f04f 33ff 	mov.w	r3, #4294967295
 8009608:	9306      	str	r3, [sp, #24]
 800960a:	4699      	mov	r9, r3
 800960c:	2200      	movs	r2, #0
 800960e:	2312      	movs	r3, #18
 8009610:	920a      	str	r2, [sp, #40]	; 0x28
 8009612:	e7aa      	b.n	800956a <_dtoa_r+0x232>
 8009614:	2301      	movs	r3, #1
 8009616:	9309      	str	r3, [sp, #36]	; 0x24
 8009618:	e7f4      	b.n	8009604 <_dtoa_r+0x2cc>
 800961a:	2301      	movs	r3, #1
 800961c:	9306      	str	r3, [sp, #24]
 800961e:	4699      	mov	r9, r3
 8009620:	461a      	mov	r2, r3
 8009622:	e7f5      	b.n	8009610 <_dtoa_r+0x2d8>
 8009624:	3101      	adds	r1, #1
 8009626:	6071      	str	r1, [r6, #4]
 8009628:	0052      	lsls	r2, r2, #1
 800962a:	e7a2      	b.n	8009572 <_dtoa_r+0x23a>
 800962c:	f3af 8000 	nop.w
 8009630:	636f4361 	.word	0x636f4361
 8009634:	3fd287a7 	.word	0x3fd287a7
 8009638:	8b60c8b3 	.word	0x8b60c8b3
 800963c:	3fc68a28 	.word	0x3fc68a28
 8009640:	509f79fb 	.word	0x509f79fb
 8009644:	3fd34413 	.word	0x3fd34413
 8009648:	7ff00000 	.word	0x7ff00000
 800964c:	0800b1c9 	.word	0x0800b1c9
 8009650:	0800b1c0 	.word	0x0800b1c0
 8009654:	0800b145 	.word	0x0800b145
 8009658:	0800b200 	.word	0x0800b200
 800965c:	0800b1d8 	.word	0x0800b1d8
 8009660:	07de      	lsls	r6, r3, #31
 8009662:	d504      	bpl.n	800966e <_dtoa_r+0x336>
 8009664:	ed91 6b00 	vldr	d6, [r1]
 8009668:	3201      	adds	r2, #1
 800966a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800966e:	105b      	asrs	r3, r3, #1
 8009670:	3108      	adds	r1, #8
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1f4      	bne.n	8009660 <_dtoa_r+0x328>
 8009676:	ed9d 6b02 	vldr	d6, [sp, #8]
 800967a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800967e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009682:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 80a7 	beq.w	80097d8 <_dtoa_r+0x4a0>
 800968a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800968e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009692:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969a:	f140 809d 	bpl.w	80097d8 <_dtoa_r+0x4a0>
 800969e:	f1b9 0f00 	cmp.w	r9, #0
 80096a2:	f000 8099 	beq.w	80097d8 <_dtoa_r+0x4a0>
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	dd30      	ble.n	800970e <_dtoa_r+0x3d6>
 80096ac:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80096b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096b8:	9d06      	ldr	r5, [sp, #24]
 80096ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80096be:	3201      	adds	r2, #1
 80096c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80096c4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80096c8:	ee07 2a90 	vmov	s15, r2
 80096cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80096d0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80096d4:	ed8d 5b02 	vstr	d5, [sp, #8]
 80096d8:	9a03      	ldr	r2, [sp, #12]
 80096da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096de:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80096e2:	2d00      	cmp	r5, #0
 80096e4:	d17b      	bne.n	80097de <_dtoa_r+0x4a6>
 80096e6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80096ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 80096ee:	ec41 0b17 	vmov	d7, r0, r1
 80096f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fa:	f300 8253 	bgt.w	8009ba4 <_dtoa_r+0x86c>
 80096fe:	eeb1 7b47 	vneg.f64	d7, d7
 8009702:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970a:	f100 8249 	bmi.w	8009ba0 <_dtoa_r+0x868>
 800970e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009712:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009718:	2b00      	cmp	r3, #0
 800971a:	f2c0 8119 	blt.w	8009950 <_dtoa_r+0x618>
 800971e:	f1bb 0f0e 	cmp.w	fp, #14
 8009722:	f300 8115 	bgt.w	8009950 <_dtoa_r+0x618>
 8009726:	4bc3      	ldr	r3, [pc, #780]	; (8009a34 <_dtoa_r+0x6fc>)
 8009728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800972c:	ed93 6b00 	vldr	d6, [r3]
 8009730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009732:	2b00      	cmp	r3, #0
 8009734:	f280 80ba 	bge.w	80098ac <_dtoa_r+0x574>
 8009738:	f1b9 0f00 	cmp.w	r9, #0
 800973c:	f300 80b6 	bgt.w	80098ac <_dtoa_r+0x574>
 8009740:	f040 822d 	bne.w	8009b9e <_dtoa_r+0x866>
 8009744:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009748:	ee26 6b07 	vmul.f64	d6, d6, d7
 800974c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009750:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009758:	464d      	mov	r5, r9
 800975a:	464f      	mov	r7, r9
 800975c:	f280 8204 	bge.w	8009b68 <_dtoa_r+0x830>
 8009760:	9b04      	ldr	r3, [sp, #16]
 8009762:	9a04      	ldr	r2, [sp, #16]
 8009764:	1c5e      	adds	r6, r3, #1
 8009766:	2331      	movs	r3, #49	; 0x31
 8009768:	7013      	strb	r3, [r2, #0]
 800976a:	f10b 0b01 	add.w	fp, fp, #1
 800976e:	e1ff      	b.n	8009b70 <_dtoa_r+0x838>
 8009770:	2202      	movs	r2, #2
 8009772:	e731      	b.n	80095d8 <_dtoa_r+0x2a0>
 8009774:	d02e      	beq.n	80097d4 <_dtoa_r+0x49c>
 8009776:	f1cb 0300 	rsb	r3, fp, #0
 800977a:	4aae      	ldr	r2, [pc, #696]	; (8009a34 <_dtoa_r+0x6fc>)
 800977c:	f003 010f 	and.w	r1, r3, #15
 8009780:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009784:	ed92 7b00 	vldr	d7, [r2]
 8009788:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800978c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009790:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009794:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8009798:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800979c:	49a6      	ldr	r1, [pc, #664]	; (8009a38 <_dtoa_r+0x700>)
 800979e:	111b      	asrs	r3, r3, #4
 80097a0:	2000      	movs	r0, #0
 80097a2:	2202      	movs	r2, #2
 80097a4:	b93b      	cbnz	r3, 80097b6 <_dtoa_r+0x47e>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f43f af6b 	beq.w	8009682 <_dtoa_r+0x34a>
 80097ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097b4:	e765      	b.n	8009682 <_dtoa_r+0x34a>
 80097b6:	07dd      	lsls	r5, r3, #31
 80097b8:	d509      	bpl.n	80097ce <_dtoa_r+0x496>
 80097ba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80097be:	ed91 7b00 	vldr	d7, [r1]
 80097c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80097ca:	3201      	adds	r2, #1
 80097cc:	2001      	movs	r0, #1
 80097ce:	105b      	asrs	r3, r3, #1
 80097d0:	3108      	adds	r1, #8
 80097d2:	e7e7      	b.n	80097a4 <_dtoa_r+0x46c>
 80097d4:	2202      	movs	r2, #2
 80097d6:	e754      	b.n	8009682 <_dtoa_r+0x34a>
 80097d8:	465b      	mov	r3, fp
 80097da:	464d      	mov	r5, r9
 80097dc:	e770      	b.n	80096c0 <_dtoa_r+0x388>
 80097de:	4a95      	ldr	r2, [pc, #596]	; (8009a34 <_dtoa_r+0x6fc>)
 80097e0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80097e4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80097e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ea:	ec41 0b17 	vmov	d7, r0, r1
 80097ee:	b35a      	cbz	r2, 8009848 <_dtoa_r+0x510>
 80097f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80097f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80097f8:	9e04      	ldr	r6, [sp, #16]
 80097fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80097fe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009802:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009806:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800980a:	ee14 2a90 	vmov	r2, s9
 800980e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009812:	3230      	adds	r2, #48	; 0x30
 8009814:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009818:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800981c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009820:	f806 2b01 	strb.w	r2, [r6], #1
 8009824:	d43b      	bmi.n	800989e <_dtoa_r+0x566>
 8009826:	ee32 5b46 	vsub.f64	d5, d2, d6
 800982a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800982e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009832:	d472      	bmi.n	800991a <_dtoa_r+0x5e2>
 8009834:	9a04      	ldr	r2, [sp, #16]
 8009836:	1ab2      	subs	r2, r6, r2
 8009838:	4295      	cmp	r5, r2
 800983a:	f77f af68 	ble.w	800970e <_dtoa_r+0x3d6>
 800983e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009842:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009846:	e7de      	b.n	8009806 <_dtoa_r+0x4ce>
 8009848:	9a04      	ldr	r2, [sp, #16]
 800984a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800984e:	1956      	adds	r6, r2, r5
 8009850:	4611      	mov	r1, r2
 8009852:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009856:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800985a:	ee14 2a90 	vmov	r2, s9
 800985e:	3230      	adds	r2, #48	; 0x30
 8009860:	f801 2b01 	strb.w	r2, [r1], #1
 8009864:	42b1      	cmp	r1, r6
 8009866:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800986a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800986e:	d11a      	bne.n	80098a6 <_dtoa_r+0x56e>
 8009870:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009874:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009878:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800987c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009880:	dc4b      	bgt.n	800991a <_dtoa_r+0x5e2>
 8009882:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009886:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800988a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988e:	f57f af3e 	bpl.w	800970e <_dtoa_r+0x3d6>
 8009892:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009896:	2a30      	cmp	r2, #48	; 0x30
 8009898:	f106 31ff 	add.w	r1, r6, #4294967295
 800989c:	d001      	beq.n	80098a2 <_dtoa_r+0x56a>
 800989e:	469b      	mov	fp, r3
 80098a0:	e02a      	b.n	80098f8 <_dtoa_r+0x5c0>
 80098a2:	460e      	mov	r6, r1
 80098a4:	e7f5      	b.n	8009892 <_dtoa_r+0x55a>
 80098a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80098aa:	e7d4      	b.n	8009856 <_dtoa_r+0x51e>
 80098ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098b0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80098b4:	9e04      	ldr	r6, [sp, #16]
 80098b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80098ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80098be:	ee15 3a10 	vmov	r3, s10
 80098c2:	3330      	adds	r3, #48	; 0x30
 80098c4:	f806 3b01 	strb.w	r3, [r6], #1
 80098c8:	9b04      	ldr	r3, [sp, #16]
 80098ca:	1af3      	subs	r3, r6, r3
 80098cc:	4599      	cmp	r9, r3
 80098ce:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80098d2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80098d6:	d133      	bne.n	8009940 <_dtoa_r+0x608>
 80098d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80098dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80098e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e4:	dc18      	bgt.n	8009918 <_dtoa_r+0x5e0>
 80098e6:	eeb4 7b46 	vcmp.f64	d7, d6
 80098ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ee:	d103      	bne.n	80098f8 <_dtoa_r+0x5c0>
 80098f0:	ee15 3a10 	vmov	r3, s10
 80098f4:	07db      	lsls	r3, r3, #31
 80098f6:	d40f      	bmi.n	8009918 <_dtoa_r+0x5e0>
 80098f8:	9901      	ldr	r1, [sp, #4]
 80098fa:	4620      	mov	r0, r4
 80098fc:	f000 fdea 	bl	800a4d4 <_Bfree>
 8009900:	2300      	movs	r3, #0
 8009902:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009904:	7033      	strb	r3, [r6, #0]
 8009906:	f10b 0301 	add.w	r3, fp, #1
 800990a:	6013      	str	r3, [r2, #0]
 800990c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800990e:	2b00      	cmp	r3, #0
 8009910:	f43f ad5b 	beq.w	80093ca <_dtoa_r+0x92>
 8009914:	601e      	str	r6, [r3, #0]
 8009916:	e558      	b.n	80093ca <_dtoa_r+0x92>
 8009918:	465b      	mov	r3, fp
 800991a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800991e:	2939      	cmp	r1, #57	; 0x39
 8009920:	f106 32ff 	add.w	r2, r6, #4294967295
 8009924:	d106      	bne.n	8009934 <_dtoa_r+0x5fc>
 8009926:	9904      	ldr	r1, [sp, #16]
 8009928:	4291      	cmp	r1, r2
 800992a:	d107      	bne.n	800993c <_dtoa_r+0x604>
 800992c:	2230      	movs	r2, #48	; 0x30
 800992e:	700a      	strb	r2, [r1, #0]
 8009930:	3301      	adds	r3, #1
 8009932:	460a      	mov	r2, r1
 8009934:	7811      	ldrb	r1, [r2, #0]
 8009936:	3101      	adds	r1, #1
 8009938:	7011      	strb	r1, [r2, #0]
 800993a:	e7b0      	b.n	800989e <_dtoa_r+0x566>
 800993c:	4616      	mov	r6, r2
 800993e:	e7ec      	b.n	800991a <_dtoa_r+0x5e2>
 8009940:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009944:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994c:	d1b3      	bne.n	80098b6 <_dtoa_r+0x57e>
 800994e:	e7d3      	b.n	80098f8 <_dtoa_r+0x5c0>
 8009950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009952:	2a00      	cmp	r2, #0
 8009954:	f000 808d 	beq.w	8009a72 <_dtoa_r+0x73a>
 8009958:	9a08      	ldr	r2, [sp, #32]
 800995a:	2a01      	cmp	r2, #1
 800995c:	dc72      	bgt.n	8009a44 <_dtoa_r+0x70c>
 800995e:	2f00      	cmp	r7, #0
 8009960:	d06c      	beq.n	8009a3c <_dtoa_r+0x704>
 8009962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009966:	4645      	mov	r5, r8
 8009968:	4656      	mov	r6, sl
 800996a:	9a07      	ldr	r2, [sp, #28]
 800996c:	2101      	movs	r1, #1
 800996e:	441a      	add	r2, r3
 8009970:	4620      	mov	r0, r4
 8009972:	449a      	add	sl, r3
 8009974:	9207      	str	r2, [sp, #28]
 8009976:	f000 fe8b 	bl	800a690 <__i2b>
 800997a:	4607      	mov	r7, r0
 800997c:	2e00      	cmp	r6, #0
 800997e:	dd0b      	ble.n	8009998 <_dtoa_r+0x660>
 8009980:	9b07      	ldr	r3, [sp, #28]
 8009982:	2b00      	cmp	r3, #0
 8009984:	dd08      	ble.n	8009998 <_dtoa_r+0x660>
 8009986:	42b3      	cmp	r3, r6
 8009988:	9a07      	ldr	r2, [sp, #28]
 800998a:	bfa8      	it	ge
 800998c:	4633      	movge	r3, r6
 800998e:	ebaa 0a03 	sub.w	sl, sl, r3
 8009992:	1af6      	subs	r6, r6, r3
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	9307      	str	r3, [sp, #28]
 8009998:	f1b8 0f00 	cmp.w	r8, #0
 800999c:	d01d      	beq.n	80099da <_dtoa_r+0x6a2>
 800999e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d06a      	beq.n	8009a7a <_dtoa_r+0x742>
 80099a4:	b18d      	cbz	r5, 80099ca <_dtoa_r+0x692>
 80099a6:	4639      	mov	r1, r7
 80099a8:	462a      	mov	r2, r5
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 ff10 	bl	800a7d0 <__pow5mult>
 80099b0:	9a01      	ldr	r2, [sp, #4]
 80099b2:	4601      	mov	r1, r0
 80099b4:	4607      	mov	r7, r0
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 fe73 	bl	800a6a2 <__multiply>
 80099bc:	9901      	ldr	r1, [sp, #4]
 80099be:	900c      	str	r0, [sp, #48]	; 0x30
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 fd87 	bl	800a4d4 <_Bfree>
 80099c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	ebb8 0205 	subs.w	r2, r8, r5
 80099ce:	d004      	beq.n	80099da <_dtoa_r+0x6a2>
 80099d0:	9901      	ldr	r1, [sp, #4]
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 fefc 	bl	800a7d0 <__pow5mult>
 80099d8:	9001      	str	r0, [sp, #4]
 80099da:	2101      	movs	r1, #1
 80099dc:	4620      	mov	r0, r4
 80099de:	f000 fe57 	bl	800a690 <__i2b>
 80099e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099e4:	4605      	mov	r5, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 81ca 	beq.w	8009d80 <_dtoa_r+0xa48>
 80099ec:	461a      	mov	r2, r3
 80099ee:	4601      	mov	r1, r0
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 feed 	bl	800a7d0 <__pow5mult>
 80099f6:	9b08      	ldr	r3, [sp, #32]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	4605      	mov	r5, r0
 80099fc:	dc44      	bgt.n	8009a88 <_dtoa_r+0x750>
 80099fe:	9b02      	ldr	r3, [sp, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d13c      	bne.n	8009a7e <_dtoa_r+0x746>
 8009a04:	9b03      	ldr	r3, [sp, #12]
 8009a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d137      	bne.n	8009a7e <_dtoa_r+0x746>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a14:	0d1b      	lsrs	r3, r3, #20
 8009a16:	051b      	lsls	r3, r3, #20
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d033      	beq.n	8009a84 <_dtoa_r+0x74c>
 8009a1c:	9b07      	ldr	r3, [sp, #28]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	f10a 0a01 	add.w	sl, sl, #1
 8009a24:	9307      	str	r3, [sp, #28]
 8009a26:	f04f 0801 	mov.w	r8, #1
 8009a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2c:	bb73      	cbnz	r3, 8009a8c <_dtoa_r+0x754>
 8009a2e:	2001      	movs	r0, #1
 8009a30:	e034      	b.n	8009a9c <_dtoa_r+0x764>
 8009a32:	bf00      	nop
 8009a34:	0800b200 	.word	0x0800b200
 8009a38:	0800b1d8 	.word	0x0800b1d8
 8009a3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a42:	e790      	b.n	8009966 <_dtoa_r+0x62e>
 8009a44:	f109 35ff 	add.w	r5, r9, #4294967295
 8009a48:	45a8      	cmp	r8, r5
 8009a4a:	bfbf      	itttt	lt
 8009a4c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8009a4e:	eba5 0808 	sublt.w	r8, r5, r8
 8009a52:	4443      	addlt	r3, r8
 8009a54:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009a56:	bfb6      	itet	lt
 8009a58:	46a8      	movlt	r8, r5
 8009a5a:	eba8 0505 	subge.w	r5, r8, r5
 8009a5e:	2500      	movlt	r5, #0
 8009a60:	f1b9 0f00 	cmp.w	r9, #0
 8009a64:	bfb9      	ittee	lt
 8009a66:	ebaa 0609 	sublt.w	r6, sl, r9
 8009a6a:	2300      	movlt	r3, #0
 8009a6c:	4656      	movge	r6, sl
 8009a6e:	464b      	movge	r3, r9
 8009a70:	e77b      	b.n	800996a <_dtoa_r+0x632>
 8009a72:	4645      	mov	r5, r8
 8009a74:	4656      	mov	r6, sl
 8009a76:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a78:	e780      	b.n	800997c <_dtoa_r+0x644>
 8009a7a:	4642      	mov	r2, r8
 8009a7c:	e7a8      	b.n	80099d0 <_dtoa_r+0x698>
 8009a7e:	f04f 0800 	mov.w	r8, #0
 8009a82:	e7d2      	b.n	8009a2a <_dtoa_r+0x6f2>
 8009a84:	4698      	mov	r8, r3
 8009a86:	e7d0      	b.n	8009a2a <_dtoa_r+0x6f2>
 8009a88:	f04f 0800 	mov.w	r8, #0
 8009a8c:	692b      	ldr	r3, [r5, #16]
 8009a8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009a92:	6918      	ldr	r0, [r3, #16]
 8009a94:	f000 fdae 	bl	800a5f4 <__hi0bits>
 8009a98:	f1c0 0020 	rsb	r0, r0, #32
 8009a9c:	9b07      	ldr	r3, [sp, #28]
 8009a9e:	4418      	add	r0, r3
 8009aa0:	f010 001f 	ands.w	r0, r0, #31
 8009aa4:	d047      	beq.n	8009b36 <_dtoa_r+0x7fe>
 8009aa6:	f1c0 0320 	rsb	r3, r0, #32
 8009aaa:	2b04      	cmp	r3, #4
 8009aac:	dd3b      	ble.n	8009b26 <_dtoa_r+0x7ee>
 8009aae:	9b07      	ldr	r3, [sp, #28]
 8009ab0:	f1c0 001c 	rsb	r0, r0, #28
 8009ab4:	4482      	add	sl, r0
 8009ab6:	4406      	add	r6, r0
 8009ab8:	4403      	add	r3, r0
 8009aba:	9307      	str	r3, [sp, #28]
 8009abc:	f1ba 0f00 	cmp.w	sl, #0
 8009ac0:	dd05      	ble.n	8009ace <_dtoa_r+0x796>
 8009ac2:	4652      	mov	r2, sl
 8009ac4:	9901      	ldr	r1, [sp, #4]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f000 fed0 	bl	800a86c <__lshift>
 8009acc:	9001      	str	r0, [sp, #4]
 8009ace:	9b07      	ldr	r3, [sp, #28]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	dd05      	ble.n	8009ae0 <_dtoa_r+0x7a8>
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f000 fec7 	bl	800a86c <__lshift>
 8009ade:	4605      	mov	r5, r0
 8009ae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ae2:	b353      	cbz	r3, 8009b3a <_dtoa_r+0x802>
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	9801      	ldr	r0, [sp, #4]
 8009ae8:	f000 ff14 	bl	800a914 <__mcmp>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	da24      	bge.n	8009b3a <_dtoa_r+0x802>
 8009af0:	2300      	movs	r3, #0
 8009af2:	220a      	movs	r2, #10
 8009af4:	9901      	ldr	r1, [sp, #4]
 8009af6:	4620      	mov	r0, r4
 8009af8:	f000 fd03 	bl	800a502 <__multadd>
 8009afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009afe:	9001      	str	r0, [sp, #4]
 8009b00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 8142 	beq.w	8009d8e <_dtoa_r+0xa56>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	220a      	movs	r2, #10
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fcf6 	bl	800a502 <__multadd>
 8009b16:	9b06      	ldr	r3, [sp, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	4607      	mov	r7, r0
 8009b1c:	dc4b      	bgt.n	8009bb6 <_dtoa_r+0x87e>
 8009b1e:	9b08      	ldr	r3, [sp, #32]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	dd48      	ble.n	8009bb6 <_dtoa_r+0x87e>
 8009b24:	e011      	b.n	8009b4a <_dtoa_r+0x812>
 8009b26:	d0c9      	beq.n	8009abc <_dtoa_r+0x784>
 8009b28:	9a07      	ldr	r2, [sp, #28]
 8009b2a:	331c      	adds	r3, #28
 8009b2c:	441a      	add	r2, r3
 8009b2e:	449a      	add	sl, r3
 8009b30:	441e      	add	r6, r3
 8009b32:	4613      	mov	r3, r2
 8009b34:	e7c1      	b.n	8009aba <_dtoa_r+0x782>
 8009b36:	4603      	mov	r3, r0
 8009b38:	e7f6      	b.n	8009b28 <_dtoa_r+0x7f0>
 8009b3a:	f1b9 0f00 	cmp.w	r9, #0
 8009b3e:	dc34      	bgt.n	8009baa <_dtoa_r+0x872>
 8009b40:	9b08      	ldr	r3, [sp, #32]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	dd31      	ble.n	8009baa <_dtoa_r+0x872>
 8009b46:	f8cd 9018 	str.w	r9, [sp, #24]
 8009b4a:	9b06      	ldr	r3, [sp, #24]
 8009b4c:	b963      	cbnz	r3, 8009b68 <_dtoa_r+0x830>
 8009b4e:	4629      	mov	r1, r5
 8009b50:	2205      	movs	r2, #5
 8009b52:	4620      	mov	r0, r4
 8009b54:	f000 fcd5 	bl	800a502 <__multadd>
 8009b58:	4601      	mov	r1, r0
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	9801      	ldr	r0, [sp, #4]
 8009b5e:	f000 fed9 	bl	800a914 <__mcmp>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	f73f adfc 	bgt.w	8009760 <_dtoa_r+0x428>
 8009b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b6a:	9e04      	ldr	r6, [sp, #16]
 8009b6c:	ea6f 0b03 	mvn.w	fp, r3
 8009b70:	f04f 0900 	mov.w	r9, #0
 8009b74:	4629      	mov	r1, r5
 8009b76:	4620      	mov	r0, r4
 8009b78:	f000 fcac 	bl	800a4d4 <_Bfree>
 8009b7c:	2f00      	cmp	r7, #0
 8009b7e:	f43f aebb 	beq.w	80098f8 <_dtoa_r+0x5c0>
 8009b82:	f1b9 0f00 	cmp.w	r9, #0
 8009b86:	d005      	beq.n	8009b94 <_dtoa_r+0x85c>
 8009b88:	45b9      	cmp	r9, r7
 8009b8a:	d003      	beq.n	8009b94 <_dtoa_r+0x85c>
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 fca0 	bl	800a4d4 <_Bfree>
 8009b94:	4639      	mov	r1, r7
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 fc9c 	bl	800a4d4 <_Bfree>
 8009b9c:	e6ac      	b.n	80098f8 <_dtoa_r+0x5c0>
 8009b9e:	2500      	movs	r5, #0
 8009ba0:	462f      	mov	r7, r5
 8009ba2:	e7e1      	b.n	8009b68 <_dtoa_r+0x830>
 8009ba4:	469b      	mov	fp, r3
 8009ba6:	462f      	mov	r7, r5
 8009ba8:	e5da      	b.n	8009760 <_dtoa_r+0x428>
 8009baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bac:	f8cd 9018 	str.w	r9, [sp, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 80f3 	beq.w	8009d9c <_dtoa_r+0xa64>
 8009bb6:	2e00      	cmp	r6, #0
 8009bb8:	dd05      	ble.n	8009bc6 <_dtoa_r+0x88e>
 8009bba:	4639      	mov	r1, r7
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 fe54 	bl	800a86c <__lshift>
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	f1b8 0f00 	cmp.w	r8, #0
 8009bca:	d04c      	beq.n	8009c66 <_dtoa_r+0x92e>
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 fc4c 	bl	800a46c <_Balloc>
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	3202      	adds	r2, #2
 8009bd8:	4606      	mov	r6, r0
 8009bda:	0092      	lsls	r2, r2, #2
 8009bdc:	f107 010c 	add.w	r1, r7, #12
 8009be0:	300c      	adds	r0, #12
 8009be2:	f7fd fd95 	bl	8007710 <memcpy>
 8009be6:	2201      	movs	r2, #1
 8009be8:	4631      	mov	r1, r6
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 fe3e 	bl	800a86c <__lshift>
 8009bf0:	9b02      	ldr	r3, [sp, #8]
 8009bf2:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	46b9      	mov	r9, r7
 8009bfc:	9307      	str	r3, [sp, #28]
 8009bfe:	4607      	mov	r7, r0
 8009c00:	4629      	mov	r1, r5
 8009c02:	9801      	ldr	r0, [sp, #4]
 8009c04:	f7ff fb0a 	bl	800921c <quorem>
 8009c08:	4649      	mov	r1, r9
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009c10:	9801      	ldr	r0, [sp, #4]
 8009c12:	f000 fe7f 	bl	800a914 <__mcmp>
 8009c16:	463a      	mov	r2, r7
 8009c18:	9002      	str	r0, [sp, #8]
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 fe93 	bl	800a948 <__mdiff>
 8009c22:	68c3      	ldr	r3, [r0, #12]
 8009c24:	4602      	mov	r2, r0
 8009c26:	bb03      	cbnz	r3, 8009c6a <_dtoa_r+0x932>
 8009c28:	4601      	mov	r1, r0
 8009c2a:	9009      	str	r0, [sp, #36]	; 0x24
 8009c2c:	9801      	ldr	r0, [sp, #4]
 8009c2e:	f000 fe71 	bl	800a914 <__mcmp>
 8009c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c34:	4603      	mov	r3, r0
 8009c36:	4611      	mov	r1, r2
 8009c38:	4620      	mov	r0, r4
 8009c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c3c:	f000 fc4a 	bl	800a4d4 <_Bfree>
 8009c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c42:	b9a3      	cbnz	r3, 8009c6e <_dtoa_r+0x936>
 8009c44:	9a08      	ldr	r2, [sp, #32]
 8009c46:	b992      	cbnz	r2, 8009c6e <_dtoa_r+0x936>
 8009c48:	9a07      	ldr	r2, [sp, #28]
 8009c4a:	b982      	cbnz	r2, 8009c6e <_dtoa_r+0x936>
 8009c4c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c50:	d029      	beq.n	8009ca6 <_dtoa_r+0x96e>
 8009c52:	9b02      	ldr	r3, [sp, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dd01      	ble.n	8009c5c <_dtoa_r+0x924>
 8009c58:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8009c5c:	f10a 0601 	add.w	r6, sl, #1
 8009c60:	f88a 8000 	strb.w	r8, [sl]
 8009c64:	e786      	b.n	8009b74 <_dtoa_r+0x83c>
 8009c66:	4638      	mov	r0, r7
 8009c68:	e7c2      	b.n	8009bf0 <_dtoa_r+0x8b8>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e7e3      	b.n	8009c36 <_dtoa_r+0x8fe>
 8009c6e:	9a02      	ldr	r2, [sp, #8]
 8009c70:	2a00      	cmp	r2, #0
 8009c72:	db04      	blt.n	8009c7e <_dtoa_r+0x946>
 8009c74:	d124      	bne.n	8009cc0 <_dtoa_r+0x988>
 8009c76:	9a08      	ldr	r2, [sp, #32]
 8009c78:	bb12      	cbnz	r2, 8009cc0 <_dtoa_r+0x988>
 8009c7a:	9a07      	ldr	r2, [sp, #28]
 8009c7c:	bb02      	cbnz	r2, 8009cc0 <_dtoa_r+0x988>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	ddec      	ble.n	8009c5c <_dtoa_r+0x924>
 8009c82:	2201      	movs	r2, #1
 8009c84:	9901      	ldr	r1, [sp, #4]
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 fdf0 	bl	800a86c <__lshift>
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	9001      	str	r0, [sp, #4]
 8009c90:	f000 fe40 	bl	800a914 <__mcmp>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	dc03      	bgt.n	8009ca0 <_dtoa_r+0x968>
 8009c98:	d1e0      	bne.n	8009c5c <_dtoa_r+0x924>
 8009c9a:	f018 0f01 	tst.w	r8, #1
 8009c9e:	d0dd      	beq.n	8009c5c <_dtoa_r+0x924>
 8009ca0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ca4:	d1d8      	bne.n	8009c58 <_dtoa_r+0x920>
 8009ca6:	2339      	movs	r3, #57	; 0x39
 8009ca8:	f10a 0601 	add.w	r6, sl, #1
 8009cac:	f88a 3000 	strb.w	r3, [sl]
 8009cb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cb4:	2b39      	cmp	r3, #57	; 0x39
 8009cb6:	f106 32ff 	add.w	r2, r6, #4294967295
 8009cba:	d04c      	beq.n	8009d56 <_dtoa_r+0xa1e>
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	e051      	b.n	8009d64 <_dtoa_r+0xa2c>
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f10a 0601 	add.w	r6, sl, #1
 8009cc6:	dd05      	ble.n	8009cd4 <_dtoa_r+0x99c>
 8009cc8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ccc:	d0eb      	beq.n	8009ca6 <_dtoa_r+0x96e>
 8009cce:	f108 0801 	add.w	r8, r8, #1
 8009cd2:	e7c5      	b.n	8009c60 <_dtoa_r+0x928>
 8009cd4:	9b04      	ldr	r3, [sp, #16]
 8009cd6:	9a06      	ldr	r2, [sp, #24]
 8009cd8:	f806 8c01 	strb.w	r8, [r6, #-1]
 8009cdc:	1af3      	subs	r3, r6, r3
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d021      	beq.n	8009d26 <_dtoa_r+0x9ee>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	9901      	ldr	r1, [sp, #4]
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f000 fc0a 	bl	800a502 <__multadd>
 8009cee:	45b9      	cmp	r9, r7
 8009cf0:	9001      	str	r0, [sp, #4]
 8009cf2:	f04f 0300 	mov.w	r3, #0
 8009cf6:	f04f 020a 	mov.w	r2, #10
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	d105      	bne.n	8009d0c <_dtoa_r+0x9d4>
 8009d00:	f000 fbff 	bl	800a502 <__multadd>
 8009d04:	4681      	mov	r9, r0
 8009d06:	4607      	mov	r7, r0
 8009d08:	46b2      	mov	sl, r6
 8009d0a:	e779      	b.n	8009c00 <_dtoa_r+0x8c8>
 8009d0c:	f000 fbf9 	bl	800a502 <__multadd>
 8009d10:	4639      	mov	r1, r7
 8009d12:	4681      	mov	r9, r0
 8009d14:	2300      	movs	r3, #0
 8009d16:	220a      	movs	r2, #10
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f000 fbf2 	bl	800a502 <__multadd>
 8009d1e:	4607      	mov	r7, r0
 8009d20:	e7f2      	b.n	8009d08 <_dtoa_r+0x9d0>
 8009d22:	f04f 0900 	mov.w	r9, #0
 8009d26:	2201      	movs	r2, #1
 8009d28:	9901      	ldr	r1, [sp, #4]
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 fd9e 	bl	800a86c <__lshift>
 8009d30:	4629      	mov	r1, r5
 8009d32:	9001      	str	r0, [sp, #4]
 8009d34:	f000 fdee 	bl	800a914 <__mcmp>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	dcb9      	bgt.n	8009cb0 <_dtoa_r+0x978>
 8009d3c:	d102      	bne.n	8009d44 <_dtoa_r+0xa0c>
 8009d3e:	f018 0f01 	tst.w	r8, #1
 8009d42:	d1b5      	bne.n	8009cb0 <_dtoa_r+0x978>
 8009d44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d48:	2b30      	cmp	r3, #48	; 0x30
 8009d4a:	f106 32ff 	add.w	r2, r6, #4294967295
 8009d4e:	f47f af11 	bne.w	8009b74 <_dtoa_r+0x83c>
 8009d52:	4616      	mov	r6, r2
 8009d54:	e7f6      	b.n	8009d44 <_dtoa_r+0xa0c>
 8009d56:	9b04      	ldr	r3, [sp, #16]
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d105      	bne.n	8009d68 <_dtoa_r+0xa30>
 8009d5c:	9a04      	ldr	r2, [sp, #16]
 8009d5e:	f10b 0b01 	add.w	fp, fp, #1
 8009d62:	2331      	movs	r3, #49	; 0x31
 8009d64:	7013      	strb	r3, [r2, #0]
 8009d66:	e705      	b.n	8009b74 <_dtoa_r+0x83c>
 8009d68:	4616      	mov	r6, r2
 8009d6a:	e7a1      	b.n	8009cb0 <_dtoa_r+0x978>
 8009d6c:	4b16      	ldr	r3, [pc, #88]	; (8009dc8 <_dtoa_r+0xa90>)
 8009d6e:	f7ff bb48 	b.w	8009402 <_dtoa_r+0xca>
 8009d72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f47f ab23 	bne.w	80093c0 <_dtoa_r+0x88>
 8009d7a:	4b14      	ldr	r3, [pc, #80]	; (8009dcc <_dtoa_r+0xa94>)
 8009d7c:	f7ff bb41 	b.w	8009402 <_dtoa_r+0xca>
 8009d80:	9b08      	ldr	r3, [sp, #32]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	f77f ae3b 	ble.w	80099fe <_dtoa_r+0x6c6>
 8009d88:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8009d8c:	e64f      	b.n	8009a2e <_dtoa_r+0x6f6>
 8009d8e:	9b06      	ldr	r3, [sp, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	dc03      	bgt.n	8009d9c <_dtoa_r+0xa64>
 8009d94:	9b08      	ldr	r3, [sp, #32]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	f73f aed7 	bgt.w	8009b4a <_dtoa_r+0x812>
 8009d9c:	9e04      	ldr	r6, [sp, #16]
 8009d9e:	9801      	ldr	r0, [sp, #4]
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7ff fa3b 	bl	800921c <quorem>
 8009da6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009daa:	f806 8b01 	strb.w	r8, [r6], #1
 8009dae:	9b04      	ldr	r3, [sp, #16]
 8009db0:	9a06      	ldr	r2, [sp, #24]
 8009db2:	1af3      	subs	r3, r6, r3
 8009db4:	429a      	cmp	r2, r3
 8009db6:	ddb4      	ble.n	8009d22 <_dtoa_r+0x9ea>
 8009db8:	2300      	movs	r3, #0
 8009dba:	220a      	movs	r2, #10
 8009dbc:	9901      	ldr	r1, [sp, #4]
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f000 fb9f 	bl	800a502 <__multadd>
 8009dc4:	9001      	str	r0, [sp, #4]
 8009dc6:	e7ea      	b.n	8009d9e <_dtoa_r+0xa66>
 8009dc8:	0800b144 	.word	0x0800b144
 8009dcc:	0800b1c0 	.word	0x0800b1c0

08009dd0 <rshift>:
 8009dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dd2:	6906      	ldr	r6, [r0, #16]
 8009dd4:	114b      	asrs	r3, r1, #5
 8009dd6:	429e      	cmp	r6, r3
 8009dd8:	f100 0414 	add.w	r4, r0, #20
 8009ddc:	dd30      	ble.n	8009e40 <rshift+0x70>
 8009dde:	f011 011f 	ands.w	r1, r1, #31
 8009de2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009de6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009dea:	d108      	bne.n	8009dfe <rshift+0x2e>
 8009dec:	4621      	mov	r1, r4
 8009dee:	42b2      	cmp	r2, r6
 8009df0:	460b      	mov	r3, r1
 8009df2:	d211      	bcs.n	8009e18 <rshift+0x48>
 8009df4:	f852 3b04 	ldr.w	r3, [r2], #4
 8009df8:	f841 3b04 	str.w	r3, [r1], #4
 8009dfc:	e7f7      	b.n	8009dee <rshift+0x1e>
 8009dfe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009e02:	f1c1 0c20 	rsb	ip, r1, #32
 8009e06:	40cd      	lsrs	r5, r1
 8009e08:	3204      	adds	r2, #4
 8009e0a:	4623      	mov	r3, r4
 8009e0c:	42b2      	cmp	r2, r6
 8009e0e:	4617      	mov	r7, r2
 8009e10:	d30c      	bcc.n	8009e2c <rshift+0x5c>
 8009e12:	601d      	str	r5, [r3, #0]
 8009e14:	b105      	cbz	r5, 8009e18 <rshift+0x48>
 8009e16:	3304      	adds	r3, #4
 8009e18:	1b1a      	subs	r2, r3, r4
 8009e1a:	42a3      	cmp	r3, r4
 8009e1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e20:	bf08      	it	eq
 8009e22:	2300      	moveq	r3, #0
 8009e24:	6102      	str	r2, [r0, #16]
 8009e26:	bf08      	it	eq
 8009e28:	6143      	streq	r3, [r0, #20]
 8009e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e2c:	683f      	ldr	r7, [r7, #0]
 8009e2e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009e32:	433d      	orrs	r5, r7
 8009e34:	f843 5b04 	str.w	r5, [r3], #4
 8009e38:	f852 5b04 	ldr.w	r5, [r2], #4
 8009e3c:	40cd      	lsrs	r5, r1
 8009e3e:	e7e5      	b.n	8009e0c <rshift+0x3c>
 8009e40:	4623      	mov	r3, r4
 8009e42:	e7e9      	b.n	8009e18 <rshift+0x48>

08009e44 <__hexdig_fun>:
 8009e44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e48:	2b09      	cmp	r3, #9
 8009e4a:	d802      	bhi.n	8009e52 <__hexdig_fun+0xe>
 8009e4c:	3820      	subs	r0, #32
 8009e4e:	b2c0      	uxtb	r0, r0
 8009e50:	4770      	bx	lr
 8009e52:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e56:	2b05      	cmp	r3, #5
 8009e58:	d801      	bhi.n	8009e5e <__hexdig_fun+0x1a>
 8009e5a:	3847      	subs	r0, #71	; 0x47
 8009e5c:	e7f7      	b.n	8009e4e <__hexdig_fun+0xa>
 8009e5e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	d801      	bhi.n	8009e6a <__hexdig_fun+0x26>
 8009e66:	3827      	subs	r0, #39	; 0x27
 8009e68:	e7f1      	b.n	8009e4e <__hexdig_fun+0xa>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	4770      	bx	lr

08009e6e <__gethex>:
 8009e6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e72:	b08b      	sub	sp, #44	; 0x2c
 8009e74:	468a      	mov	sl, r1
 8009e76:	9002      	str	r0, [sp, #8]
 8009e78:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009e7a:	9306      	str	r3, [sp, #24]
 8009e7c:	4690      	mov	r8, r2
 8009e7e:	f000 fad0 	bl	800a422 <__localeconv_l>
 8009e82:	6803      	ldr	r3, [r0, #0]
 8009e84:	9303      	str	r3, [sp, #12]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7f6 fa2a 	bl	80002e0 <strlen>
 8009e8c:	9b03      	ldr	r3, [sp, #12]
 8009e8e:	9001      	str	r0, [sp, #4]
 8009e90:	4403      	add	r3, r0
 8009e92:	f04f 0b00 	mov.w	fp, #0
 8009e96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009e9a:	9307      	str	r3, [sp, #28]
 8009e9c:	f8da 3000 	ldr.w	r3, [sl]
 8009ea0:	3302      	adds	r3, #2
 8009ea2:	461f      	mov	r7, r3
 8009ea4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009ea8:	2830      	cmp	r0, #48	; 0x30
 8009eaa:	d06c      	beq.n	8009f86 <__gethex+0x118>
 8009eac:	f7ff ffca 	bl	8009e44 <__hexdig_fun>
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d16a      	bne.n	8009f8c <__gethex+0x11e>
 8009eb6:	9a01      	ldr	r2, [sp, #4]
 8009eb8:	9903      	ldr	r1, [sp, #12]
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f001 f836 	bl	800af2c <strncmp>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d166      	bne.n	8009f92 <__gethex+0x124>
 8009ec4:	9b01      	ldr	r3, [sp, #4]
 8009ec6:	5cf8      	ldrb	r0, [r7, r3]
 8009ec8:	18fe      	adds	r6, r7, r3
 8009eca:	f7ff ffbb 	bl	8009e44 <__hexdig_fun>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d062      	beq.n	8009f98 <__gethex+0x12a>
 8009ed2:	4633      	mov	r3, r6
 8009ed4:	7818      	ldrb	r0, [r3, #0]
 8009ed6:	2830      	cmp	r0, #48	; 0x30
 8009ed8:	461f      	mov	r7, r3
 8009eda:	f103 0301 	add.w	r3, r3, #1
 8009ede:	d0f9      	beq.n	8009ed4 <__gethex+0x66>
 8009ee0:	f7ff ffb0 	bl	8009e44 <__hexdig_fun>
 8009ee4:	fab0 f580 	clz	r5, r0
 8009ee8:	096d      	lsrs	r5, r5, #5
 8009eea:	4634      	mov	r4, r6
 8009eec:	f04f 0b01 	mov.w	fp, #1
 8009ef0:	463a      	mov	r2, r7
 8009ef2:	4616      	mov	r6, r2
 8009ef4:	3201      	adds	r2, #1
 8009ef6:	7830      	ldrb	r0, [r6, #0]
 8009ef8:	f7ff ffa4 	bl	8009e44 <__hexdig_fun>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d1f8      	bne.n	8009ef2 <__gethex+0x84>
 8009f00:	9a01      	ldr	r2, [sp, #4]
 8009f02:	9903      	ldr	r1, [sp, #12]
 8009f04:	4630      	mov	r0, r6
 8009f06:	f001 f811 	bl	800af2c <strncmp>
 8009f0a:	b950      	cbnz	r0, 8009f22 <__gethex+0xb4>
 8009f0c:	b954      	cbnz	r4, 8009f24 <__gethex+0xb6>
 8009f0e:	9b01      	ldr	r3, [sp, #4]
 8009f10:	18f4      	adds	r4, r6, r3
 8009f12:	4622      	mov	r2, r4
 8009f14:	4616      	mov	r6, r2
 8009f16:	3201      	adds	r2, #1
 8009f18:	7830      	ldrb	r0, [r6, #0]
 8009f1a:	f7ff ff93 	bl	8009e44 <__hexdig_fun>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d1f8      	bne.n	8009f14 <__gethex+0xa6>
 8009f22:	b10c      	cbz	r4, 8009f28 <__gethex+0xba>
 8009f24:	1ba4      	subs	r4, r4, r6
 8009f26:	00a4      	lsls	r4, r4, #2
 8009f28:	7833      	ldrb	r3, [r6, #0]
 8009f2a:	2b50      	cmp	r3, #80	; 0x50
 8009f2c:	d001      	beq.n	8009f32 <__gethex+0xc4>
 8009f2e:	2b70      	cmp	r3, #112	; 0x70
 8009f30:	d140      	bne.n	8009fb4 <__gethex+0x146>
 8009f32:	7873      	ldrb	r3, [r6, #1]
 8009f34:	2b2b      	cmp	r3, #43	; 0x2b
 8009f36:	d031      	beq.n	8009f9c <__gethex+0x12e>
 8009f38:	2b2d      	cmp	r3, #45	; 0x2d
 8009f3a:	d033      	beq.n	8009fa4 <__gethex+0x136>
 8009f3c:	1c71      	adds	r1, r6, #1
 8009f3e:	f04f 0900 	mov.w	r9, #0
 8009f42:	7808      	ldrb	r0, [r1, #0]
 8009f44:	f7ff ff7e 	bl	8009e44 <__hexdig_fun>
 8009f48:	1e43      	subs	r3, r0, #1
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b18      	cmp	r3, #24
 8009f4e:	d831      	bhi.n	8009fb4 <__gethex+0x146>
 8009f50:	f1a0 0210 	sub.w	r2, r0, #16
 8009f54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f58:	f7ff ff74 	bl	8009e44 <__hexdig_fun>
 8009f5c:	1e43      	subs	r3, r0, #1
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b18      	cmp	r3, #24
 8009f62:	d922      	bls.n	8009faa <__gethex+0x13c>
 8009f64:	f1b9 0f00 	cmp.w	r9, #0
 8009f68:	d000      	beq.n	8009f6c <__gethex+0xfe>
 8009f6a:	4252      	negs	r2, r2
 8009f6c:	4414      	add	r4, r2
 8009f6e:	f8ca 1000 	str.w	r1, [sl]
 8009f72:	b30d      	cbz	r5, 8009fb8 <__gethex+0x14a>
 8009f74:	f1bb 0f00 	cmp.w	fp, #0
 8009f78:	bf0c      	ite	eq
 8009f7a:	2706      	moveq	r7, #6
 8009f7c:	2700      	movne	r7, #0
 8009f7e:	4638      	mov	r0, r7
 8009f80:	b00b      	add	sp, #44	; 0x2c
 8009f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f86:	f10b 0b01 	add.w	fp, fp, #1
 8009f8a:	e78a      	b.n	8009ea2 <__gethex+0x34>
 8009f8c:	2500      	movs	r5, #0
 8009f8e:	462c      	mov	r4, r5
 8009f90:	e7ae      	b.n	8009ef0 <__gethex+0x82>
 8009f92:	463e      	mov	r6, r7
 8009f94:	2501      	movs	r5, #1
 8009f96:	e7c7      	b.n	8009f28 <__gethex+0xba>
 8009f98:	4604      	mov	r4, r0
 8009f9a:	e7fb      	b.n	8009f94 <__gethex+0x126>
 8009f9c:	f04f 0900 	mov.w	r9, #0
 8009fa0:	1cb1      	adds	r1, r6, #2
 8009fa2:	e7ce      	b.n	8009f42 <__gethex+0xd4>
 8009fa4:	f04f 0901 	mov.w	r9, #1
 8009fa8:	e7fa      	b.n	8009fa0 <__gethex+0x132>
 8009faa:	230a      	movs	r3, #10
 8009fac:	fb03 0202 	mla	r2, r3, r2, r0
 8009fb0:	3a10      	subs	r2, #16
 8009fb2:	e7cf      	b.n	8009f54 <__gethex+0xe6>
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	e7da      	b.n	8009f6e <__gethex+0x100>
 8009fb8:	1bf3      	subs	r3, r6, r7
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	2b07      	cmp	r3, #7
 8009fc0:	dc49      	bgt.n	800a056 <__gethex+0x1e8>
 8009fc2:	9802      	ldr	r0, [sp, #8]
 8009fc4:	f000 fa52 	bl	800a46c <_Balloc>
 8009fc8:	9b01      	ldr	r3, [sp, #4]
 8009fca:	f100 0914 	add.w	r9, r0, #20
 8009fce:	f04f 0b00 	mov.w	fp, #0
 8009fd2:	f1c3 0301 	rsb	r3, r3, #1
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	f8cd 9010 	str.w	r9, [sp, #16]
 8009fdc:	46da      	mov	sl, fp
 8009fde:	9308      	str	r3, [sp, #32]
 8009fe0:	42b7      	cmp	r7, r6
 8009fe2:	d33b      	bcc.n	800a05c <__gethex+0x1ee>
 8009fe4:	9804      	ldr	r0, [sp, #16]
 8009fe6:	f840 ab04 	str.w	sl, [r0], #4
 8009fea:	eba0 0009 	sub.w	r0, r0, r9
 8009fee:	1080      	asrs	r0, r0, #2
 8009ff0:	6128      	str	r0, [r5, #16]
 8009ff2:	0147      	lsls	r7, r0, #5
 8009ff4:	4650      	mov	r0, sl
 8009ff6:	f000 fafd 	bl	800a5f4 <__hi0bits>
 8009ffa:	f8d8 6000 	ldr.w	r6, [r8]
 8009ffe:	1a3f      	subs	r7, r7, r0
 800a000:	42b7      	cmp	r7, r6
 800a002:	dd64      	ble.n	800a0ce <__gethex+0x260>
 800a004:	1bbf      	subs	r7, r7, r6
 800a006:	4639      	mov	r1, r7
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 fe0e 	bl	800ac2a <__any_on>
 800a00e:	4682      	mov	sl, r0
 800a010:	b178      	cbz	r0, 800a032 <__gethex+0x1c4>
 800a012:	1e7b      	subs	r3, r7, #1
 800a014:	1159      	asrs	r1, r3, #5
 800a016:	f003 021f 	and.w	r2, r3, #31
 800a01a:	f04f 0a01 	mov.w	sl, #1
 800a01e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a022:	fa0a f202 	lsl.w	r2, sl, r2
 800a026:	420a      	tst	r2, r1
 800a028:	d003      	beq.n	800a032 <__gethex+0x1c4>
 800a02a:	4553      	cmp	r3, sl
 800a02c:	dc46      	bgt.n	800a0bc <__gethex+0x24e>
 800a02e:	f04f 0a02 	mov.w	sl, #2
 800a032:	4639      	mov	r1, r7
 800a034:	4628      	mov	r0, r5
 800a036:	f7ff fecb 	bl	8009dd0 <rshift>
 800a03a:	443c      	add	r4, r7
 800a03c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a040:	42a3      	cmp	r3, r4
 800a042:	da52      	bge.n	800a0ea <__gethex+0x27c>
 800a044:	4629      	mov	r1, r5
 800a046:	9802      	ldr	r0, [sp, #8]
 800a048:	f000 fa44 	bl	800a4d4 <_Bfree>
 800a04c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a04e:	2300      	movs	r3, #0
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	27a3      	movs	r7, #163	; 0xa3
 800a054:	e793      	b.n	8009f7e <__gethex+0x110>
 800a056:	3101      	adds	r1, #1
 800a058:	105b      	asrs	r3, r3, #1
 800a05a:	e7b0      	b.n	8009fbe <__gethex+0x150>
 800a05c:	1e73      	subs	r3, r6, #1
 800a05e:	9305      	str	r3, [sp, #20]
 800a060:	9a07      	ldr	r2, [sp, #28]
 800a062:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a066:	4293      	cmp	r3, r2
 800a068:	d018      	beq.n	800a09c <__gethex+0x22e>
 800a06a:	f1bb 0f20 	cmp.w	fp, #32
 800a06e:	d107      	bne.n	800a080 <__gethex+0x212>
 800a070:	9b04      	ldr	r3, [sp, #16]
 800a072:	f8c3 a000 	str.w	sl, [r3]
 800a076:	3304      	adds	r3, #4
 800a078:	f04f 0a00 	mov.w	sl, #0
 800a07c:	9304      	str	r3, [sp, #16]
 800a07e:	46d3      	mov	fp, sl
 800a080:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a084:	f7ff fede 	bl	8009e44 <__hexdig_fun>
 800a088:	f000 000f 	and.w	r0, r0, #15
 800a08c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a090:	ea4a 0a00 	orr.w	sl, sl, r0
 800a094:	f10b 0b04 	add.w	fp, fp, #4
 800a098:	9b05      	ldr	r3, [sp, #20]
 800a09a:	e00d      	b.n	800a0b8 <__gethex+0x24a>
 800a09c:	9b05      	ldr	r3, [sp, #20]
 800a09e:	9a08      	ldr	r2, [sp, #32]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	42bb      	cmp	r3, r7
 800a0a4:	d3e1      	bcc.n	800a06a <__gethex+0x1fc>
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	9a01      	ldr	r2, [sp, #4]
 800a0aa:	9903      	ldr	r1, [sp, #12]
 800a0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ae:	f000 ff3d 	bl	800af2c <strncmp>
 800a0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d1d8      	bne.n	800a06a <__gethex+0x1fc>
 800a0b8:	461e      	mov	r6, r3
 800a0ba:	e791      	b.n	8009fe0 <__gethex+0x172>
 800a0bc:	1eb9      	subs	r1, r7, #2
 800a0be:	4628      	mov	r0, r5
 800a0c0:	f000 fdb3 	bl	800ac2a <__any_on>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d0b2      	beq.n	800a02e <__gethex+0x1c0>
 800a0c8:	f04f 0a03 	mov.w	sl, #3
 800a0cc:	e7b1      	b.n	800a032 <__gethex+0x1c4>
 800a0ce:	da09      	bge.n	800a0e4 <__gethex+0x276>
 800a0d0:	1bf7      	subs	r7, r6, r7
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	463a      	mov	r2, r7
 800a0d6:	9802      	ldr	r0, [sp, #8]
 800a0d8:	f000 fbc8 	bl	800a86c <__lshift>
 800a0dc:	1be4      	subs	r4, r4, r7
 800a0de:	4605      	mov	r5, r0
 800a0e0:	f100 0914 	add.w	r9, r0, #20
 800a0e4:	f04f 0a00 	mov.w	sl, #0
 800a0e8:	e7a8      	b.n	800a03c <__gethex+0x1ce>
 800a0ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a0ee:	42a0      	cmp	r0, r4
 800a0f0:	dd6a      	ble.n	800a1c8 <__gethex+0x35a>
 800a0f2:	1b04      	subs	r4, r0, r4
 800a0f4:	42a6      	cmp	r6, r4
 800a0f6:	dc2e      	bgt.n	800a156 <__gethex+0x2e8>
 800a0f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d022      	beq.n	800a146 <__gethex+0x2d8>
 800a100:	2b03      	cmp	r3, #3
 800a102:	d024      	beq.n	800a14e <__gethex+0x2e0>
 800a104:	2b01      	cmp	r3, #1
 800a106:	d115      	bne.n	800a134 <__gethex+0x2c6>
 800a108:	42a6      	cmp	r6, r4
 800a10a:	d113      	bne.n	800a134 <__gethex+0x2c6>
 800a10c:	2e01      	cmp	r6, #1
 800a10e:	dc0b      	bgt.n	800a128 <__gethex+0x2ba>
 800a110:	9a06      	ldr	r2, [sp, #24]
 800a112:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a116:	6013      	str	r3, [r2, #0]
 800a118:	2301      	movs	r3, #1
 800a11a:	612b      	str	r3, [r5, #16]
 800a11c:	f8c9 3000 	str.w	r3, [r9]
 800a120:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a122:	2762      	movs	r7, #98	; 0x62
 800a124:	601d      	str	r5, [r3, #0]
 800a126:	e72a      	b.n	8009f7e <__gethex+0x110>
 800a128:	1e71      	subs	r1, r6, #1
 800a12a:	4628      	mov	r0, r5
 800a12c:	f000 fd7d 	bl	800ac2a <__any_on>
 800a130:	2800      	cmp	r0, #0
 800a132:	d1ed      	bne.n	800a110 <__gethex+0x2a2>
 800a134:	4629      	mov	r1, r5
 800a136:	9802      	ldr	r0, [sp, #8]
 800a138:	f000 f9cc 	bl	800a4d4 <_Bfree>
 800a13c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a13e:	2300      	movs	r3, #0
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	2750      	movs	r7, #80	; 0x50
 800a144:	e71b      	b.n	8009f7e <__gethex+0x110>
 800a146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d0e1      	beq.n	800a110 <__gethex+0x2a2>
 800a14c:	e7f2      	b.n	800a134 <__gethex+0x2c6>
 800a14e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1dd      	bne.n	800a110 <__gethex+0x2a2>
 800a154:	e7ee      	b.n	800a134 <__gethex+0x2c6>
 800a156:	1e67      	subs	r7, r4, #1
 800a158:	f1ba 0f00 	cmp.w	sl, #0
 800a15c:	d131      	bne.n	800a1c2 <__gethex+0x354>
 800a15e:	b127      	cbz	r7, 800a16a <__gethex+0x2fc>
 800a160:	4639      	mov	r1, r7
 800a162:	4628      	mov	r0, r5
 800a164:	f000 fd61 	bl	800ac2a <__any_on>
 800a168:	4682      	mov	sl, r0
 800a16a:	117a      	asrs	r2, r7, #5
 800a16c:	2301      	movs	r3, #1
 800a16e:	f007 071f 	and.w	r7, r7, #31
 800a172:	fa03 f707 	lsl.w	r7, r3, r7
 800a176:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a17a:	4621      	mov	r1, r4
 800a17c:	421f      	tst	r7, r3
 800a17e:	4628      	mov	r0, r5
 800a180:	bf18      	it	ne
 800a182:	f04a 0a02 	orrne.w	sl, sl, #2
 800a186:	1b36      	subs	r6, r6, r4
 800a188:	f7ff fe22 	bl	8009dd0 <rshift>
 800a18c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a190:	2702      	movs	r7, #2
 800a192:	f1ba 0f00 	cmp.w	sl, #0
 800a196:	d048      	beq.n	800a22a <__gethex+0x3bc>
 800a198:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d015      	beq.n	800a1cc <__gethex+0x35e>
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d017      	beq.n	800a1d4 <__gethex+0x366>
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d109      	bne.n	800a1bc <__gethex+0x34e>
 800a1a8:	f01a 0f02 	tst.w	sl, #2
 800a1ac:	d006      	beq.n	800a1bc <__gethex+0x34e>
 800a1ae:	f8d9 3000 	ldr.w	r3, [r9]
 800a1b2:	ea4a 0a03 	orr.w	sl, sl, r3
 800a1b6:	f01a 0f01 	tst.w	sl, #1
 800a1ba:	d10e      	bne.n	800a1da <__gethex+0x36c>
 800a1bc:	f047 0710 	orr.w	r7, r7, #16
 800a1c0:	e033      	b.n	800a22a <__gethex+0x3bc>
 800a1c2:	f04f 0a01 	mov.w	sl, #1
 800a1c6:	e7d0      	b.n	800a16a <__gethex+0x2fc>
 800a1c8:	2701      	movs	r7, #1
 800a1ca:	e7e2      	b.n	800a192 <__gethex+0x324>
 800a1cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1ce:	f1c3 0301 	rsb	r3, r3, #1
 800a1d2:	9315      	str	r3, [sp, #84]	; 0x54
 800a1d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0f0      	beq.n	800a1bc <__gethex+0x34e>
 800a1da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a1de:	f105 0314 	add.w	r3, r5, #20
 800a1e2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a1e6:	eb03 010a 	add.w	r1, r3, sl
 800a1ea:	f04f 0c00 	mov.w	ip, #0
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a1f8:	d01c      	beq.n	800a234 <__gethex+0x3c6>
 800a1fa:	3201      	adds	r2, #1
 800a1fc:	6002      	str	r2, [r0, #0]
 800a1fe:	2f02      	cmp	r7, #2
 800a200:	f105 0314 	add.w	r3, r5, #20
 800a204:	d138      	bne.n	800a278 <__gethex+0x40a>
 800a206:	f8d8 2000 	ldr.w	r2, [r8]
 800a20a:	3a01      	subs	r2, #1
 800a20c:	42b2      	cmp	r2, r6
 800a20e:	d10a      	bne.n	800a226 <__gethex+0x3b8>
 800a210:	1171      	asrs	r1, r6, #5
 800a212:	2201      	movs	r2, #1
 800a214:	f006 061f 	and.w	r6, r6, #31
 800a218:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a21c:	fa02 f606 	lsl.w	r6, r2, r6
 800a220:	421e      	tst	r6, r3
 800a222:	bf18      	it	ne
 800a224:	4617      	movne	r7, r2
 800a226:	f047 0720 	orr.w	r7, r7, #32
 800a22a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a22c:	601d      	str	r5, [r3, #0]
 800a22e:	9b06      	ldr	r3, [sp, #24]
 800a230:	601c      	str	r4, [r3, #0]
 800a232:	e6a4      	b.n	8009f7e <__gethex+0x110>
 800a234:	4299      	cmp	r1, r3
 800a236:	f843 cc04 	str.w	ip, [r3, #-4]
 800a23a:	d8d8      	bhi.n	800a1ee <__gethex+0x380>
 800a23c:	68ab      	ldr	r3, [r5, #8]
 800a23e:	4599      	cmp	r9, r3
 800a240:	db12      	blt.n	800a268 <__gethex+0x3fa>
 800a242:	6869      	ldr	r1, [r5, #4]
 800a244:	9802      	ldr	r0, [sp, #8]
 800a246:	3101      	adds	r1, #1
 800a248:	f000 f910 	bl	800a46c <_Balloc>
 800a24c:	692a      	ldr	r2, [r5, #16]
 800a24e:	3202      	adds	r2, #2
 800a250:	f105 010c 	add.w	r1, r5, #12
 800a254:	4683      	mov	fp, r0
 800a256:	0092      	lsls	r2, r2, #2
 800a258:	300c      	adds	r0, #12
 800a25a:	f7fd fa59 	bl	8007710 <memcpy>
 800a25e:	4629      	mov	r1, r5
 800a260:	9802      	ldr	r0, [sp, #8]
 800a262:	f000 f937 	bl	800a4d4 <_Bfree>
 800a266:	465d      	mov	r5, fp
 800a268:	692b      	ldr	r3, [r5, #16]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a270:	612a      	str	r2, [r5, #16]
 800a272:	2201      	movs	r2, #1
 800a274:	615a      	str	r2, [r3, #20]
 800a276:	e7c2      	b.n	800a1fe <__gethex+0x390>
 800a278:	692a      	ldr	r2, [r5, #16]
 800a27a:	454a      	cmp	r2, r9
 800a27c:	dd0b      	ble.n	800a296 <__gethex+0x428>
 800a27e:	2101      	movs	r1, #1
 800a280:	4628      	mov	r0, r5
 800a282:	f7ff fda5 	bl	8009dd0 <rshift>
 800a286:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a28a:	3401      	adds	r4, #1
 800a28c:	42a3      	cmp	r3, r4
 800a28e:	f6ff aed9 	blt.w	800a044 <__gethex+0x1d6>
 800a292:	2701      	movs	r7, #1
 800a294:	e7c7      	b.n	800a226 <__gethex+0x3b8>
 800a296:	f016 061f 	ands.w	r6, r6, #31
 800a29a:	d0fa      	beq.n	800a292 <__gethex+0x424>
 800a29c:	449a      	add	sl, r3
 800a29e:	f1c6 0620 	rsb	r6, r6, #32
 800a2a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a2a6:	f000 f9a5 	bl	800a5f4 <__hi0bits>
 800a2aa:	42b0      	cmp	r0, r6
 800a2ac:	dbe7      	blt.n	800a27e <__gethex+0x410>
 800a2ae:	e7f0      	b.n	800a292 <__gethex+0x424>

0800a2b0 <L_shift>:
 800a2b0:	f1c2 0208 	rsb	r2, r2, #8
 800a2b4:	0092      	lsls	r2, r2, #2
 800a2b6:	b570      	push	{r4, r5, r6, lr}
 800a2b8:	f1c2 0620 	rsb	r6, r2, #32
 800a2bc:	6843      	ldr	r3, [r0, #4]
 800a2be:	6804      	ldr	r4, [r0, #0]
 800a2c0:	fa03 f506 	lsl.w	r5, r3, r6
 800a2c4:	432c      	orrs	r4, r5
 800a2c6:	40d3      	lsrs	r3, r2
 800a2c8:	6004      	str	r4, [r0, #0]
 800a2ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800a2ce:	4288      	cmp	r0, r1
 800a2d0:	d3f4      	bcc.n	800a2bc <L_shift+0xc>
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}

0800a2d4 <__match>:
 800a2d4:	b530      	push	{r4, r5, lr}
 800a2d6:	6803      	ldr	r3, [r0, #0]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2de:	b914      	cbnz	r4, 800a2e6 <__match+0x12>
 800a2e0:	6003      	str	r3, [r0, #0]
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	bd30      	pop	{r4, r5, pc}
 800a2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a2ee:	2d19      	cmp	r5, #25
 800a2f0:	bf98      	it	ls
 800a2f2:	3220      	addls	r2, #32
 800a2f4:	42a2      	cmp	r2, r4
 800a2f6:	d0f0      	beq.n	800a2da <__match+0x6>
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	e7f3      	b.n	800a2e4 <__match+0x10>

0800a2fc <__hexnan>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	680b      	ldr	r3, [r1, #0]
 800a302:	6801      	ldr	r1, [r0, #0]
 800a304:	115f      	asrs	r7, r3, #5
 800a306:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a30a:	f013 031f 	ands.w	r3, r3, #31
 800a30e:	b087      	sub	sp, #28
 800a310:	bf18      	it	ne
 800a312:	3704      	addne	r7, #4
 800a314:	2500      	movs	r5, #0
 800a316:	1f3e      	subs	r6, r7, #4
 800a318:	4682      	mov	sl, r0
 800a31a:	4690      	mov	r8, r2
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	f847 5c04 	str.w	r5, [r7, #-4]
 800a322:	46b1      	mov	r9, r6
 800a324:	4634      	mov	r4, r6
 800a326:	9502      	str	r5, [sp, #8]
 800a328:	46ab      	mov	fp, r5
 800a32a:	784a      	ldrb	r2, [r1, #1]
 800a32c:	1c4b      	adds	r3, r1, #1
 800a32e:	9303      	str	r3, [sp, #12]
 800a330:	b342      	cbz	r2, 800a384 <__hexnan+0x88>
 800a332:	4610      	mov	r0, r2
 800a334:	9105      	str	r1, [sp, #20]
 800a336:	9204      	str	r2, [sp, #16]
 800a338:	f7ff fd84 	bl	8009e44 <__hexdig_fun>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d143      	bne.n	800a3c8 <__hexnan+0xcc>
 800a340:	9a04      	ldr	r2, [sp, #16]
 800a342:	9905      	ldr	r1, [sp, #20]
 800a344:	2a20      	cmp	r2, #32
 800a346:	d818      	bhi.n	800a37a <__hexnan+0x7e>
 800a348:	9b02      	ldr	r3, [sp, #8]
 800a34a:	459b      	cmp	fp, r3
 800a34c:	dd13      	ble.n	800a376 <__hexnan+0x7a>
 800a34e:	454c      	cmp	r4, r9
 800a350:	d206      	bcs.n	800a360 <__hexnan+0x64>
 800a352:	2d07      	cmp	r5, #7
 800a354:	dc04      	bgt.n	800a360 <__hexnan+0x64>
 800a356:	462a      	mov	r2, r5
 800a358:	4649      	mov	r1, r9
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7ff ffa8 	bl	800a2b0 <L_shift>
 800a360:	4544      	cmp	r4, r8
 800a362:	d944      	bls.n	800a3ee <__hexnan+0xf2>
 800a364:	2300      	movs	r3, #0
 800a366:	f1a4 0904 	sub.w	r9, r4, #4
 800a36a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a36e:	f8cd b008 	str.w	fp, [sp, #8]
 800a372:	464c      	mov	r4, r9
 800a374:	461d      	mov	r5, r3
 800a376:	9903      	ldr	r1, [sp, #12]
 800a378:	e7d7      	b.n	800a32a <__hexnan+0x2e>
 800a37a:	2a29      	cmp	r2, #41	; 0x29
 800a37c:	d14a      	bne.n	800a414 <__hexnan+0x118>
 800a37e:	3102      	adds	r1, #2
 800a380:	f8ca 1000 	str.w	r1, [sl]
 800a384:	f1bb 0f00 	cmp.w	fp, #0
 800a388:	d044      	beq.n	800a414 <__hexnan+0x118>
 800a38a:	454c      	cmp	r4, r9
 800a38c:	d206      	bcs.n	800a39c <__hexnan+0xa0>
 800a38e:	2d07      	cmp	r5, #7
 800a390:	dc04      	bgt.n	800a39c <__hexnan+0xa0>
 800a392:	462a      	mov	r2, r5
 800a394:	4649      	mov	r1, r9
 800a396:	4620      	mov	r0, r4
 800a398:	f7ff ff8a 	bl	800a2b0 <L_shift>
 800a39c:	4544      	cmp	r4, r8
 800a39e:	d928      	bls.n	800a3f2 <__hexnan+0xf6>
 800a3a0:	4643      	mov	r3, r8
 800a3a2:	f854 2b04 	ldr.w	r2, [r4], #4
 800a3a6:	f843 2b04 	str.w	r2, [r3], #4
 800a3aa:	42a6      	cmp	r6, r4
 800a3ac:	d2f9      	bcs.n	800a3a2 <__hexnan+0xa6>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f843 2b04 	str.w	r2, [r3], #4
 800a3b4:	429e      	cmp	r6, r3
 800a3b6:	d2fb      	bcs.n	800a3b0 <__hexnan+0xb4>
 800a3b8:	6833      	ldr	r3, [r6, #0]
 800a3ba:	b91b      	cbnz	r3, 800a3c4 <__hexnan+0xc8>
 800a3bc:	4546      	cmp	r6, r8
 800a3be:	d127      	bne.n	800a410 <__hexnan+0x114>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	6033      	str	r3, [r6, #0]
 800a3c4:	2005      	movs	r0, #5
 800a3c6:	e026      	b.n	800a416 <__hexnan+0x11a>
 800a3c8:	3501      	adds	r5, #1
 800a3ca:	2d08      	cmp	r5, #8
 800a3cc:	f10b 0b01 	add.w	fp, fp, #1
 800a3d0:	dd06      	ble.n	800a3e0 <__hexnan+0xe4>
 800a3d2:	4544      	cmp	r4, r8
 800a3d4:	d9cf      	bls.n	800a376 <__hexnan+0x7a>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3dc:	2501      	movs	r5, #1
 800a3de:	3c04      	subs	r4, #4
 800a3e0:	6822      	ldr	r2, [r4, #0]
 800a3e2:	f000 000f 	and.w	r0, r0, #15
 800a3e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a3ea:	6020      	str	r0, [r4, #0]
 800a3ec:	e7c3      	b.n	800a376 <__hexnan+0x7a>
 800a3ee:	2508      	movs	r5, #8
 800a3f0:	e7c1      	b.n	800a376 <__hexnan+0x7a>
 800a3f2:	9b01      	ldr	r3, [sp, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0df      	beq.n	800a3b8 <__hexnan+0xbc>
 800a3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3fc:	f1c3 0320 	rsb	r3, r3, #32
 800a400:	fa22 f303 	lsr.w	r3, r2, r3
 800a404:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a408:	401a      	ands	r2, r3
 800a40a:	f847 2c04 	str.w	r2, [r7, #-4]
 800a40e:	e7d3      	b.n	800a3b8 <__hexnan+0xbc>
 800a410:	3e04      	subs	r6, #4
 800a412:	e7d1      	b.n	800a3b8 <__hexnan+0xbc>
 800a414:	2004      	movs	r0, #4
 800a416:	b007      	add	sp, #28
 800a418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a41c <__locale_ctype_ptr_l>:
 800a41c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a420:	4770      	bx	lr

0800a422 <__localeconv_l>:
 800a422:	30f0      	adds	r0, #240	; 0xf0
 800a424:	4770      	bx	lr
	...

0800a428 <_localeconv_r>:
 800a428:	4b04      	ldr	r3, [pc, #16]	; (800a43c <_localeconv_r+0x14>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6a18      	ldr	r0, [r3, #32]
 800a42e:	4b04      	ldr	r3, [pc, #16]	; (800a440 <_localeconv_r+0x18>)
 800a430:	2800      	cmp	r0, #0
 800a432:	bf08      	it	eq
 800a434:	4618      	moveq	r0, r3
 800a436:	30f0      	adds	r0, #240	; 0xf0
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	24000010 	.word	0x24000010
 800a440:	24000074 	.word	0x24000074

0800a444 <__ascii_mbtowc>:
 800a444:	b082      	sub	sp, #8
 800a446:	b901      	cbnz	r1, 800a44a <__ascii_mbtowc+0x6>
 800a448:	a901      	add	r1, sp, #4
 800a44a:	b142      	cbz	r2, 800a45e <__ascii_mbtowc+0x1a>
 800a44c:	b14b      	cbz	r3, 800a462 <__ascii_mbtowc+0x1e>
 800a44e:	7813      	ldrb	r3, [r2, #0]
 800a450:	600b      	str	r3, [r1, #0]
 800a452:	7812      	ldrb	r2, [r2, #0]
 800a454:	1c10      	adds	r0, r2, #0
 800a456:	bf18      	it	ne
 800a458:	2001      	movne	r0, #1
 800a45a:	b002      	add	sp, #8
 800a45c:	4770      	bx	lr
 800a45e:	4610      	mov	r0, r2
 800a460:	e7fb      	b.n	800a45a <__ascii_mbtowc+0x16>
 800a462:	f06f 0001 	mvn.w	r0, #1
 800a466:	e7f8      	b.n	800a45a <__ascii_mbtowc+0x16>

0800a468 <__malloc_lock>:
 800a468:	4770      	bx	lr

0800a46a <__malloc_unlock>:
 800a46a:	4770      	bx	lr

0800a46c <_Balloc>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a470:	4604      	mov	r4, r0
 800a472:	460e      	mov	r6, r1
 800a474:	b93d      	cbnz	r5, 800a486 <_Balloc+0x1a>
 800a476:	2010      	movs	r0, #16
 800a478:	f7fd f93a 	bl	80076f0 <malloc>
 800a47c:	6260      	str	r0, [r4, #36]	; 0x24
 800a47e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a482:	6005      	str	r5, [r0, #0]
 800a484:	60c5      	str	r5, [r0, #12]
 800a486:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a488:	68eb      	ldr	r3, [r5, #12]
 800a48a:	b183      	cbz	r3, 800a4ae <_Balloc+0x42>
 800a48c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a494:	b9b8      	cbnz	r0, 800a4c6 <_Balloc+0x5a>
 800a496:	2101      	movs	r1, #1
 800a498:	fa01 f506 	lsl.w	r5, r1, r6
 800a49c:	1d6a      	adds	r2, r5, #5
 800a49e:	0092      	lsls	r2, r2, #2
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fbe3 	bl	800ac6c <_calloc_r>
 800a4a6:	b160      	cbz	r0, 800a4c2 <_Balloc+0x56>
 800a4a8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a4ac:	e00e      	b.n	800a4cc <_Balloc+0x60>
 800a4ae:	2221      	movs	r2, #33	; 0x21
 800a4b0:	2104      	movs	r1, #4
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 fbda 	bl	800ac6c <_calloc_r>
 800a4b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4ba:	60e8      	str	r0, [r5, #12]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e4      	bne.n	800a48c <_Balloc+0x20>
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	bd70      	pop	{r4, r5, r6, pc}
 800a4c6:	6802      	ldr	r2, [r0, #0]
 800a4c8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4d2:	e7f7      	b.n	800a4c4 <_Balloc+0x58>

0800a4d4 <_Bfree>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a4d8:	4606      	mov	r6, r0
 800a4da:	460d      	mov	r5, r1
 800a4dc:	b93c      	cbnz	r4, 800a4ee <_Bfree+0x1a>
 800a4de:	2010      	movs	r0, #16
 800a4e0:	f7fd f906 	bl	80076f0 <malloc>
 800a4e4:	6270      	str	r0, [r6, #36]	; 0x24
 800a4e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4ea:	6004      	str	r4, [r0, #0]
 800a4ec:	60c4      	str	r4, [r0, #12]
 800a4ee:	b13d      	cbz	r5, 800a500 <_Bfree+0x2c>
 800a4f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4f2:	686a      	ldr	r2, [r5, #4]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4fa:	6029      	str	r1, [r5, #0]
 800a4fc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a500:	bd70      	pop	{r4, r5, r6, pc}

0800a502 <__multadd>:
 800a502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a506:	690d      	ldr	r5, [r1, #16]
 800a508:	461f      	mov	r7, r3
 800a50a:	4606      	mov	r6, r0
 800a50c:	460c      	mov	r4, r1
 800a50e:	f101 0c14 	add.w	ip, r1, #20
 800a512:	2300      	movs	r3, #0
 800a514:	f8dc 0000 	ldr.w	r0, [ip]
 800a518:	b281      	uxth	r1, r0
 800a51a:	fb02 7101 	mla	r1, r2, r1, r7
 800a51e:	0c0f      	lsrs	r7, r1, #16
 800a520:	0c00      	lsrs	r0, r0, #16
 800a522:	fb02 7000 	mla	r0, r2, r0, r7
 800a526:	b289      	uxth	r1, r1
 800a528:	3301      	adds	r3, #1
 800a52a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a52e:	429d      	cmp	r5, r3
 800a530:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a534:	f84c 1b04 	str.w	r1, [ip], #4
 800a538:	dcec      	bgt.n	800a514 <__multadd+0x12>
 800a53a:	b1d7      	cbz	r7, 800a572 <__multadd+0x70>
 800a53c:	68a3      	ldr	r3, [r4, #8]
 800a53e:	42ab      	cmp	r3, r5
 800a540:	dc12      	bgt.n	800a568 <__multadd+0x66>
 800a542:	6861      	ldr	r1, [r4, #4]
 800a544:	4630      	mov	r0, r6
 800a546:	3101      	adds	r1, #1
 800a548:	f7ff ff90 	bl	800a46c <_Balloc>
 800a54c:	6922      	ldr	r2, [r4, #16]
 800a54e:	3202      	adds	r2, #2
 800a550:	f104 010c 	add.w	r1, r4, #12
 800a554:	4680      	mov	r8, r0
 800a556:	0092      	lsls	r2, r2, #2
 800a558:	300c      	adds	r0, #12
 800a55a:	f7fd f8d9 	bl	8007710 <memcpy>
 800a55e:	4621      	mov	r1, r4
 800a560:	4630      	mov	r0, r6
 800a562:	f7ff ffb7 	bl	800a4d4 <_Bfree>
 800a566:	4644      	mov	r4, r8
 800a568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a56c:	3501      	adds	r5, #1
 800a56e:	615f      	str	r7, [r3, #20]
 800a570:	6125      	str	r5, [r4, #16]
 800a572:	4620      	mov	r0, r4
 800a574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a578 <__s2b>:
 800a578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a57c:	460c      	mov	r4, r1
 800a57e:	4615      	mov	r5, r2
 800a580:	461f      	mov	r7, r3
 800a582:	2209      	movs	r2, #9
 800a584:	3308      	adds	r3, #8
 800a586:	4606      	mov	r6, r0
 800a588:	fb93 f3f2 	sdiv	r3, r3, r2
 800a58c:	2100      	movs	r1, #0
 800a58e:	2201      	movs	r2, #1
 800a590:	429a      	cmp	r2, r3
 800a592:	db20      	blt.n	800a5d6 <__s2b+0x5e>
 800a594:	4630      	mov	r0, r6
 800a596:	f7ff ff69 	bl	800a46c <_Balloc>
 800a59a:	9b08      	ldr	r3, [sp, #32]
 800a59c:	6143      	str	r3, [r0, #20]
 800a59e:	2d09      	cmp	r5, #9
 800a5a0:	f04f 0301 	mov.w	r3, #1
 800a5a4:	6103      	str	r3, [r0, #16]
 800a5a6:	dd19      	ble.n	800a5dc <__s2b+0x64>
 800a5a8:	f104 0809 	add.w	r8, r4, #9
 800a5ac:	46c1      	mov	r9, r8
 800a5ae:	442c      	add	r4, r5
 800a5b0:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a5b4:	4601      	mov	r1, r0
 800a5b6:	3b30      	subs	r3, #48	; 0x30
 800a5b8:	220a      	movs	r2, #10
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7ff ffa1 	bl	800a502 <__multadd>
 800a5c0:	45a1      	cmp	r9, r4
 800a5c2:	d1f5      	bne.n	800a5b0 <__s2b+0x38>
 800a5c4:	eb08 0405 	add.w	r4, r8, r5
 800a5c8:	3c08      	subs	r4, #8
 800a5ca:	1b2d      	subs	r5, r5, r4
 800a5cc:	1963      	adds	r3, r4, r5
 800a5ce:	42bb      	cmp	r3, r7
 800a5d0:	db07      	blt.n	800a5e2 <__s2b+0x6a>
 800a5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d6:	0052      	lsls	r2, r2, #1
 800a5d8:	3101      	adds	r1, #1
 800a5da:	e7d9      	b.n	800a590 <__s2b+0x18>
 800a5dc:	340a      	adds	r4, #10
 800a5de:	2509      	movs	r5, #9
 800a5e0:	e7f3      	b.n	800a5ca <__s2b+0x52>
 800a5e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5e6:	4601      	mov	r1, r0
 800a5e8:	3b30      	subs	r3, #48	; 0x30
 800a5ea:	220a      	movs	r2, #10
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7ff ff88 	bl	800a502 <__multadd>
 800a5f2:	e7eb      	b.n	800a5cc <__s2b+0x54>

0800a5f4 <__hi0bits>:
 800a5f4:	0c02      	lsrs	r2, r0, #16
 800a5f6:	0412      	lsls	r2, r2, #16
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	b9b2      	cbnz	r2, 800a62a <__hi0bits+0x36>
 800a5fc:	0403      	lsls	r3, r0, #16
 800a5fe:	2010      	movs	r0, #16
 800a600:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a604:	bf04      	itt	eq
 800a606:	021b      	lsleq	r3, r3, #8
 800a608:	3008      	addeq	r0, #8
 800a60a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a60e:	bf04      	itt	eq
 800a610:	011b      	lsleq	r3, r3, #4
 800a612:	3004      	addeq	r0, #4
 800a614:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a618:	bf04      	itt	eq
 800a61a:	009b      	lsleq	r3, r3, #2
 800a61c:	3002      	addeq	r0, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	db06      	blt.n	800a630 <__hi0bits+0x3c>
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	d503      	bpl.n	800a62e <__hi0bits+0x3a>
 800a626:	3001      	adds	r0, #1
 800a628:	4770      	bx	lr
 800a62a:	2000      	movs	r0, #0
 800a62c:	e7e8      	b.n	800a600 <__hi0bits+0xc>
 800a62e:	2020      	movs	r0, #32
 800a630:	4770      	bx	lr

0800a632 <__lo0bits>:
 800a632:	6803      	ldr	r3, [r0, #0]
 800a634:	f013 0207 	ands.w	r2, r3, #7
 800a638:	4601      	mov	r1, r0
 800a63a:	d00b      	beq.n	800a654 <__lo0bits+0x22>
 800a63c:	07da      	lsls	r2, r3, #31
 800a63e:	d423      	bmi.n	800a688 <__lo0bits+0x56>
 800a640:	0798      	lsls	r0, r3, #30
 800a642:	bf49      	itett	mi
 800a644:	085b      	lsrmi	r3, r3, #1
 800a646:	089b      	lsrpl	r3, r3, #2
 800a648:	2001      	movmi	r0, #1
 800a64a:	600b      	strmi	r3, [r1, #0]
 800a64c:	bf5c      	itt	pl
 800a64e:	600b      	strpl	r3, [r1, #0]
 800a650:	2002      	movpl	r0, #2
 800a652:	4770      	bx	lr
 800a654:	b298      	uxth	r0, r3
 800a656:	b9a8      	cbnz	r0, 800a684 <__lo0bits+0x52>
 800a658:	0c1b      	lsrs	r3, r3, #16
 800a65a:	2010      	movs	r0, #16
 800a65c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a660:	bf04      	itt	eq
 800a662:	0a1b      	lsreq	r3, r3, #8
 800a664:	3008      	addeq	r0, #8
 800a666:	071a      	lsls	r2, r3, #28
 800a668:	bf04      	itt	eq
 800a66a:	091b      	lsreq	r3, r3, #4
 800a66c:	3004      	addeq	r0, #4
 800a66e:	079a      	lsls	r2, r3, #30
 800a670:	bf04      	itt	eq
 800a672:	089b      	lsreq	r3, r3, #2
 800a674:	3002      	addeq	r0, #2
 800a676:	07da      	lsls	r2, r3, #31
 800a678:	d402      	bmi.n	800a680 <__lo0bits+0x4e>
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	d006      	beq.n	800a68c <__lo0bits+0x5a>
 800a67e:	3001      	adds	r0, #1
 800a680:	600b      	str	r3, [r1, #0]
 800a682:	4770      	bx	lr
 800a684:	4610      	mov	r0, r2
 800a686:	e7e9      	b.n	800a65c <__lo0bits+0x2a>
 800a688:	2000      	movs	r0, #0
 800a68a:	4770      	bx	lr
 800a68c:	2020      	movs	r0, #32
 800a68e:	4770      	bx	lr

0800a690 <__i2b>:
 800a690:	b510      	push	{r4, lr}
 800a692:	460c      	mov	r4, r1
 800a694:	2101      	movs	r1, #1
 800a696:	f7ff fee9 	bl	800a46c <_Balloc>
 800a69a:	2201      	movs	r2, #1
 800a69c:	6144      	str	r4, [r0, #20]
 800a69e:	6102      	str	r2, [r0, #16]
 800a6a0:	bd10      	pop	{r4, pc}

0800a6a2 <__multiply>:
 800a6a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a6:	4614      	mov	r4, r2
 800a6a8:	690a      	ldr	r2, [r1, #16]
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	bfb8      	it	lt
 800a6b0:	460b      	movlt	r3, r1
 800a6b2:	4688      	mov	r8, r1
 800a6b4:	bfbc      	itt	lt
 800a6b6:	46a0      	movlt	r8, r4
 800a6b8:	461c      	movlt	r4, r3
 800a6ba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a6be:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a6c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a6ca:	eb07 0609 	add.w	r6, r7, r9
 800a6ce:	42b3      	cmp	r3, r6
 800a6d0:	bfb8      	it	lt
 800a6d2:	3101      	addlt	r1, #1
 800a6d4:	f7ff feca 	bl	800a46c <_Balloc>
 800a6d8:	f100 0514 	add.w	r5, r0, #20
 800a6dc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a6e0:	462b      	mov	r3, r5
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	4573      	cmp	r3, lr
 800a6e6:	d316      	bcc.n	800a716 <__multiply+0x74>
 800a6e8:	f104 0214 	add.w	r2, r4, #20
 800a6ec:	f108 0114 	add.w	r1, r8, #20
 800a6f0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a6f4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	9b00      	ldr	r3, [sp, #0]
 800a6fc:	9201      	str	r2, [sp, #4]
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d80c      	bhi.n	800a71c <__multiply+0x7a>
 800a702:	2e00      	cmp	r6, #0
 800a704:	dd03      	ble.n	800a70e <__multiply+0x6c>
 800a706:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d05d      	beq.n	800a7ca <__multiply+0x128>
 800a70e:	6106      	str	r6, [r0, #16]
 800a710:	b003      	add	sp, #12
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a716:	f843 2b04 	str.w	r2, [r3], #4
 800a71a:	e7e3      	b.n	800a6e4 <__multiply+0x42>
 800a71c:	f8b2 b000 	ldrh.w	fp, [r2]
 800a720:	f1bb 0f00 	cmp.w	fp, #0
 800a724:	d023      	beq.n	800a76e <__multiply+0xcc>
 800a726:	4689      	mov	r9, r1
 800a728:	46ac      	mov	ip, r5
 800a72a:	f04f 0800 	mov.w	r8, #0
 800a72e:	f859 4b04 	ldr.w	r4, [r9], #4
 800a732:	f8dc a000 	ldr.w	sl, [ip]
 800a736:	b2a3      	uxth	r3, r4
 800a738:	fa1f fa8a 	uxth.w	sl, sl
 800a73c:	fb0b a303 	mla	r3, fp, r3, sl
 800a740:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a744:	f8dc 4000 	ldr.w	r4, [ip]
 800a748:	4443      	add	r3, r8
 800a74a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a74e:	fb0b 840a 	mla	r4, fp, sl, r8
 800a752:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a756:	46e2      	mov	sl, ip
 800a758:	b29b      	uxth	r3, r3
 800a75a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a75e:	454f      	cmp	r7, r9
 800a760:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a764:	f84a 3b04 	str.w	r3, [sl], #4
 800a768:	d82b      	bhi.n	800a7c2 <__multiply+0x120>
 800a76a:	f8cc 8004 	str.w	r8, [ip, #4]
 800a76e:	9b01      	ldr	r3, [sp, #4]
 800a770:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a774:	3204      	adds	r2, #4
 800a776:	f1ba 0f00 	cmp.w	sl, #0
 800a77a:	d020      	beq.n	800a7be <__multiply+0x11c>
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	4689      	mov	r9, r1
 800a780:	46a8      	mov	r8, r5
 800a782:	f04f 0b00 	mov.w	fp, #0
 800a786:	f8b9 c000 	ldrh.w	ip, [r9]
 800a78a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a78e:	fb0a 440c 	mla	r4, sl, ip, r4
 800a792:	445c      	add	r4, fp
 800a794:	46c4      	mov	ip, r8
 800a796:	b29b      	uxth	r3, r3
 800a798:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a79c:	f84c 3b04 	str.w	r3, [ip], #4
 800a7a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7a4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a7a8:	0c1b      	lsrs	r3, r3, #16
 800a7aa:	fb0a b303 	mla	r3, sl, r3, fp
 800a7ae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a7b2:	454f      	cmp	r7, r9
 800a7b4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a7b8:	d805      	bhi.n	800a7c6 <__multiply+0x124>
 800a7ba:	f8c8 3004 	str.w	r3, [r8, #4]
 800a7be:	3504      	adds	r5, #4
 800a7c0:	e79b      	b.n	800a6fa <__multiply+0x58>
 800a7c2:	46d4      	mov	ip, sl
 800a7c4:	e7b3      	b.n	800a72e <__multiply+0x8c>
 800a7c6:	46e0      	mov	r8, ip
 800a7c8:	e7dd      	b.n	800a786 <__multiply+0xe4>
 800a7ca:	3e01      	subs	r6, #1
 800a7cc:	e799      	b.n	800a702 <__multiply+0x60>
	...

0800a7d0 <__pow5mult>:
 800a7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	4615      	mov	r5, r2
 800a7d6:	f012 0203 	ands.w	r2, r2, #3
 800a7da:	4606      	mov	r6, r0
 800a7dc:	460f      	mov	r7, r1
 800a7de:	d007      	beq.n	800a7f0 <__pow5mult+0x20>
 800a7e0:	3a01      	subs	r2, #1
 800a7e2:	4c21      	ldr	r4, [pc, #132]	; (800a868 <__pow5mult+0x98>)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7ea:	f7ff fe8a 	bl	800a502 <__multadd>
 800a7ee:	4607      	mov	r7, r0
 800a7f0:	10ad      	asrs	r5, r5, #2
 800a7f2:	d035      	beq.n	800a860 <__pow5mult+0x90>
 800a7f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7f6:	b93c      	cbnz	r4, 800a808 <__pow5mult+0x38>
 800a7f8:	2010      	movs	r0, #16
 800a7fa:	f7fc ff79 	bl	80076f0 <malloc>
 800a7fe:	6270      	str	r0, [r6, #36]	; 0x24
 800a800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a804:	6004      	str	r4, [r0, #0]
 800a806:	60c4      	str	r4, [r0, #12]
 800a808:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a80c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a810:	b94c      	cbnz	r4, 800a826 <__pow5mult+0x56>
 800a812:	f240 2171 	movw	r1, #625	; 0x271
 800a816:	4630      	mov	r0, r6
 800a818:	f7ff ff3a 	bl	800a690 <__i2b>
 800a81c:	2300      	movs	r3, #0
 800a81e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a822:	4604      	mov	r4, r0
 800a824:	6003      	str	r3, [r0, #0]
 800a826:	f04f 0800 	mov.w	r8, #0
 800a82a:	07eb      	lsls	r3, r5, #31
 800a82c:	d50a      	bpl.n	800a844 <__pow5mult+0x74>
 800a82e:	4639      	mov	r1, r7
 800a830:	4622      	mov	r2, r4
 800a832:	4630      	mov	r0, r6
 800a834:	f7ff ff35 	bl	800a6a2 <__multiply>
 800a838:	4639      	mov	r1, r7
 800a83a:	4681      	mov	r9, r0
 800a83c:	4630      	mov	r0, r6
 800a83e:	f7ff fe49 	bl	800a4d4 <_Bfree>
 800a842:	464f      	mov	r7, r9
 800a844:	106d      	asrs	r5, r5, #1
 800a846:	d00b      	beq.n	800a860 <__pow5mult+0x90>
 800a848:	6820      	ldr	r0, [r4, #0]
 800a84a:	b938      	cbnz	r0, 800a85c <__pow5mult+0x8c>
 800a84c:	4622      	mov	r2, r4
 800a84e:	4621      	mov	r1, r4
 800a850:	4630      	mov	r0, r6
 800a852:	f7ff ff26 	bl	800a6a2 <__multiply>
 800a856:	6020      	str	r0, [r4, #0]
 800a858:	f8c0 8000 	str.w	r8, [r0]
 800a85c:	4604      	mov	r4, r0
 800a85e:	e7e4      	b.n	800a82a <__pow5mult+0x5a>
 800a860:	4638      	mov	r0, r7
 800a862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a866:	bf00      	nop
 800a868:	0800b2c8 	.word	0x0800b2c8

0800a86c <__lshift>:
 800a86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a870:	460c      	mov	r4, r1
 800a872:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a876:	6923      	ldr	r3, [r4, #16]
 800a878:	6849      	ldr	r1, [r1, #4]
 800a87a:	eb0a 0903 	add.w	r9, sl, r3
 800a87e:	68a3      	ldr	r3, [r4, #8]
 800a880:	4607      	mov	r7, r0
 800a882:	4616      	mov	r6, r2
 800a884:	f109 0501 	add.w	r5, r9, #1
 800a888:	42ab      	cmp	r3, r5
 800a88a:	db32      	blt.n	800a8f2 <__lshift+0x86>
 800a88c:	4638      	mov	r0, r7
 800a88e:	f7ff fded 	bl	800a46c <_Balloc>
 800a892:	2300      	movs	r3, #0
 800a894:	4680      	mov	r8, r0
 800a896:	f100 0114 	add.w	r1, r0, #20
 800a89a:	461a      	mov	r2, r3
 800a89c:	4553      	cmp	r3, sl
 800a89e:	db2b      	blt.n	800a8f8 <__lshift+0x8c>
 800a8a0:	6920      	ldr	r0, [r4, #16]
 800a8a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8a6:	f104 0314 	add.w	r3, r4, #20
 800a8aa:	f016 021f 	ands.w	r2, r6, #31
 800a8ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8b2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8b6:	d025      	beq.n	800a904 <__lshift+0x98>
 800a8b8:	f1c2 0e20 	rsb	lr, r2, #32
 800a8bc:	2000      	movs	r0, #0
 800a8be:	681e      	ldr	r6, [r3, #0]
 800a8c0:	468a      	mov	sl, r1
 800a8c2:	4096      	lsls	r6, r2
 800a8c4:	4330      	orrs	r0, r6
 800a8c6:	f84a 0b04 	str.w	r0, [sl], #4
 800a8ca:	f853 0b04 	ldr.w	r0, [r3], #4
 800a8ce:	459c      	cmp	ip, r3
 800a8d0:	fa20 f00e 	lsr.w	r0, r0, lr
 800a8d4:	d814      	bhi.n	800a900 <__lshift+0x94>
 800a8d6:	6048      	str	r0, [r1, #4]
 800a8d8:	b108      	cbz	r0, 800a8de <__lshift+0x72>
 800a8da:	f109 0502 	add.w	r5, r9, #2
 800a8de:	3d01      	subs	r5, #1
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f8c8 5010 	str.w	r5, [r8, #16]
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	f7ff fdf4 	bl	800a4d4 <_Bfree>
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f2:	3101      	adds	r1, #1
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	e7c7      	b.n	800a888 <__lshift+0x1c>
 800a8f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	e7cd      	b.n	800a89c <__lshift+0x30>
 800a900:	4651      	mov	r1, sl
 800a902:	e7dc      	b.n	800a8be <__lshift+0x52>
 800a904:	3904      	subs	r1, #4
 800a906:	f853 2b04 	ldr.w	r2, [r3], #4
 800a90a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a90e:	459c      	cmp	ip, r3
 800a910:	d8f9      	bhi.n	800a906 <__lshift+0x9a>
 800a912:	e7e4      	b.n	800a8de <__lshift+0x72>

0800a914 <__mcmp>:
 800a914:	6903      	ldr	r3, [r0, #16]
 800a916:	690a      	ldr	r2, [r1, #16]
 800a918:	1a9b      	subs	r3, r3, r2
 800a91a:	b530      	push	{r4, r5, lr}
 800a91c:	d10c      	bne.n	800a938 <__mcmp+0x24>
 800a91e:	0092      	lsls	r2, r2, #2
 800a920:	3014      	adds	r0, #20
 800a922:	3114      	adds	r1, #20
 800a924:	1884      	adds	r4, r0, r2
 800a926:	4411      	add	r1, r2
 800a928:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a92c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a930:	4295      	cmp	r5, r2
 800a932:	d003      	beq.n	800a93c <__mcmp+0x28>
 800a934:	d305      	bcc.n	800a942 <__mcmp+0x2e>
 800a936:	2301      	movs	r3, #1
 800a938:	4618      	mov	r0, r3
 800a93a:	bd30      	pop	{r4, r5, pc}
 800a93c:	42a0      	cmp	r0, r4
 800a93e:	d3f3      	bcc.n	800a928 <__mcmp+0x14>
 800a940:	e7fa      	b.n	800a938 <__mcmp+0x24>
 800a942:	f04f 33ff 	mov.w	r3, #4294967295
 800a946:	e7f7      	b.n	800a938 <__mcmp+0x24>

0800a948 <__mdiff>:
 800a948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a94c:	460d      	mov	r5, r1
 800a94e:	4607      	mov	r7, r0
 800a950:	4611      	mov	r1, r2
 800a952:	4628      	mov	r0, r5
 800a954:	4614      	mov	r4, r2
 800a956:	f7ff ffdd 	bl	800a914 <__mcmp>
 800a95a:	1e06      	subs	r6, r0, #0
 800a95c:	d108      	bne.n	800a970 <__mdiff+0x28>
 800a95e:	4631      	mov	r1, r6
 800a960:	4638      	mov	r0, r7
 800a962:	f7ff fd83 	bl	800a46c <_Balloc>
 800a966:	2301      	movs	r3, #1
 800a968:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a970:	bfa4      	itt	ge
 800a972:	4623      	movge	r3, r4
 800a974:	462c      	movge	r4, r5
 800a976:	4638      	mov	r0, r7
 800a978:	6861      	ldr	r1, [r4, #4]
 800a97a:	bfa6      	itte	ge
 800a97c:	461d      	movge	r5, r3
 800a97e:	2600      	movge	r6, #0
 800a980:	2601      	movlt	r6, #1
 800a982:	f7ff fd73 	bl	800a46c <_Balloc>
 800a986:	692b      	ldr	r3, [r5, #16]
 800a988:	60c6      	str	r6, [r0, #12]
 800a98a:	6926      	ldr	r6, [r4, #16]
 800a98c:	f105 0914 	add.w	r9, r5, #20
 800a990:	f104 0214 	add.w	r2, r4, #20
 800a994:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a998:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a99c:	f100 0514 	add.w	r5, r0, #20
 800a9a0:	f04f 0e00 	mov.w	lr, #0
 800a9a4:	f852 ab04 	ldr.w	sl, [r2], #4
 800a9a8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a9ac:	fa1e f18a 	uxtah	r1, lr, sl
 800a9b0:	b2a3      	uxth	r3, r4
 800a9b2:	1ac9      	subs	r1, r1, r3
 800a9b4:	0c23      	lsrs	r3, r4, #16
 800a9b6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a9ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a9be:	b289      	uxth	r1, r1
 800a9c0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a9c4:	45c8      	cmp	r8, r9
 800a9c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a9ca:	4694      	mov	ip, r2
 800a9cc:	f845 3b04 	str.w	r3, [r5], #4
 800a9d0:	d8e8      	bhi.n	800a9a4 <__mdiff+0x5c>
 800a9d2:	45bc      	cmp	ip, r7
 800a9d4:	d304      	bcc.n	800a9e0 <__mdiff+0x98>
 800a9d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a9da:	b183      	cbz	r3, 800a9fe <__mdiff+0xb6>
 800a9dc:	6106      	str	r6, [r0, #16]
 800a9de:	e7c5      	b.n	800a96c <__mdiff+0x24>
 800a9e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a9e4:	fa1e f381 	uxtah	r3, lr, r1
 800a9e8:	141a      	asrs	r2, r3, #16
 800a9ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a9f8:	f845 3b04 	str.w	r3, [r5], #4
 800a9fc:	e7e9      	b.n	800a9d2 <__mdiff+0x8a>
 800a9fe:	3e01      	subs	r6, #1
 800aa00:	e7e9      	b.n	800a9d6 <__mdiff+0x8e>
	...

0800aa04 <__ulp>:
 800aa04:	4b12      	ldr	r3, [pc, #72]	; (800aa50 <__ulp+0x4c>)
 800aa06:	ee10 2a90 	vmov	r2, s1
 800aa0a:	401a      	ands	r2, r3
 800aa0c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	dd04      	ble.n	800aa1e <__ulp+0x1a>
 800aa14:	2000      	movs	r0, #0
 800aa16:	4619      	mov	r1, r3
 800aa18:	ec41 0b10 	vmov	d0, r0, r1
 800aa1c:	4770      	bx	lr
 800aa1e:	425b      	negs	r3, r3
 800aa20:	151b      	asrs	r3, r3, #20
 800aa22:	2b13      	cmp	r3, #19
 800aa24:	f04f 0000 	mov.w	r0, #0
 800aa28:	f04f 0100 	mov.w	r1, #0
 800aa2c:	dc04      	bgt.n	800aa38 <__ulp+0x34>
 800aa2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aa32:	fa42 f103 	asr.w	r1, r2, r3
 800aa36:	e7ef      	b.n	800aa18 <__ulp+0x14>
 800aa38:	3b14      	subs	r3, #20
 800aa3a:	2b1e      	cmp	r3, #30
 800aa3c:	f04f 0201 	mov.w	r2, #1
 800aa40:	bfda      	itte	le
 800aa42:	f1c3 031f 	rsble	r3, r3, #31
 800aa46:	fa02 f303 	lslle.w	r3, r2, r3
 800aa4a:	4613      	movgt	r3, r2
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	e7e3      	b.n	800aa18 <__ulp+0x14>
 800aa50:	7ff00000 	.word	0x7ff00000

0800aa54 <__b2d>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	6905      	ldr	r5, [r0, #16]
 800aa58:	f100 0714 	add.w	r7, r0, #20
 800aa5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aa60:	1f2e      	subs	r6, r5, #4
 800aa62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aa66:	4620      	mov	r0, r4
 800aa68:	f7ff fdc4 	bl	800a5f4 <__hi0bits>
 800aa6c:	f1c0 0320 	rsb	r3, r0, #32
 800aa70:	280a      	cmp	r0, #10
 800aa72:	600b      	str	r3, [r1, #0]
 800aa74:	f8df c074 	ldr.w	ip, [pc, #116]	; 800aaec <__b2d+0x98>
 800aa78:	dc14      	bgt.n	800aaa4 <__b2d+0x50>
 800aa7a:	f1c0 0e0b 	rsb	lr, r0, #11
 800aa7e:	fa24 f10e 	lsr.w	r1, r4, lr
 800aa82:	42b7      	cmp	r7, r6
 800aa84:	ea41 030c 	orr.w	r3, r1, ip
 800aa88:	bf34      	ite	cc
 800aa8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa8e:	2100      	movcs	r1, #0
 800aa90:	3015      	adds	r0, #21
 800aa92:	fa04 f000 	lsl.w	r0, r4, r0
 800aa96:	fa21 f10e 	lsr.w	r1, r1, lr
 800aa9a:	ea40 0201 	orr.w	r2, r0, r1
 800aa9e:	ec43 2b10 	vmov	d0, r2, r3
 800aaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa4:	42b7      	cmp	r7, r6
 800aaa6:	bf3a      	itte	cc
 800aaa8:	f1a5 0608 	subcc.w	r6, r5, #8
 800aaac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aab0:	2100      	movcs	r1, #0
 800aab2:	380b      	subs	r0, #11
 800aab4:	d015      	beq.n	800aae2 <__b2d+0x8e>
 800aab6:	4084      	lsls	r4, r0
 800aab8:	f1c0 0520 	rsb	r5, r0, #32
 800aabc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800aac0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800aac4:	42be      	cmp	r6, r7
 800aac6:	fa21 fc05 	lsr.w	ip, r1, r5
 800aaca:	ea44 030c 	orr.w	r3, r4, ip
 800aace:	bf8c      	ite	hi
 800aad0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aad4:	2400      	movls	r4, #0
 800aad6:	fa01 f000 	lsl.w	r0, r1, r0
 800aada:	40ec      	lsrs	r4, r5
 800aadc:	ea40 0204 	orr.w	r2, r0, r4
 800aae0:	e7dd      	b.n	800aa9e <__b2d+0x4a>
 800aae2:	ea44 030c 	orr.w	r3, r4, ip
 800aae6:	460a      	mov	r2, r1
 800aae8:	e7d9      	b.n	800aa9e <__b2d+0x4a>
 800aaea:	bf00      	nop
 800aaec:	3ff00000 	.word	0x3ff00000

0800aaf0 <__d2b>:
 800aaf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aaf4:	460e      	mov	r6, r1
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	ec59 8b10 	vmov	r8, r9, d0
 800aafc:	4615      	mov	r5, r2
 800aafe:	f7ff fcb5 	bl	800a46c <_Balloc>
 800ab02:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ab06:	4607      	mov	r7, r0
 800ab08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab0c:	bb34      	cbnz	r4, 800ab5c <__d2b+0x6c>
 800ab0e:	9301      	str	r3, [sp, #4]
 800ab10:	f1b8 0300 	subs.w	r3, r8, #0
 800ab14:	d027      	beq.n	800ab66 <__d2b+0x76>
 800ab16:	a802      	add	r0, sp, #8
 800ab18:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ab1c:	f7ff fd89 	bl	800a632 <__lo0bits>
 800ab20:	9900      	ldr	r1, [sp, #0]
 800ab22:	b1f0      	cbz	r0, 800ab62 <__d2b+0x72>
 800ab24:	9a01      	ldr	r2, [sp, #4]
 800ab26:	f1c0 0320 	rsb	r3, r0, #32
 800ab2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2e:	430b      	orrs	r3, r1
 800ab30:	40c2      	lsrs	r2, r0
 800ab32:	617b      	str	r3, [r7, #20]
 800ab34:	9201      	str	r2, [sp, #4]
 800ab36:	9b01      	ldr	r3, [sp, #4]
 800ab38:	61bb      	str	r3, [r7, #24]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bf14      	ite	ne
 800ab3e:	2102      	movne	r1, #2
 800ab40:	2101      	moveq	r1, #1
 800ab42:	6139      	str	r1, [r7, #16]
 800ab44:	b1c4      	cbz	r4, 800ab78 <__d2b+0x88>
 800ab46:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ab4a:	4404      	add	r4, r0
 800ab4c:	6034      	str	r4, [r6, #0]
 800ab4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab52:	6028      	str	r0, [r5, #0]
 800ab54:	4638      	mov	r0, r7
 800ab56:	b003      	add	sp, #12
 800ab58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab60:	e7d5      	b.n	800ab0e <__d2b+0x1e>
 800ab62:	6179      	str	r1, [r7, #20]
 800ab64:	e7e7      	b.n	800ab36 <__d2b+0x46>
 800ab66:	a801      	add	r0, sp, #4
 800ab68:	f7ff fd63 	bl	800a632 <__lo0bits>
 800ab6c:	9b01      	ldr	r3, [sp, #4]
 800ab6e:	617b      	str	r3, [r7, #20]
 800ab70:	2101      	movs	r1, #1
 800ab72:	6139      	str	r1, [r7, #16]
 800ab74:	3020      	adds	r0, #32
 800ab76:	e7e5      	b.n	800ab44 <__d2b+0x54>
 800ab78:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ab7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab80:	6030      	str	r0, [r6, #0]
 800ab82:	6918      	ldr	r0, [r3, #16]
 800ab84:	f7ff fd36 	bl	800a5f4 <__hi0bits>
 800ab88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ab8c:	e7e1      	b.n	800ab52 <__d2b+0x62>

0800ab8e <__ratio>:
 800ab8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab92:	4688      	mov	r8, r1
 800ab94:	4669      	mov	r1, sp
 800ab96:	4681      	mov	r9, r0
 800ab98:	f7ff ff5c 	bl	800aa54 <__b2d>
 800ab9c:	a901      	add	r1, sp, #4
 800ab9e:	4640      	mov	r0, r8
 800aba0:	ec57 6b10 	vmov	r6, r7, d0
 800aba4:	ee10 4a10 	vmov	r4, s0
 800aba8:	f7ff ff54 	bl	800aa54 <__b2d>
 800abac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800abb4:	eba3 0c02 	sub.w	ip, r3, r2
 800abb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abbc:	1a9b      	subs	r3, r3, r2
 800abbe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800abc2:	ec51 0b10 	vmov	r0, r1, d0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	ee10 aa10 	vmov	sl, s0
 800abcc:	bfce      	itee	gt
 800abce:	463a      	movgt	r2, r7
 800abd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abd4:	460a      	movle	r2, r1
 800abd6:	463d      	mov	r5, r7
 800abd8:	468b      	mov	fp, r1
 800abda:	bfcc      	ite	gt
 800abdc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800abe0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800abe4:	ec45 4b17 	vmov	d7, r4, r5
 800abe8:	ec4b ab16 	vmov	d6, sl, fp
 800abec:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800abf0:	b003      	add	sp, #12
 800abf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abf6 <__copybits>:
 800abf6:	3901      	subs	r1, #1
 800abf8:	b510      	push	{r4, lr}
 800abfa:	1149      	asrs	r1, r1, #5
 800abfc:	6914      	ldr	r4, [r2, #16]
 800abfe:	3101      	adds	r1, #1
 800ac00:	f102 0314 	add.w	r3, r2, #20
 800ac04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac0c:	42a3      	cmp	r3, r4
 800ac0e:	4602      	mov	r2, r0
 800ac10:	d303      	bcc.n	800ac1a <__copybits+0x24>
 800ac12:	2300      	movs	r3, #0
 800ac14:	428a      	cmp	r2, r1
 800ac16:	d305      	bcc.n	800ac24 <__copybits+0x2e>
 800ac18:	bd10      	pop	{r4, pc}
 800ac1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac1e:	f840 2b04 	str.w	r2, [r0], #4
 800ac22:	e7f3      	b.n	800ac0c <__copybits+0x16>
 800ac24:	f842 3b04 	str.w	r3, [r2], #4
 800ac28:	e7f4      	b.n	800ac14 <__copybits+0x1e>

0800ac2a <__any_on>:
 800ac2a:	f100 0214 	add.w	r2, r0, #20
 800ac2e:	6900      	ldr	r0, [r0, #16]
 800ac30:	114b      	asrs	r3, r1, #5
 800ac32:	4298      	cmp	r0, r3
 800ac34:	b510      	push	{r4, lr}
 800ac36:	db11      	blt.n	800ac5c <__any_on+0x32>
 800ac38:	dd0a      	ble.n	800ac50 <__any_on+0x26>
 800ac3a:	f011 011f 	ands.w	r1, r1, #31
 800ac3e:	d007      	beq.n	800ac50 <__any_on+0x26>
 800ac40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac44:	fa24 f001 	lsr.w	r0, r4, r1
 800ac48:	fa00 f101 	lsl.w	r1, r0, r1
 800ac4c:	428c      	cmp	r4, r1
 800ac4e:	d10b      	bne.n	800ac68 <__any_on+0x3e>
 800ac50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d803      	bhi.n	800ac60 <__any_on+0x36>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	bd10      	pop	{r4, pc}
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	e7f7      	b.n	800ac50 <__any_on+0x26>
 800ac60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac64:	2900      	cmp	r1, #0
 800ac66:	d0f5      	beq.n	800ac54 <__any_on+0x2a>
 800ac68:	2001      	movs	r0, #1
 800ac6a:	e7f6      	b.n	800ac5a <__any_on+0x30>

0800ac6c <_calloc_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	fb02 f401 	mul.w	r4, r2, r1
 800ac72:	4621      	mov	r1, r4
 800ac74:	f7fc fdae 	bl	80077d4 <_malloc_r>
 800ac78:	4605      	mov	r5, r0
 800ac7a:	b118      	cbz	r0, 800ac84 <_calloc_r+0x18>
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	2100      	movs	r1, #0
 800ac80:	f7fc fd51 	bl	8007726 <memset>
 800ac84:	4628      	mov	r0, r5
 800ac86:	bd38      	pop	{r3, r4, r5, pc}

0800ac88 <__ssputs_r>:
 800ac88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	688e      	ldr	r6, [r1, #8]
 800ac8e:	429e      	cmp	r6, r3
 800ac90:	4682      	mov	sl, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	4690      	mov	r8, r2
 800ac96:	4699      	mov	r9, r3
 800ac98:	d837      	bhi.n	800ad0a <__ssputs_r+0x82>
 800ac9a:	898a      	ldrh	r2, [r1, #12]
 800ac9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aca0:	d031      	beq.n	800ad06 <__ssputs_r+0x7e>
 800aca2:	6825      	ldr	r5, [r4, #0]
 800aca4:	6909      	ldr	r1, [r1, #16]
 800aca6:	1a6f      	subs	r7, r5, r1
 800aca8:	6965      	ldr	r5, [r4, #20]
 800acaa:	2302      	movs	r3, #2
 800acac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acb0:	fb95 f5f3 	sdiv	r5, r5, r3
 800acb4:	f109 0301 	add.w	r3, r9, #1
 800acb8:	443b      	add	r3, r7
 800acba:	429d      	cmp	r5, r3
 800acbc:	bf38      	it	cc
 800acbe:	461d      	movcc	r5, r3
 800acc0:	0553      	lsls	r3, r2, #21
 800acc2:	d530      	bpl.n	800ad26 <__ssputs_r+0x9e>
 800acc4:	4629      	mov	r1, r5
 800acc6:	f7fc fd85 	bl	80077d4 <_malloc_r>
 800acca:	4606      	mov	r6, r0
 800accc:	b950      	cbnz	r0, 800ace4 <__ssputs_r+0x5c>
 800acce:	230c      	movs	r3, #12
 800acd0:	f8ca 3000 	str.w	r3, [sl]
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acda:	81a3      	strh	r3, [r4, #12]
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace4:	463a      	mov	r2, r7
 800ace6:	6921      	ldr	r1, [r4, #16]
 800ace8:	f7fc fd12 	bl	8007710 <memcpy>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	6126      	str	r6, [r4, #16]
 800acfa:	6165      	str	r5, [r4, #20]
 800acfc:	443e      	add	r6, r7
 800acfe:	1bed      	subs	r5, r5, r7
 800ad00:	6026      	str	r6, [r4, #0]
 800ad02:	60a5      	str	r5, [r4, #8]
 800ad04:	464e      	mov	r6, r9
 800ad06:	454e      	cmp	r6, r9
 800ad08:	d900      	bls.n	800ad0c <__ssputs_r+0x84>
 800ad0a:	464e      	mov	r6, r9
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	4641      	mov	r1, r8
 800ad10:	6820      	ldr	r0, [r4, #0]
 800ad12:	f000 f92a 	bl	800af6a <memmove>
 800ad16:	68a3      	ldr	r3, [r4, #8]
 800ad18:	1b9b      	subs	r3, r3, r6
 800ad1a:	60a3      	str	r3, [r4, #8]
 800ad1c:	6823      	ldr	r3, [r4, #0]
 800ad1e:	441e      	add	r6, r3
 800ad20:	6026      	str	r6, [r4, #0]
 800ad22:	2000      	movs	r0, #0
 800ad24:	e7dc      	b.n	800ace0 <__ssputs_r+0x58>
 800ad26:	462a      	mov	r2, r5
 800ad28:	f000 f938 	bl	800af9c <_realloc_r>
 800ad2c:	4606      	mov	r6, r0
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d1e2      	bne.n	800acf8 <__ssputs_r+0x70>
 800ad32:	6921      	ldr	r1, [r4, #16]
 800ad34:	4650      	mov	r0, sl
 800ad36:	f7fc fcff 	bl	8007738 <_free_r>
 800ad3a:	e7c8      	b.n	800acce <__ssputs_r+0x46>

0800ad3c <_svfiprintf_r>:
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	461d      	mov	r5, r3
 800ad42:	898b      	ldrh	r3, [r1, #12]
 800ad44:	061f      	lsls	r7, r3, #24
 800ad46:	b09d      	sub	sp, #116	; 0x74
 800ad48:	4680      	mov	r8, r0
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	4616      	mov	r6, r2
 800ad4e:	d50f      	bpl.n	800ad70 <_svfiprintf_r+0x34>
 800ad50:	690b      	ldr	r3, [r1, #16]
 800ad52:	b96b      	cbnz	r3, 800ad70 <_svfiprintf_r+0x34>
 800ad54:	2140      	movs	r1, #64	; 0x40
 800ad56:	f7fc fd3d 	bl	80077d4 <_malloc_r>
 800ad5a:	6020      	str	r0, [r4, #0]
 800ad5c:	6120      	str	r0, [r4, #16]
 800ad5e:	b928      	cbnz	r0, 800ad6c <_svfiprintf_r+0x30>
 800ad60:	230c      	movs	r3, #12
 800ad62:	f8c8 3000 	str.w	r3, [r8]
 800ad66:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6a:	e0c8      	b.n	800aefe <_svfiprintf_r+0x1c2>
 800ad6c:	2340      	movs	r3, #64	; 0x40
 800ad6e:	6163      	str	r3, [r4, #20]
 800ad70:	2300      	movs	r3, #0
 800ad72:	9309      	str	r3, [sp, #36]	; 0x24
 800ad74:	2320      	movs	r3, #32
 800ad76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad7a:	2330      	movs	r3, #48	; 0x30
 800ad7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad80:	9503      	str	r5, [sp, #12]
 800ad82:	f04f 0b01 	mov.w	fp, #1
 800ad86:	4637      	mov	r7, r6
 800ad88:	463d      	mov	r5, r7
 800ad8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad8e:	b10b      	cbz	r3, 800ad94 <_svfiprintf_r+0x58>
 800ad90:	2b25      	cmp	r3, #37	; 0x25
 800ad92:	d13e      	bne.n	800ae12 <_svfiprintf_r+0xd6>
 800ad94:	ebb7 0a06 	subs.w	sl, r7, r6
 800ad98:	d00b      	beq.n	800adb2 <_svfiprintf_r+0x76>
 800ad9a:	4653      	mov	r3, sl
 800ad9c:	4632      	mov	r2, r6
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4640      	mov	r0, r8
 800ada2:	f7ff ff71 	bl	800ac88 <__ssputs_r>
 800ada6:	3001      	adds	r0, #1
 800ada8:	f000 80a4 	beq.w	800aef4 <_svfiprintf_r+0x1b8>
 800adac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adae:	4453      	add	r3, sl
 800adb0:	9309      	str	r3, [sp, #36]	; 0x24
 800adb2:	783b      	ldrb	r3, [r7, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 809d 	beq.w	800aef4 <_svfiprintf_r+0x1b8>
 800adba:	2300      	movs	r3, #0
 800adbc:	f04f 32ff 	mov.w	r2, #4294967295
 800adc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adc4:	9304      	str	r3, [sp, #16]
 800adc6:	9307      	str	r3, [sp, #28]
 800adc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adcc:	931a      	str	r3, [sp, #104]	; 0x68
 800adce:	462f      	mov	r7, r5
 800add0:	2205      	movs	r2, #5
 800add2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800add6:	4850      	ldr	r0, [pc, #320]	; (800af18 <_svfiprintf_r+0x1dc>)
 800add8:	f7f5 fa8a 	bl	80002f0 <memchr>
 800addc:	9b04      	ldr	r3, [sp, #16]
 800adde:	b9d0      	cbnz	r0, 800ae16 <_svfiprintf_r+0xda>
 800ade0:	06d9      	lsls	r1, r3, #27
 800ade2:	bf44      	itt	mi
 800ade4:	2220      	movmi	r2, #32
 800ade6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adea:	071a      	lsls	r2, r3, #28
 800adec:	bf44      	itt	mi
 800adee:	222b      	movmi	r2, #43	; 0x2b
 800adf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adf4:	782a      	ldrb	r2, [r5, #0]
 800adf6:	2a2a      	cmp	r2, #42	; 0x2a
 800adf8:	d015      	beq.n	800ae26 <_svfiprintf_r+0xea>
 800adfa:	9a07      	ldr	r2, [sp, #28]
 800adfc:	462f      	mov	r7, r5
 800adfe:	2000      	movs	r0, #0
 800ae00:	250a      	movs	r5, #10
 800ae02:	4639      	mov	r1, r7
 800ae04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae08:	3b30      	subs	r3, #48	; 0x30
 800ae0a:	2b09      	cmp	r3, #9
 800ae0c:	d94d      	bls.n	800aeaa <_svfiprintf_r+0x16e>
 800ae0e:	b1b8      	cbz	r0, 800ae40 <_svfiprintf_r+0x104>
 800ae10:	e00f      	b.n	800ae32 <_svfiprintf_r+0xf6>
 800ae12:	462f      	mov	r7, r5
 800ae14:	e7b8      	b.n	800ad88 <_svfiprintf_r+0x4c>
 800ae16:	4a40      	ldr	r2, [pc, #256]	; (800af18 <_svfiprintf_r+0x1dc>)
 800ae18:	1a80      	subs	r0, r0, r2
 800ae1a:	fa0b f000 	lsl.w	r0, fp, r0
 800ae1e:	4318      	orrs	r0, r3
 800ae20:	9004      	str	r0, [sp, #16]
 800ae22:	463d      	mov	r5, r7
 800ae24:	e7d3      	b.n	800adce <_svfiprintf_r+0x92>
 800ae26:	9a03      	ldr	r2, [sp, #12]
 800ae28:	1d11      	adds	r1, r2, #4
 800ae2a:	6812      	ldr	r2, [r2, #0]
 800ae2c:	9103      	str	r1, [sp, #12]
 800ae2e:	2a00      	cmp	r2, #0
 800ae30:	db01      	blt.n	800ae36 <_svfiprintf_r+0xfa>
 800ae32:	9207      	str	r2, [sp, #28]
 800ae34:	e004      	b.n	800ae40 <_svfiprintf_r+0x104>
 800ae36:	4252      	negs	r2, r2
 800ae38:	f043 0302 	orr.w	r3, r3, #2
 800ae3c:	9207      	str	r2, [sp, #28]
 800ae3e:	9304      	str	r3, [sp, #16]
 800ae40:	783b      	ldrb	r3, [r7, #0]
 800ae42:	2b2e      	cmp	r3, #46	; 0x2e
 800ae44:	d10c      	bne.n	800ae60 <_svfiprintf_r+0x124>
 800ae46:	787b      	ldrb	r3, [r7, #1]
 800ae48:	2b2a      	cmp	r3, #42	; 0x2a
 800ae4a:	d133      	bne.n	800aeb4 <_svfiprintf_r+0x178>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	1d1a      	adds	r2, r3, #4
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	9203      	str	r2, [sp, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	bfb8      	it	lt
 800ae58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae5c:	3702      	adds	r7, #2
 800ae5e:	9305      	str	r3, [sp, #20]
 800ae60:	4d2e      	ldr	r5, [pc, #184]	; (800af1c <_svfiprintf_r+0x1e0>)
 800ae62:	7839      	ldrb	r1, [r7, #0]
 800ae64:	2203      	movs	r2, #3
 800ae66:	4628      	mov	r0, r5
 800ae68:	f7f5 fa42 	bl	80002f0 <memchr>
 800ae6c:	b138      	cbz	r0, 800ae7e <_svfiprintf_r+0x142>
 800ae6e:	2340      	movs	r3, #64	; 0x40
 800ae70:	1b40      	subs	r0, r0, r5
 800ae72:	fa03 f000 	lsl.w	r0, r3, r0
 800ae76:	9b04      	ldr	r3, [sp, #16]
 800ae78:	4303      	orrs	r3, r0
 800ae7a:	3701      	adds	r7, #1
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	7839      	ldrb	r1, [r7, #0]
 800ae80:	4827      	ldr	r0, [pc, #156]	; (800af20 <_svfiprintf_r+0x1e4>)
 800ae82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae86:	2206      	movs	r2, #6
 800ae88:	1c7e      	adds	r6, r7, #1
 800ae8a:	f7f5 fa31 	bl	80002f0 <memchr>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d038      	beq.n	800af04 <_svfiprintf_r+0x1c8>
 800ae92:	4b24      	ldr	r3, [pc, #144]	; (800af24 <_svfiprintf_r+0x1e8>)
 800ae94:	bb13      	cbnz	r3, 800aedc <_svfiprintf_r+0x1a0>
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	3307      	adds	r3, #7
 800ae9a:	f023 0307 	bic.w	r3, r3, #7
 800ae9e:	3308      	adds	r3, #8
 800aea0:	9303      	str	r3, [sp, #12]
 800aea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea4:	444b      	add	r3, r9
 800aea6:	9309      	str	r3, [sp, #36]	; 0x24
 800aea8:	e76d      	b.n	800ad86 <_svfiprintf_r+0x4a>
 800aeaa:	fb05 3202 	mla	r2, r5, r2, r3
 800aeae:	2001      	movs	r0, #1
 800aeb0:	460f      	mov	r7, r1
 800aeb2:	e7a6      	b.n	800ae02 <_svfiprintf_r+0xc6>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	3701      	adds	r7, #1
 800aeb8:	9305      	str	r3, [sp, #20]
 800aeba:	4619      	mov	r1, r3
 800aebc:	250a      	movs	r5, #10
 800aebe:	4638      	mov	r0, r7
 800aec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aec4:	3a30      	subs	r2, #48	; 0x30
 800aec6:	2a09      	cmp	r2, #9
 800aec8:	d903      	bls.n	800aed2 <_svfiprintf_r+0x196>
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d0c8      	beq.n	800ae60 <_svfiprintf_r+0x124>
 800aece:	9105      	str	r1, [sp, #20]
 800aed0:	e7c6      	b.n	800ae60 <_svfiprintf_r+0x124>
 800aed2:	fb05 2101 	mla	r1, r5, r1, r2
 800aed6:	2301      	movs	r3, #1
 800aed8:	4607      	mov	r7, r0
 800aeda:	e7f0      	b.n	800aebe <_svfiprintf_r+0x182>
 800aedc:	ab03      	add	r3, sp, #12
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	4622      	mov	r2, r4
 800aee2:	4b11      	ldr	r3, [pc, #68]	; (800af28 <_svfiprintf_r+0x1ec>)
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	4640      	mov	r0, r8
 800aee8:	f7fc fd56 	bl	8007998 <_printf_float>
 800aeec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aef0:	4681      	mov	r9, r0
 800aef2:	d1d6      	bne.n	800aea2 <_svfiprintf_r+0x166>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	065b      	lsls	r3, r3, #25
 800aef8:	f53f af35 	bmi.w	800ad66 <_svfiprintf_r+0x2a>
 800aefc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aefe:	b01d      	add	sp, #116	; 0x74
 800af00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af04:	ab03      	add	r3, sp, #12
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	4622      	mov	r2, r4
 800af0a:	4b07      	ldr	r3, [pc, #28]	; (800af28 <_svfiprintf_r+0x1ec>)
 800af0c:	a904      	add	r1, sp, #16
 800af0e:	4640      	mov	r0, r8
 800af10:	f7fc ffe4 	bl	8007edc <_printf_i>
 800af14:	e7ea      	b.n	800aeec <_svfiprintf_r+0x1b0>
 800af16:	bf00      	nop
 800af18:	0800b2d4 	.word	0x0800b2d4
 800af1c:	0800b2da 	.word	0x0800b2da
 800af20:	0800b2de 	.word	0x0800b2de
 800af24:	08007999 	.word	0x08007999
 800af28:	0800ac89 	.word	0x0800ac89

0800af2c <strncmp>:
 800af2c:	b510      	push	{r4, lr}
 800af2e:	b16a      	cbz	r2, 800af4c <strncmp+0x20>
 800af30:	3901      	subs	r1, #1
 800af32:	1884      	adds	r4, r0, r2
 800af34:	f810 3b01 	ldrb.w	r3, [r0], #1
 800af38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d103      	bne.n	800af48 <strncmp+0x1c>
 800af40:	42a0      	cmp	r0, r4
 800af42:	d001      	beq.n	800af48 <strncmp+0x1c>
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1f5      	bne.n	800af34 <strncmp+0x8>
 800af48:	1a98      	subs	r0, r3, r2
 800af4a:	bd10      	pop	{r4, pc}
 800af4c:	4610      	mov	r0, r2
 800af4e:	e7fc      	b.n	800af4a <strncmp+0x1e>

0800af50 <__ascii_wctomb>:
 800af50:	b149      	cbz	r1, 800af66 <__ascii_wctomb+0x16>
 800af52:	2aff      	cmp	r2, #255	; 0xff
 800af54:	bf85      	ittet	hi
 800af56:	238a      	movhi	r3, #138	; 0x8a
 800af58:	6003      	strhi	r3, [r0, #0]
 800af5a:	700a      	strbls	r2, [r1, #0]
 800af5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800af60:	bf98      	it	ls
 800af62:	2001      	movls	r0, #1
 800af64:	4770      	bx	lr
 800af66:	4608      	mov	r0, r1
 800af68:	4770      	bx	lr

0800af6a <memmove>:
 800af6a:	4288      	cmp	r0, r1
 800af6c:	b510      	push	{r4, lr}
 800af6e:	eb01 0302 	add.w	r3, r1, r2
 800af72:	d807      	bhi.n	800af84 <memmove+0x1a>
 800af74:	1e42      	subs	r2, r0, #1
 800af76:	4299      	cmp	r1, r3
 800af78:	d00a      	beq.n	800af90 <memmove+0x26>
 800af7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af7e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af82:	e7f8      	b.n	800af76 <memmove+0xc>
 800af84:	4283      	cmp	r3, r0
 800af86:	d9f5      	bls.n	800af74 <memmove+0xa>
 800af88:	1881      	adds	r1, r0, r2
 800af8a:	1ad2      	subs	r2, r2, r3
 800af8c:	42d3      	cmn	r3, r2
 800af8e:	d100      	bne.n	800af92 <memmove+0x28>
 800af90:	bd10      	pop	{r4, pc}
 800af92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af9a:	e7f7      	b.n	800af8c <memmove+0x22>

0800af9c <_realloc_r>:
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9e:	4607      	mov	r7, r0
 800afa0:	4614      	mov	r4, r2
 800afa2:	460e      	mov	r6, r1
 800afa4:	b921      	cbnz	r1, 800afb0 <_realloc_r+0x14>
 800afa6:	4611      	mov	r1, r2
 800afa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800afac:	f7fc bc12 	b.w	80077d4 <_malloc_r>
 800afb0:	b922      	cbnz	r2, 800afbc <_realloc_r+0x20>
 800afb2:	f7fc fbc1 	bl	8007738 <_free_r>
 800afb6:	4625      	mov	r5, r4
 800afb8:	4628      	mov	r0, r5
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afbc:	f000 f814 	bl	800afe8 <_malloc_usable_size_r>
 800afc0:	42a0      	cmp	r0, r4
 800afc2:	d20f      	bcs.n	800afe4 <_realloc_r+0x48>
 800afc4:	4621      	mov	r1, r4
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7fc fc04 	bl	80077d4 <_malloc_r>
 800afcc:	4605      	mov	r5, r0
 800afce:	2800      	cmp	r0, #0
 800afd0:	d0f2      	beq.n	800afb8 <_realloc_r+0x1c>
 800afd2:	4631      	mov	r1, r6
 800afd4:	4622      	mov	r2, r4
 800afd6:	f7fc fb9b 	bl	8007710 <memcpy>
 800afda:	4631      	mov	r1, r6
 800afdc:	4638      	mov	r0, r7
 800afde:	f7fc fbab 	bl	8007738 <_free_r>
 800afe2:	e7e9      	b.n	800afb8 <_realloc_r+0x1c>
 800afe4:	4635      	mov	r5, r6
 800afe6:	e7e7      	b.n	800afb8 <_realloc_r+0x1c>

0800afe8 <_malloc_usable_size_r>:
 800afe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afec:	1f18      	subs	r0, r3, #4
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bfbc      	itt	lt
 800aff2:	580b      	ldrlt	r3, [r1, r0]
 800aff4:	18c0      	addlt	r0, r0, r3
 800aff6:	4770      	bx	lr

0800aff8 <_init>:
 800aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affa:	bf00      	nop
 800affc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affe:	bc08      	pop	{r3}
 800b000:	469e      	mov	lr, r3
 800b002:	4770      	bx	lr

0800b004 <_fini>:
 800b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b006:	bf00      	nop
 800b008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00a:	bc08      	pop	{r3}
 800b00c:	469e      	mov	lr, r3
 800b00e:	4770      	bx	lr
